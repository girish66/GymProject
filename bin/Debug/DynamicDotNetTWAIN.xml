<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicDotNetTWAIN</name>
    </assembly>
    <members>
        <member name="T:Dynamsoft.DotNet.TWAIN.Web.FtpClient">
            <summary>
            Summary description for FtpClient.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Web.FtpClient.#ctor(System.String,System.String,System.String,System.UInt16,System.Boolean,System.Boolean,System.String,System.UInt16,System.String,System.String,Dynamsoft.DotNet.TWAIN.Interface.IImageEvent)">
            <summary>
            构造函数
            </summary>
            <param name="server">服务器</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="port">端口号</param>
            <param name="bIfFTPPassiveMode">是否被动传输</param>
            <param name="strProxyServerName">代理服务器名</param>
            <param name="usProxyProt">代理服务器端口号</param>
            <param name="strProxyUserName">代理服务的用户</param>
            <param name="strProxyassword">代理服务的密码</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Download(System.String,System.IO.Stream@,Dynamsoft.DotNet.TWAIN.IViewDialogCancel)">
            <summary>
            Download a remote file to a local file name which can include
            a path, and set the resume flag. The local file name will be
            created or overwritten, but the path must exist.
            </summary>
            <param name="remFileName"></param>
            <param name="locFileName"></param>
            <param name="resume"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Upload(System.Byte[],System.String,Dynamsoft.DotNet.TWAIN.IViewDialogCancel)">
            <summary>
            Upload a file and set the resume flag.
            </summary>
            <param name="fileName"></param>
            <param name="resume"></param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Port">
            <summary>
            Remote server port. Typically TCP 21
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Server">
            <summary>
            Gets and Sets the name of the FTP server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Username">
            <summary>
            Gets and Sets the username.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.Password">
            <summary>
            Gets and Set the password.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.IFSSL">
            <summary>
            Gets and Sets ifssl.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.FtpClient.IFAnonymous">
            <summary>
            Gets and Sets ifAnonymous.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ElementTags">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ITEXT">
            <summary> the root tag. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.TITLE">
            <summary> attribute of the root and annotation tag (also a special tag within a chapter or section) </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SUBJECT">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.KEYWORDS">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.AUTHOR">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CREATIONDATE">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PRODUCER">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CHAPTER">
            <summary> the chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SECTION">
            <summary> the section tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NUMBERDEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.DEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NUMBER">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.INDENT">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LEFT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.RIGHT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PHRASE">
            <summary> the phrase tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ANCHOR">
            <summary> the anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LIST">
            <summary> the list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LISTITEM">
            <summary> the listitem tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PARAGRAPH">
            <summary> the paragraph tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LEADING">
            <summary> attribute of phrase/paragraph/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN">
            <summary> attribute of paragraph/image/table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.KEEPTOGETHER">
            <summary> attribute of paragraph </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NAME">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.REFERENCE">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LISTSYMBOL">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NUMBERED">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LETTERED">
            <summary> attribute of the list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.FIRST">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SYMBOLINDENT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.INDENTATIONLEFT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.INDENTATIONRIGHT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.IGNORE">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ENTITY">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ID">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CHUNK">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ENCODING">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.EMBEDDED">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.COLOR">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.RED">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.GREEN">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BLUE">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.TABLE">
            <summary> the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ROW">
            <summary> the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CELL">
            <summary> the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.COLUMNS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LASTHEADERROW">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CELLPADDING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CELLSPACING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.OFFSET">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.WIDTHS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.TABLEFITSPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CELLSFITPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CONVERT2PDFP">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.HORIZONTALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.VERTICALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.COLSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ROWSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.HEADER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.FOOTER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NOWRAP">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BORDERWIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.TOP">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BOTTOM">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.WIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BORDERCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BACKGROUNDCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BGRED">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BGGREEN">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BGBLUE">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.GRAYFILL">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.IMAGE">
            <summary> the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.BOOKMARKOPEN">
            <summary> the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.URL">
            <summary> attribute of the image and annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.UNDERLYING">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.TEXTWRAP">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ABSOLUTEX">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ABSOLUTEY">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PLAINWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PLAINHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SCALEDWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SCALEDHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ROTATION">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NEWPAGE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NEWLINE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ANNOTATION">
            <summary> the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.FILE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.DESTINATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PAGE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.NAMED">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.APPLICATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PARAMETERS">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.OPERATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.DEFAULTDIR">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LLX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LLY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.URX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.URY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.CONTENT">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_LEFT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_CENTER">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_RIGHT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_JUSTIFIED">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_JUSTIFIED_ALL">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_TOP">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_MIDDLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_BOTTOM">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_BASELINE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.DEFAULT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.UNKNOWN">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.FONT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SIZE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.STYLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.HORIZONTALRULE">
            <summary> the possible value of a tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.PAGE_SIZE">
            the possible value of a tag 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ORIENTATION">
            the possible value of a tag 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.ALIGN_INDENTATION_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.AUTO_INDENT_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.LOWERCASE">
            a possible list attribute 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.FACE">
            a possible list attribute
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.SRC">
            attribute of the image or iframe tag
            @since 2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.GetAlignment(System.Int32)">
            <summary>
            Translates the alignment value to a String value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ElementTags.AlignmentValue(System.String)">
            Translates a String value to an alignment value.
            (written by Norman Richards, integrated into iText by Bruno)
            @param	a String (one of the ALIGN_ constants of this class)
            @param	an alignment value (one of the ALIGN_ constants of the Element interface) 
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfStream" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfObject" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.BOOLEAN">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.NUMBER">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.STRING">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.NAME">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.ARRAY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.DICTIONARY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.STREAM">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.NULL">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.INDIRECT">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.NOTHING">
            This is an empty string used for the <CODE>PdfNull</CODE>-object and for an empty <CODE>PdfString</CODE>-object. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.TEXT_PDFDOCENCODING">
            This is the default encoding to be used for converting strings into bytes and vice versa.
            The default encoding is PdfDocEcoding.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.TEXT_UNICODE">
            This is the encoding to be used to output text in Unicode. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.bytes">
            the content of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.type">
            the type of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.indRef">
            Holds value of property indRef.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.#ctor(System.Int32)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> without any <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.#ctor(System.Int32,System.String)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        content            content of the new <CODE>PdfObject</CODE> as a <CODE>String</CODE>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.#ctor(System.Int32,System.Byte[])">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.IO.Stream)">
            Writes the PDF representation of this <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>s to the writer.
            @param writer for backwards compatibility
            @param os the outputstream to write the bytes to.
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.GetBytes">
            Gets the presentation of this object in a byte array
            @return a byte array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.CanBeInObjStm">
            Can this object be in an object stream?
            @return true if this object can be in an object stream.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.ToString">
             Returns the <CODE>String</CODE>-representation of this <CODE>PdfObject</CODE>.
            
             @return        a <CODE>String</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsNull">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNull</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsBoolean">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfBoolean</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsNumber">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNumber</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsString">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfString</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsName">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfName</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsArray">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfArray</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsDictionary">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfDictionary</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsStream">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfStream</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.IsIndirect">
            Checks if this is an indirect object.
            @return true if this is an indirect object
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.Length">
             Returns the length of the actual content of the <CODE>PdfObject</CODE>.
             <P>
             In some cases, namely for <CODE>PdfString</CODE> and <CODE>PdfStream</CODE>,
             this method differs from the method <CODE>pdfLength</CODE> because <CODE>pdfLength</CODE>
             returns the length of the PDF representation of the object, not of the actual content
             as does the method <CODE>length</CODE>.</P>
             <P>
             Remark: the actual content of an object is in some cases identical to its representation.
             The following statement is always true: Length() &gt;= PdfLength().</P>
            
             @return        a length
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.Content">
             Changes the content of this <CODE>PdfObject</CODE>.
            
             @param        content            the new content of this <CODE>PdfObject</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfObject.Type">
             Returns the type of this <CODE>PdfObject</CODE>.
            
             @return        a type
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.FONT">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.OUTLINES">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.PAGE">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.PAGES">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.CATALOG">
            This is a possible type of dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.dictionaryType">
            This is the type of this dictionary 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.hashMap">
            This is the hashmap that contains all the values and keys of the dictionary 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.#ctor">
            Constructs an empty <CODE>PdfDictionary</CODE>-object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
             Constructs a <CODE>PdfDictionary</CODE>-object of a certain type.
            
             @param        type    a <CODE>PdfName</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfDictionary</CODE>.
            
             @return        an array of <CODE>byte</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.Put(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is <CODE>null</CODE> or <CODE>PdfNull</CODE> the key is deleted.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.PutEx(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is null it does nothing.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.Remove(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
             Removes a <CODE>PdfObject</CODE> and its key from the <CODE>PdfDictionary</CODE>.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.Get(Dynamsoft.DotNet.TWAIN.PDF.PdfName)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.IsFont">
              Checks if a <CODE>Dictionary</CODE> is of the type FONT.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.IsPage">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGE.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.IsPages">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.IsCatalog">
              Checks if a <CODE>Dictionary</CODE> is of the type CATALOG.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.IsOutlineTree">
              Checks if a <CODE>Dictionary</CODE> is of the type OUTLINES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.GetDirectObject(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            This function behaves the same as 'get', but will never return an indirect reference,
            it will always look such references up and return the actual object.
            @param key 
            @return null, or a non-indirect object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary.GetAsDict(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            All the getAs functions will return either null, or the specified object type
            This function will automatically look up indirect references. There's one obvious
            exception, the one that will only return an indirect reference.  All direct objects
            come back as a null.
            Mark A Storer (2/17/06)
            @param key
            @return the appropriate object in its final type, or null
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.DEFAULT_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.NO_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.BEST_SPEED">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.BEST_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.compressed">
            is the stream compressed? 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.compressionLevel">
            The level of compression.
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.#ctor(System.Byte[])">
             Constructs a <CODE>PdfStream</CODE>-object.
            
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.#ctor">
            Constructs a <CODE>PdfStream</CODE>-object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.FlateCompress(System.Int32)">
            Compresses the stream.
            @param compressionLevel the compression level (0 = best speed, 9 = best compression, -1 is default)
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.WriteContent(System.IO.Stream)">
            Writes the data content to an <CODE>Stream</CODE>.
            @param os the destination to write to
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.ToString">
            @see com.lowagie.text.pdf.PdfObject#toString()
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.PdfStream.RawLength" -->
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PRStream.Length">
            Sets the data associated with the stream
            @param data raw data, decrypted and uncompressed.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.TIFFConstants">
            A list of constants used in class TIFFImage.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Licenses.TwainLicense">
            <summary>
            Summary description for TwainLicense.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear">
             <summary>
             Rotate image using bilinear interpolation.
             </summary>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <remarks><para>The class implements image rotation filter using bilinear
             interpolation algorithm.</para>
             
             <para>The filter accepts 8 bpp grayscale images and 24 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateBilinear filter = new RotateBilinear( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_bilinear.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor"/>
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic"/>
             
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter">
            <summary>
            Base class for image rotation filters.
            </summary>
            
            <remarks>The abstract class is the base class for all filters,
            which implement rotating algorithms.</remarks>
            
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter">
            <summary>
            Base class for filters, which may produce new image of different size as a
            result of image processing.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which
            do image processing creating new image of the size, which may differ from the
            size of source image. Filters based on this class cannot be applied directly
            to the source image, which is kept unchanged.</para>
            
            <para>The base class itself does not define supported pixel formats of source
            image and resulting pixel formats of destination image. Filters inheriting from
            this base class, should specify supported pixel formats and their transformations
            overriding abstract <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.FormatTransalations"/> property.</para>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks>
             
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.Apply(System.Drawing.Imaging.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.Apply(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks>
             
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.Apply(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.FormatTransalations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="!:InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="!:InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.CalculateNewImageSize(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseTransformationFilter.FormatTransalations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="!:IFilterInformation.FormatTransalations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.angle">
            <summary>
            Rotation angle.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.keepSize">
            <summary>
            Keep image size or not.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.fillColor">
            <summary>
            Fill color.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.KeepSize"/> property to <b>false</b>.
            </para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.CalculateNewImageSize(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.Angle">
            <summary>
            Rotation angle, [0, 360].
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.KeepSize">
            <summary>
            Keep image size or not.
            </summary>
            
            <remarks><para>The property determines if source image's size will be kept
            as it is or not. If the value is set to <b>false</b>, then the new image will have
            new dimension according to rotation angle. If the valus is set to
            <b>true</b>, then the new image will have the same size, which means that some parts
            of the image may be clipped because of rotation.</para>
            </remarks>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.FillColor">
            <summary>
            Fill color.
            </summary>
            
            <remarks><para>The fill color is used to fill areas of destination image,
            which don't have corresponsing pixels in source image.</para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.KeepSize"/> property
            to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear.FormatTransalations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.ImageUtil.Clone(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
             <summary>
             Clone image.
             </summary>
             
             <param name="source">Source image.</param>
             <param name="format">Pixel format of result image.</param>
             
             <returns>Returns clone of the source image with specified pixel format.</returns>
            
             <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
             does not produce the desired result - it does not create a clone with specified pixel format.
             More of it, the original method does not create an actual clone - it does not create a copy
             of the image. That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.ImageUtil.Clone(System.Drawing.Bitmap)">
            <summary>
            Clone image.
            </summary>
            
            <param name="source">Source image.</param>
            
            <returns>Return clone of the source image.</returns>
            
            <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
            does not produce the desired result - it does not create an actual clone (it does not create a copy
            of the image). That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.ImageUtil.Clone(System.Drawing.Imaging.BitmapData)">
             <summary>
             Clone image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
            
             <returns>Clones image from source image data. The message does not clone pallete in the
             case if the source image has indexed pixel format.</returns>
             
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly">
            <summary>
            A RectangleReadOnly is the representation of a geometric figure.
            It's the same as a Rectangle but immutable.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Rectangle">
            <summary>
            A Rectangle is the representation of a geometric figure.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Element">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.HEADER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.TITLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.SUBJECT">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.KEYWORDS">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.AUTHOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.PRODUCER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CREATIONDATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CREATOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CHUNK">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.PHRASE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.PARAGRAPH">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.SECTION">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.LIST">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.LISTITEM">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CHAPTER">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ANCHOR">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CELL">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ROW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.TABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.PTABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ANNOTATION">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.RECTANGLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.JPEG">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.JPEG2000">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.IMGRAW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.IMGTEMPLATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.JBIG2">
            This is a possible type of <CODE>Element</CODE>.
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.MULTI_COLUMN_TEXT">
            <summary> This is a possible type of <CODE>Element</CODE>. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.MARKED">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.YMARK">
            This is a possible type of <CODE>Element</CODE>.
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_UNDEFINED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_LEFT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_CENTER">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the center
            and extra whitespace should be placed equally on
            the left and right.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_RIGHT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the right
            indent and extra whitespace should be placed on
            the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_JUSTIFIED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that extra whitespace should be spread
            out through the rows of the paragraph with the
            text lined up with the left and right indent
            except on the last line which should be aligned
            to the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_TOP">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_MIDDLE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_BOTTOM">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_BASELINE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.ALIGN_JUSTIFIED_ALL">
            <summary>
            Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITTG4">
            <summary>
            Pure two-dimensional encoding (Group 4)
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITTG3_1D">
            <summary>
            Pure one-dimensional encoding (Group 3, 1-D)
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITTG3_2D">
            <summary>
            Mixed one- and two-dimensional encoding (Group 3, 2-D)
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITT_BLACKIS1">
            <summary>
            A flag indicating whether 1-bits are to be interpreted as black pixels
            and 0-bits as white pixels,
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITT_ENCODEDBYTEALIGN">
            <summary>
            A flag indicating whether the filter expects extra 0-bits before each
            encoded line so that the line begins on a byte boundary.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITT_ENDOFLINE">
            <summary>
            A flag indicating whether end-of-line bit patterns are required to be
             present in the encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Element.CCITT_ENDOFBLOCK">
            <summary>
            A flag indicating whether the filter expects the encoded data to be
            terminated by an end-of-block pattern, overriding the Rows
            parameter. The use of this flag will set the key /EndOfBlock to false.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IElement">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IElement.Process(Dynamsoft.DotNet.TWAIN.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IElement.IsContent">
            Checks if this element is a content object.
            If not, it's a metadata object.
            @since    iText 2.0.8
            @return   true if this is a 'content' element; false if this is a 'medadata' element
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IElement.IsNestable">
            Checks if this element is nestable.
            @since    iText 2.0.8
            @return   true if this element can be nested inside other elements.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IElement.ToString">
            <summary>
            Gets the content of the text element.
            </summary>
            <returns>the content of the text element</returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IElement.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IElement.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.UNDEFINED">
            <summary> This is the value that will be used as <VAR>undefined</VAR>. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.TOP_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.BOTTOM_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.LEFT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.RIGHT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.NO_BORDER">
            <summary> This represents a rectangle without borders. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.BOX">
            <summary> This represents a type of border. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.llx">
            <summary> the lower left x-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.lly">
            <summary> the lower left y-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.urx">
            <summary> the upper right x-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.ury">
            <summary> the upper right y-coordinate. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.border">
            <summary> This represents the status of the 4 sides of the rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderWidth">
            <summary> This is the width of the border around this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderColor">
            <summary> This is the color of the border of this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderColorLeft">
            The color of the left border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderColorRight">
            The color of the right border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderColorTop">
            The color of the top border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderColorBottom">
            The color of the bottom border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderWidthLeft">
            The width of the left border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderWidthRight">
            The width of the right border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderWidthTop">
            The width of the top border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.borderWidthBottom">
            The width of the bottom border of this rectangle. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.useVariableBorders">
            Whether variable width borders are used. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.backgroundColor">
            <summary> This is the color of the background of this rectangle. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.rotation">
            <summary> This is the rotation value of this rectangle. </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.CloneNonPositionParameters(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.SoftCloneNonPositionParameters(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Process(Dynamsoft.DotNet.TWAIN.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.GetRectangle(System.Single,System.Single)">
            <summary>
            Gets a Rectangle that is altered to fit on the page.
            </summary>
            <param name="top">the top position</param>
            <param name="bottom">the bottom position</param>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Rotate">
            <summary>
            Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.HasBorders">
            <summary>
            Indicates if the table has borders.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.HasBorder(System.Int32)">
            <summary>
            Indicates if the table has a some type of border.
            </summary>
            <param name="type">the type of border</param>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.UpdateBorderBasedOnWidth(System.Single,System.Int32)">
            Updates the border flag for a side based on the specified width. A width
            of 0 will disable the border on that side. Any other width enables it.
            
            @param width
                       width of border
            @param side
                       border side constant
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Width">
            <summary>
            Returns the width of the rectangle.
            </summary>
            <value>a width</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Height">
            <summary>
            Returns the height of the rectangle.
            </summary>
            <value>a height</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.Rotation">
            <summary>
            Returns the rotation
            </summary>
            <value>a int</value>    
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Rectangle.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.CloneNonPositionParameters(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.SoftCloneNonPositionParameters(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.RectangleReadOnly.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfImage">
            <CODE>PdfImage</CODE> is a <CODE>PdfStream</CODE> containing an image-<CODE>Dictionary</CODE> and -stream.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfImage.name">
            This is the <CODE>PdfName</CODE> of the image. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfImage.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Images.Image,System.String,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
             Constructs a <CODE>PdfImage</CODE>-object.
            
             @param image the <CODE>Image</CODE>-object
             @param name the <CODE>PdfName</CODE> for this image
             @throws BadPdfFormatException on error
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfImage.Name">
             Returns the <CODE>PdfName</CODE> of the image.
            
             @return        the name
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.value">
            actual value of this <CODE>PdfNumber</CODE>, represented as a <CODE>double</CODE> 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.#ctor(System.String)">
             Constructs a <CODE>PdfNumber</CODE>-object.
            
             @param        content            value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.#ctor(System.Int32)">
             Constructs a new int <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.#ctor(System.Double)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.#ctor(System.Single)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.Increment">
            Increments the value of the <CODE>PdfNumber</CODE>-object with 1.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.IntValue">
             Returns the primitive <CODE>int</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfNumber.DoubleValue">
             Returns the primitive <CODE>double</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfReader">
            Reads a PDF document.
            @author Paulo Soares (psoares@consiste.pt)
            @author Kazuya Ujihara
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IPdfViewerPreferences">
            Viewer preferences are described in section 3.6.1 and 8.1 of the
            PDF Reference 1.7 (Table 3.25 on p139-142 and Table 8.1 on p579-581).
            They are explained in section 13.1 of the book 'iText in Action'.
            The values of the different preferences were originally stored
            in class PdfWriter, but they have been moved to this separate interface
            for reasons of convenience.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.IPdfViewerPreferences.AddViewerPreference(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.IPdfViewerPreferences.ViewerPreferences" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.appendable">
            Holds value of property appendable.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.String)">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.String,System.Byte[])">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.Byte[],System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.Uri)">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.Uri,System.Byte[])">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.IO.Stream,System.Byte[])">
            Reads and parses a PDF document.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(System.IO.Stream)">
            Reads and parses a PDF document.
            @param isp the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray,System.Byte[])">
            Reads and parses a pdf document. Contrary to the other constructors only the xref is read
            into memory. The reader is said to be working in "partial" mode as only parts of the pdf
            are read as needed. The pdf is left open but may be closed at any time with
            <CODE>PdfReader.Close()</CODE>, reopen is automatic.
            @param raf the document location
            @param ownerPassword the password or <CODE>null</CODE> for no password
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfReader)">
            Creates an independent duplicate.
            @param reader the <CODE>PdfReader</CODE> to duplicate
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageRotation(System.Int32)">
            Gets the page rotation. This value can be 0, 90, 180 or 270.
            @param index the page number. The first page is 1
            @return the page rotation
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObjectRelease(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @param obj
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObject(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed.
            @param obj the <CODE>PdfObject</CODE> to read
            @return the resolved <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObjectRelease(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed. If the reader was opened in partial mode the object will be released
            to save memory.
            @param obj the <CODE>PdfObject</CODE> to read
            @param parent
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObject(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @param obj
            @param parent
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObjectRelease(System.Int32)">
            @param idx
            @return a PdfObject
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPdfObject(System.Int32)">
            @param idx
            @return aPdfObject
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ResetLastXrefPartial">
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ReleaseLastXrefPartial">
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ReleaseLastXrefPartial(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @param obj
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.AddPdfObject(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @param obj
            @return an indirect reference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.DumpPerc">
            @return the percentage of the cross reference table that has been read
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.KillIndirect(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Eliminates the reference to the object freeing the memory used by it and clearing
            the xref entry.
            @param obj the object. If it's an indirect reference it will be eliminated
            @return the object or the already erased dereferenced object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.FlateDecode(System.Byte[])">
            Decodes a stream that has the FlateDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.DecodePredictor(System.Byte[],Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @param in
            @param dicPar
            @return a byte array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.FlateDecode(System.Byte[],System.Boolean)">
            A helper to FlateDecode.
            @param in the input data
            @param strict <CODE>true</CODE> to read a correct stream. <CODE>false</CODE>
            to try to read a corrupted stream
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ASCIIHexDecode(System.Byte[])">
            Decodes a stream that has the ASCIIHexDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ASCII85Decode(System.Byte[])">
            Decodes a stream that has the ASCII85Decode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.LZWDecode(System.Byte[])">
            Decodes a stream that has the LZWDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.IsRebuilt">
            Checks if the document had errors and was rebuilt.
             @return true if rebuilt.
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a Dictionary object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ResetReleasePage">
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageContent(System.Int32,Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @param file the location of the PDF document
            @throws IOException on error
            @return the content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetPageContent(System.Int32)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @throws IOException on error
            @return the content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetStreamBytes(Dynamsoft.DotNet.TWAIN.PDF.PRStream,Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetStreamBytes(Dynamsoft.DotNet.TWAIN.PDF.PRStream)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetStreamBytesRaw(Dynamsoft.DotNet.TWAIN.PDF.PRStream,Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetStreamBytesRaw(Dynamsoft.DotNet.TWAIN.PDF.PRStream)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.EliminateSharedStreams">
            Eliminates shared streams if they exist. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.IsEncrypted">
            Returns <CODE>true</CODE> if the PDF is encrypted.
            @return <CODE>true</CODE> if the PDF is encrypted
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Is128Key">
            Returns <CODE>true</CODE> if the PDF has a 128 bit key encryption.
            @return <CODE>true</CODE> if the PDF has a 128 bit key encryption
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ShuffleSubsetNames">
            Finds all the font subsets and changes the prefixes to some
            random values.
            @return the number of font subsets altered
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.CreateFakeFontSubsets">
            Finds all the fonts not subset but embedded and marks them as subset.
            @return the number of fonts altered
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetNamedDestination">
            Gets all the named destinations as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets all the named destinations
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetNamedDestination(System.Boolean)">
            Gets all the named destinations as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets all the named destinations
            @since   2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetNamedDestinationFromNames">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetNamedDestinationFromNames(System.Boolean)">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets the named destinations
            @since   2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.GetNamedDestinationFromStrings">
            Gets the named destinations from the /Names key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.RemoveFields">
            Removes all the fields from the document.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.RemoveAnnotations">
            Removes all the annotations and fields from the document.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ConsolidateNamedDestinations">
            Replaces all the local named links with the actual destinations. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Close">
            Closes the reader
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.RemoveUnusedObjects">
            Removes all the unreachable objects.
            @return the number of indirect objects removed
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.AddViewerPreference(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Adds a viewer preference
            @param key a key for a viewer preference
            @param value a value for the viewer preference
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.IsNewXrefType">
            Getter for property newXrefType.
            @return Value of property newXrefType.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.IsHybridXref">
            Getter for property hybridXref.
            @return Value of property hybridXref.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.RemoveUsageRights">
            Removes any usage rights that this PDF may have. Only Adobe can grant usage rights
            and any PDF modification with iText will invalidate them. Invalidated usage rights may
            confuse Acrobat and it's advisabe to remove them altogether.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.SafeFile">
            Gets a new file instance of the original PDF
            document.
            @return a new file instance of the original PDF document
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.NumberOfPages">
            Gets the number of pages in the document.
            @return the number of pages in the document
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Catalog">
            Returns the document's catalog. This dictionary is not a copy,
            any changes will be reflected in the catalog.
            @return the document's catalog
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Info">
            Returns the content of the document information dictionary as a <CODE>Hashtable</CODE>
            of <CODE>String</CODE>.
            @return content of the document information dictionary
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Tampered">
            Sets the tampered state. A tampered PdfReader cannot be reused in PdfStamper.
            @param tampered the tampered state
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Metadata">
            Gets the XML metadata.
            @throws IOException on error
            @return the XML metadata
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.LastXref">
            Gets the byte address of the last xref table.
            @return the byte address of the last xref table
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.XrefSize">
            Gets the number of xref objects.
            @return the number of xref objects
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.EofPos">
            Gets the byte address of the %%EOF marker.
            @return the byte address of the %%EOF marker
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PdfVersion">
            Gets the PDF version. Only the last version char is returned. For example
            version 1.4 is returned as '4'.
            @return the PDF version
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Permissions">
            Gets the encryption permissions. It can be used directly in
            <CODE>PdfWriter.SetEncryption()</CODE>.
            @return the encryption permissions
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.Trailer">
            Gets the trailer dictionary
            @return the trailer dictionary
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.SimpleViewerPreferences">
            Returns a bitset representing the PageMode and PageLayout viewer preferences.
            Doesn't return any information about the ViewerPreferences dictionary.
            @return an int that contains the Viewer Preferences.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.FileLength">
            Getter for property fileLength.
            @return Value of property fileLength.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.IsOpenedWithFullPermissions">
            Checks if the document was opened with the owner password so that the end application
            can decide what level of access restrictions to apply. If the document is not encrypted
            it will return <CODE>true</CODE>.
            @return <CODE>true</CODE> if the document was opened with the owner password or if it's not encrypted,
            <CODE>false</CODE> if the document was opened with the user password
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a dictionary object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.GetPageOrigRefRelease(System.Int32)">
            @param pageNum
            @return an indirect reference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfReader.PageRefs.ResetReleasePage">
            
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.DocumentException">
            <summary>
            Signals that an error has occurred in a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.BadElementException"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocumentException.#ctor">
            <summary>
            Constructs a new DocumentException
            </summary>
            <overloads>
            Has two overloads.
            </overloads>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocumentException.#ctor(System.String)">
            <summary>
            Construct a new DocumentException
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSchema.#ctor">
            Creates a Collection Schema dictionary.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSchema.AddField(System.String,Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField)">
            Adds a Collection field to the Schema.
            @param name  the name of the collection field
            @param field a Collection Field
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.TiffImage">
            Reads TIFF images
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TiffImage.GetNumberOfPages(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray)">
            Gets the number of pages the TIFF document has.
            @param s the file source
            @return the number of pages
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TiffImage.GetTiffImage(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray,System.Int32)">
            Reads a page from a TIFF image. Direct mode is not used.
            @param s the file source
            @param page the page to get. The first page is 1
            @return the <CODE>Image</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TiffImage.GetTiffImage(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray,System.Int32,System.Boolean)">
            Reads a page from a TIFF image.
            @param s the file source
            @param page the page to get. The first page is 1
            @param direct for single strip, CCITT images, generate the image
            by direct byte copying. It's faster but may not work
            every time
            @return the <CODE>Image</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle">
            <summary>
            Rectangle graphic object
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject">
            <summary>
            Summary description for DrawGDIObject.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Draw(System.Drawing.Graphics)">
            <summary>
            Draw object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.GetHandle(System.Int32)">
            <summary>
            Get handle point by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.GetHandleRectangle(System.Int32)">
            <summary>
            Get handle rectangle by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.DrawTracker(System.Drawing.Graphics)">
            <summary>
            Draw tracker for selected object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.HitTest(System.Drawing.Point)">
            <summary>
            Hit test.
            Return value: -1 - no hit
                           0 - hit anywhere
                           > 1 - handle number
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.PointInObject(System.Drawing.Point)">
            <summary>
            Test whether point is inside of the object
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.GetHandleCursor(System.Int32)">
            <summary>
            Get curesor for the handle
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.IntersectsWith(System.Drawing.Rectangle)">
            <summary>
            Test whether object intersects with rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Move(System.Int32,System.Int32)">
            <summary>
            Move object
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.MoveHandleTo(System.Drawing.Point,System.Int32)">
            <summary>
            Move handle to the point
            </summary>
            <param name="point"></param>
            <param name="handleNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Dump">
            <summary>
            Dump (for debugging)
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Normalize">
            <summary>
            Normalize object.
            Call this function in the end of object resizing.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.SaveToStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            Save object to serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.LoadFromStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            Load object from serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.Selected">
            <summary>
            Selection flag
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.PenColor">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.PenWidth">
            <summary>
            Pen width
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.FillColor">
            <summary>
            Annotation fill color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.TextColor">
            <summary>
            Annotation Text color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.TextFont">
            <summary>
            Annotation Text Font
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.HandleCount">
            <summary>
            Number of handles
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.LastUsedColor">
            <summary>
            Last used m_color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject.LastUsedPenWidth">
            <summary>
            Last used pen width
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.Draw(System.Drawing.Graphics)">
            <summary>
            Draw m_rcRectangle
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.GetHandle(System.Int32)">
            <summary>
            Get handle point by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.HitTest(System.Drawing.Point)">
            <summary>
            Hit test.
            Return value: -1 - no hit
                           0 - hit anywhere
                           > 1 - handle number
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.GetHandleCursor(System.Int32)">
            <summary>
            Get cursor for the handle
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.MoveHandleTo(System.Drawing.Point,System.Int32)">
            <summary>
            Move handle to new point (resizing)
            </summary>
            <param name="point"></param>
            <param name="handleNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.MakeSureMeetMinimumsize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Make sure m_rcRectangle size great than minimum size
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="dx">return delta x</param>
            <param name="dy">return delta y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.Move(System.Int32,System.Int32)">
            <summary>
            Move object
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.Normalize">
            <summary>
            Normalize m_rcRectangle
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.SaveToStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            Save objevt to serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.LoadFromStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            LOad object from serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangle.HandleCount">
            <summary>
            Get number of handles
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawRectangleAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draw m_rcRectangle
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ImgRaw">
            <summary>
            Raw Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Images.Image">
            <summary>
            An Image is the representation of a graphic element (JPEG, PNG or GIF)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.DEFAULT">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.AX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_NONE">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_JPEG">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_PNG">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_GIF">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_BMP">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_TIFF">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_WMF">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_JPEG2000">
            type of image 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ORIGINAL_JBIG2">
            type of image
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.invert">
            Image color inversion 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.type">
            <summary> The imagetype. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.url">
            <summary> The URL of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.rawData">
            <summary> The raw data of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.rotationRadians">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.indentationLeft">
            the indentation to the left. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.indentationRight">
            the indentation to the right. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.deflated">
            Holds value of property deflated. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.smask">
            Holds value of property smask. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.xyRatio">
            Holds value of property XYRatio. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.originalType">
            Holds value of property originalType. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.originalData">
            Holds value of property originalData. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.spacingBefore">
            The spacing before the image. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.spacingAfter">
            The spacing after the image. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.widthPercentage">
            Holds value of property widthPercentage.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.initialRotation">
            Holds value of property initialRotation.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.#ctor(System.Uri)">
            <summary>
            Constructs an Image-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            <summary>
            Constructs an Image object duplicate.
            </summary>
            <param name="image">another Image object.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="image">an Image</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Byte[])">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="img">a byte array</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a .NET image to a Native(PNG, JPG, GIF, WMF) image
            </summary>
            <param name="image"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Color,System.Boolean)">
            <summary>
            Gets an instance of an Image from a System.Drwaing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <param name="forceBW">if true the image is treated as black and white</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <param name="transparency">
            transparency information in the Mask format of the
            image dictionary
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Gets an instance of an Image from a System.Drawing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
            Sets the absolute position of the Image.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaleAbsolute(System.Single,System.Single)">
            <summary>
            Scale the image to an absolute width and an absolute height.
            </summary>
            <param name="newWidth">the new width</param>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaleAbsoluteWidth(System.Single)">
            <summary>
            Scale the image to an absolute width.
            </summary>
            <param name="newWidth">the new width</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaleAbsoluteHeight(System.Single)">
            <summary>
            Scale the image to an absolute height.
            </summary>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScalePercent(System.Single)">
            <summary>
            Scale the image to a certain percentage.
            </summary>
            <param name="percent">the scaling percentage</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScalePercent(System.Single,System.Single)">
            <summary>
            Scale the width and height of an image to a certain percentage.
            </summary>
            <param name="percentX">the scaling percentage of the width</param>
            <param name="percentY">the scaling percentage of the height</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaleToFit(System.Single,System.Single)">
            <summary>
            Scales the image so that it fits a certain width and height.
            </summary>
            <param name="fitWidth">the width to fit</param>
            <param name="fitHeight">the height to fit</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetImageRotation">
            Gets the current image rotation in radians.
            @return the current image rotation in radians
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.HasAbsolutePosition">
            <summary>
            Checks if the Images has to be added at an absolute position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.HasAbsoluteX">
            <summary>
            Checks if the Images has to be added at an absolute X position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsJpeg">
            <summary>
            Returns true if the image is a Jpeg-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsImgRaw">
            <summary>
            Returns true if the image is a ImgRaw-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsImgTemplate">
            <summary>
            Returns true if the image is an ImgTemplate-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.GetSerialId">
            <summary>
            generates new serial id
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.SetDpi(System.Int32,System.Int32)">
            Sets the dots per inch value
            
            @param dpiX
                       dpi for x coordinates
            @param dpiY
                       dpi for y coordinates
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsMaskCandidate">
            <summary>
            Returns true if this Image has the
            requisites to be a mask.
            </summary>
            <returns>true if this Image can be a mask</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.MakeMask">
            <summary>
            Make this Image a mask.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.IsMask">
            <summary>
            Returns true if this Image is a mask.
            </summary>
            <returns>true if this Image is a mask</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.SimplifyColorspace">
            Replaces CalRGB and CalGray colorspaces with DeviceRGB and DeviceGray.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.HasICCProfile">
            Checks is the image has an ICC profile.
            @return the ICC profile or null
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Rotation">
            <summary>
            Sets the rotation of the image in radians.
            </summary>
            <param name="r">rotation in radians</param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.RotationDegrees">
            <summary>
            Sets the rotation of the image in degrees.
            </summary>
            <param name="deg">rotation in degrees</param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Bpc">
            <summary>
            Gets the bpc for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>a bpc value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.RawData">
            <summary>
            Gets the raw data for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>the raw data</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.AbsoluteX">
            <summary>
            Returns the absolute X position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.AbsoluteY">
            <summary>
            Returns the absolute Y position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Type">
            <summary>
            Returns the type.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Url">
            <summary>
            Gets the string-representation of the reference to the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Alignment">
            <summary>
            Get/set the alignment for the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Alt">
            <summary>
            Get/set the alternative text for the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaledWidth">
            <summary>
            Gets the scaled width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ScaledHeight">
            <summary>
            Gets the scaled height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Colorspace">
            <summary>
            Gets the colorspace for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type Jpeg.
            </remarks>
            <value>a colorspace value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Matrix">
            <summary>
            Returns the transformation matrix of the image.
            </summary>
            <value>an array [AX, AY, BX, BY, CX, CY, DX, DY]</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Transparency">
            <summary>
            Returns the transparency.
            </summary>
            <value>the transparency</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.PlainWidth">
            <summary>
            Gets the plain width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.PlainHeight">
            <summary>
            Gets the plain height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.MySerialId">
            <summary>
            returns serial id for this object
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.DpiX">
            <summary>
            Gets the dots-per-inch in the X direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the X direction</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.DpiY">
            <summary>
            Gets the dots-per-inch in the Y direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the Y direction</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.ImageMask">
            <summary>
            Get/set the explicit masking.
            </summary>
            <value>the explicit masking</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Inverted">
            <summary>
            Inverts the meaning of the bits of a mask.
            </summary>
            <value>true to invert the meaning of the bits of a mask</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.Interpolation">
            <summary>
            Sets the image interpolation. Image interpolation attempts to
            produce a smooth transition between adjacent sample values.
            </summary>
            <value>New value of property interpolation.</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.InitialRotation">
            Some image formats, like TIFF may present the images rotated that have
            to be compensated.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.CompressionLevel">
            Sets the compression level to be used if the image is written as a compressed stream.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Images.Image.TagICC">
            Tags this image with an ICC profile.
            @param profile the profile
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ImgRaw.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in raw mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component. Must be 1,2,4 or 8</param>
            <param name="data">data the image data</param>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D">
            <summary>
            The <code>Dimension2D</code> class is to encapsulate a width 
            and a height dimension.
            </summary>
            <remarks>
            This class is only the abstract baseclass for all objects that
            store a 2D dimension.
            The actual storage representation of the sizes is left to
            the subclass.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            Type-specific implementation subclasses are available for
            instantiation and provide a number of formats for storing
            the information necessary to satisfy the various accessor
            methods below.
            </summary>
            <seealso cref="T:System.Drawing.Dimension"/>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.SetSize(System.Double,System.Double)">
            <summary>
            Sets the size of this <code>Dimension</code> object to the 
            specified width and height.
            </summary>
            <param name="width">the new width for the <code>Dimension</code>
            object</param>
            <param name="height">the new height for the <code>Dimension</code> 
            object</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.Clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance</returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.Width">
            <summary>
            Returns the width of this <code>Dimension</code> in double 
            precision.
            </summary>
               <value>the width</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.Height">
            <summary>
            Returns the height of this <code>Dimension</code> in double 
            precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension2D.Size">
            <summary>
            Sets the size of this <code>Dimension2D</code> object to 
            match the specified size.
            </summary>
            <value>the size</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.number">
            the object number 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.generation">
            the generation number 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.#ctor(System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.Number">
             Returns the number of the object.
            
             @return        a number.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference.Generation">
             Returns the generation of the object.
            
             @return        a number.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.InvalidPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.InvalidPdfException.#ctor(System.String)">
            Creates an instance of a NoPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.BmpImage" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BmpImage.GetImage(System.Uri)">
            Reads a BMP from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BmpImage.GetImage(System.IO.Stream)">
            Reads a BMP from a stream. The stream is not closed.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BmpImage.GetImage(System.IO.Stream,System.Boolean,System.Int32)">
            Reads a BMP from a stream. The stream is not closed.
            The BMP may not have a header and be considered as a plain DIB.
            @param is the stream
            @param noHeader true to process a plain DIB
            @param size the size of the DIB. Not used for a BMP
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BmpImage.GetImage(System.String)">
            Reads a BMP from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BmpImage.GetImage(System.Byte[])">
            Reads a BMP from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject">
            <summary>
            Base class for all tools which create new graphic object
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawTool">
            <summary>
            Base class for all drawing tools
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTool.OnMouseDown(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Left nous button is pressed
            </summary>
            <param name="drawArea"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTool.OnMouseMove(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse is moved, left mouse button is pressed or none button is pressed
            </summary>
            <param name="drawArea"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTool.OnMouseUp(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Left mouse button is released
            </summary>
            <param name="drawArea"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject.SetObject(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,Dynamsoft.DotNet.TWAIN.GDI.DrawGDIObject)">
            <summary>
            Add new object to draw area.
            Function is called when user left-clicks draw area,
            and one of ToolObject-derived tools is active.
            </summary>
            <param name="drawArea"></param>
            <param name="o"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject.OnMouseUp(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Left mouse is released.
            New object is created and resized.
            </summary>
            <param name="drawArea"></param>
            <param name="e"></param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject.Cursor">
            <summary>
            Tool m_cursor.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject.PenColor">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawToolObject.PenWidth">
            <summary>
            Pen width
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawEllipseAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draw m_rcRectangle
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.IFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.IFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Source image to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The filter accepts bitmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.BaseInPlacePartialFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks>
             
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.BaseInPlacePartialFilter.Apply(System.Drawing.Imaging.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.BaseInPlacePartialFilter.ProcessFilter(Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage,System.Drawing.Rectangle)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.BaseInPlacePartialFilter.FormatTransalations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="!:IFilterInformation.FormatTransalations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.Invert.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.Filters.Invert"/> class.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.Invert.ProcessFilter(Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage,System.Drawing.Rectangle)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.Invert.FormatTransalations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain">
            <summary>
            Implements the ITwain, ITwainEvent interface using an UserControl.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.ITwain">
            <summary>
            DynamicDotNetTWAIN interface definition.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.IObjectSafety">
            <summary>
            Import the IObjectSaftety COM Interface. 
            See http://msdn.microsoft.com/en-us/library/aa768224(VS.85).aspx
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AcquireImage">
            <summary>
            Displays the source's built-in interface to acquire image.
            </summary>
            <returns>
             
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            This method does the same thing as EnableSource(). 
            The purpose of providing this method is to enable user to handle Twain-compliant image acquisition device without knowing the terms used in Twain specification.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CancelAllPendingTransfers">
            <summary>
            Cancels all pending transfers.
            </summary>
            <returns>
            
            True indicates success. False indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The CancelAllPendingTransfers method is valid only in OnPreAllTransfers, 
            OnPreTransfer and OnPostTransfer events.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGet">
            <summary>
            Gets information of the capability specified by the Capability property.
            </summary>
            <returns>
            
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Before invoking CapGet(), Capability property should be set.
            
            CapType property needs not to be set, since when CapGet() is called, 
            The container type is returned by the source, 
            rather than specified by the application.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetCurrent">
            <summary>
            Returns the Source's current value for the specified capability.
            </summary>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Before invoking CapGetCurrent(), Capability property should be set.
            After calling CapGetCurrent(), 
            check CapType property for the capability container type and then read information from different properties according to the container type. 
            This process is the same as CapGet(), please refer to CapType property and Reading Value(s) from Capability Negotiation.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetDefault">
            <summary>
            Returns the Source's default value for the specified capability. This is the Source's preferred default value.
            </summary>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Before invoking CapGetDefault(), Capability property should be set.
            The Source's Default Value cannot be changed.
            Using the Source's preferred default as the Current Value may increase performance in some Sources.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameBottom(System.Int32)">
            <summary>
            Returns the value (in ICAP_UNITS) of the bottom-most edge of the specified frame.
            </summary>
            <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
            <returns>
            The data type of the return value is Single (float).
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of CapGetFrameBottom() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameBottom() is different from ImageLayoutFrameBottom property. 
            CapGetFrameBottom() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameBottom property only returns the value of the current frame which is being transferred. 
            It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameLeft(System.Int32)">
            <summary>
            Returns the value (in ICAP_UNITS) of the left-most edge of the specified frame.
            </summary>
            <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
            <returns>
            The data type of the return value is Single (float).
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of CapGetFrameLeft() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameLeft() is different from ImageLayoutFrameLeft property. 
            CapGetFrameLeft() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameleft property only returns the value of the current frame which is being transferred. It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameRight(System.Int32)">
            <summary>
            Returns the value (in ICAP_UNITS) of the right-most edge of the specified frame.
            </summary>
            <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
            <returns>
            The data type of the return value is Single (float).
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of CapGetFrameRight() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameRight() is different from ImageLayoutFrameRight property. 
            CapGetFrameRight() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameRight property only returns the value of the current frame which is being transferred. It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks> 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameTop(System.Int32)">
            <summary>
            Returns the value (in ICAP_UNITS) of the top-most edge of the specified frame.
            </summary>
            <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
            <returns>
            The data type of the return value is Single (float).
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of CapGetFrameTop() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameTop() is different from ImageLayoutFrameTop property. 
            CapGetFrameTop() is part of ICAP_FRAMES capability negotiation. 
            It can return the value of any frames in a page.
            ImageLayoutFrameTop property only returns the value of the current frame which is being transferred.
            It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks> 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapIfSupported(Dynamsoft.DotNet.TWAIN.Enums.TWQC)">
            <summary>
            Queries whether the Source supports a particular operation on the capability.
            </summary>
            <param name="enumMessageType">
            TWQC type: specifies the type of capability operation.
            Value Description 
            TWQC_GET (1): If CapGet() is supported by the capability.  
            TWQC_SET (2): If CapSet() is supported by the capability.  
            TWQC_GETDEFAULT (4): If CapGetDefault() is supported by the capability.  
            TWQC_GETCURRENT (8): If CapGetCurrent() is supported by the capability. 
            TWQC_RESET (16): If CapReset() is supported by the capability. 
            
            </param>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The capability to query should be set in Capability property before calling CapIfSupported().
            </remarks> 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapReset">
            <summary>
            Changes the Current Value of the capability specified by Capability property back to its power-on value.
            </summary>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Before invoking CapReset, Capability property should be set.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapSet">
            <summary>
            Sets the current capability using the container type specified by CapType property. 
            The current capability is specified by Capability property.
            </summary>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            For different capability container types, 
            The properties need to be set are different. 
            Before calling CapSet(), the corresponding properties should be set. 
            Refer to How to Negotiate Capability with Different Capability Container Types for details.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapSetFrame(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the values of the specified frame.
            </summary>
            <param name="iIndex">
            Specifies the values of which frame to set. The index is 0-based.
            </param>
            <param name="fLeft">
            The value (in ICAP_UNITS) of the left-most edge of the specified frame.
            </param>
            <param name="fTop">
            The value (in ICAP_UNITS) of the top-most edge of the specified frame.
            </param>
            <param name="fRight">
            The value (in ICAP_UNITS) of the right-most edge of the specified frame.
            </param>
            <param name="fBottom">
            The value (in ICAP_UNITS) of the bottom-most edge of the specified frame.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CloseSource">
            <summary>
            Closes Data Source.
            </summary>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            CloseSource() will be called automatically when exiting the application, since Dynamic .NET TWAIN has built-in Wizard Mode.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CloseSourceManager">
            <summary>
            Closes and unloads Data Source Manager.
            </summary>
            <returns>
             
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            CloseSourceManager() is called automatically when exiting the application, if it is not called explicitly by the application.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DisableSource">
            <summary>
            Disables the source. If the source's user interface is displayed when the source is enabled, it will be closed.
            </summary>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            After DisableSource(), the Source is returned to State 4(Source is opened but not enabled), 
            where capability negotiation can be done again.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableSource">
            <summary>
            Enables the source to accept image.
            </summary>
            <returns> 
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FeedPage">
            <summary>
            Sets the Source to eject the current page and advance the next page in the document feeder into the feeder acquire area when IfFeederEnabled is true. 
            </summary>
            <returns>
             
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Using this property after opening the Data Source (see OpenSource() method) and checking if the value of IfFeederEnabled property is true.
            </remarks> 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OpenSource">
            <summary>
            Loads the specified Source into main memory and starts its initialization, placing Dynamic .NET TWAIN into Capability Negotiation state. 
            If no source is specified (no SelectSource() or SelectSourceByIndex() is called), opens the default source.
            </summary>
            <returns>True indicates success. False indicates failure. </returns> 
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            OpenSource() should be called prior to negotiating capability.
            If no source selection function is called before OpenSource(), OpenSource() opens the default source.
            The capability is available after OpenSource is called.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OpenSourceManager">
             <summary>
             Loads and opens Data Source Manager.
             </summary> 
             <returns>
             True indicates success. False indicates failure. 
             </returns>
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
            <remarks>
            If application identification information needs to be set, it should be set before OpenSourceManager().
            Dynamic .NET TWAIN has built-in Wizard Mode. With Wizard Mode, OpenSourceManager() can be called intelligently by other functions, such as EnableSource() or SelectSource(), if necessary. 
            OpenSourceManager() populates SourceNameItems property with a list of installed sources. SourceNameItems property along with other properties and methods can be used to customize source selection interface.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ResetImageLayout">
            <summary>
            Reverts the current image layout to the Data Source's default. 
            </summary> 
            <returns>True indicates success. False indicates failure. </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RewindPage">
            <summary>
            Sets the Source to return the current page to the input side of the document feeder and feed the last page from the outside of the feeder back into the acquisition area if IfFeederEnabled is true. 
            </summary>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectSource">
            <summary>
            Brings up the TWAIN Data Source Manager's Source Selection User Interface (UI) so that user can choose which Data Source to be the current Source.
            </summary>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectSourceByIndex(System.Int32)">
            <summary>
            Selects the index-the source in SourceNameItems property as the current source.
            </summary>
            <param name="iIndex">int iIndex. It is the index of SourceNameItems property.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>The index is 0-based.</remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetFileXFERInfo(System.String,Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat)">
            <summary>
            Sets file name and file format information used in File Transfer Mode
            </summary>
            <param name="strFileName">The name of the file to be used in transfer.
            </param>
            <param name="enumFileFormat">TWICapFileFormat type: a enumerated values indicates the format of the image. The followings are the allowed formats: TWFF_TIFF(0), TWFF_PICT(1), TWFF_BMP(2), TWFF_XBM(3), TWFF_JFIF(4), TWFF_FPX(5), TWFF_TIFFMULTI(6), TWFF_PNG(7), TWFF_SPIFF(8), TWFF_EXIF( 9)</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The SetFileXFERInfo() is valid only in File Transfer Mode.
            Before using any file format, negotiate ICAP_IMAGEFILEFORMAT capability to make sure if the Source can handle the desired image format.
            In File Transfer Mode, the image is transferred to the designated file directly and there is no image in Dynamic .NET TWAIN.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetImageLayout(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the left, top, right, and bottom sides of the image layout rectangle for the current Data Source.
            </summary>
            <param name="fLeft">Float fLeft: specifies the floating point number for the left side of the image layout rectangle.</param>
            <param name="fTop">Float fTop: specifies the floating point number for the top side of the image layout rectangle.</param>
            <param name="fRight">Float fRight: specifies the floating point number for the right side of the image layout rectangle.</param>
            <param name="fBottom">Float fBottom: specifies the floating point number for the bottom side of the image layout rectangle.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>The image layout rectangle defines what portion of the Data Source's scanning area is acquired.</remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadCustomDSData(System.String)">
            <summary>
            Loads the configurations of the source's users interface saved by SaveCustomDSData or SaveCustomDSDataEx.
            </summary>
            
            <returns> 
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadCustomDSDataEx(System.Byte[])">
            <summary>
            Loads the configurations of the source's users interface saved by SaveCustomDSData or SaveCustomDSDataEx.
            </summary>
            
            <returns> 
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveCustomDSData(System.String)">
            <summary>
            Saves the settings of the source's user interface.
            </summary>
            
            <returns> 
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            After saving the settings of the UI, you can use LoadCustomDSData or LoadCustomDSDataEx to restore the configurations.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveCustomDSDataEx(System.Byte[]@)">
            <summary>
            Saves the settings of the source's user interface.
            </summary>
            
            <returns> 
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            After saving the settings of the UI, you can use LoadCustomDSData or LoadCustomDSDataEx to restore the configurations.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetDefaultImageLayout(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Retrieves the left, top, right, and bottom sides of the current Data Source's default image layout rectangle.
            </summary>
            
            <param name="fLeft">The floating point number for the left side of the default image layout rectangle. </param>
            <param name="fTop">The floating point number for the top side of the default image layout rectangle.  </param>
            <param name="fRight">The floating point number for the right side of the default image layout rectangle.  </param>
            <param name="fBottom">The floating point number for the bottom side of the default  image layout rectangle. </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The image layout rectangle defines what portion of the Data Source's scanning area is acquired.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageLayout(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Retrieves the left, top, right, and bottom sides of the image layout rectangle for the current Data Source.
            </summary>
            <param name="fLeft">The floating point number for the left side of the image layout rectangle.</param>
            <param name="fTop">The floating point number for the top side of the image layout rectangle.</param>
            <param name="fRight">The floating point number for the right side of the image layout rectangle.</param>
            <param name="fBottom">The floating point number for the bottom side of the image layout rectangle.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The image layout rectangle defines what portion of the Data Source's scanning area is acquired.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SourceNameItems(System.Int16)">
            <summary>
            Holds an array of source names.
            </summary>
            <param name="sIndex">The index is 0-based and can not be greater than SourceCount property.</param>
            <returns>
            Source name.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            This property has a parameter.
            </remarks>           
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetCapItems(System.Int32)">
            <summary>
            Returns an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. 
            This is a runtime property.
            </summary>
            <param name="iIndex">The index is 0-based.</param>
            <returns>
            Capability property value.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method.
            This property has a parameter. The data type of the parameter is int and it is 0-based.
            The GetCapItems is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use GetCapItemsString. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like CapValue property and CapValueString property, where CapValueString property is used to present String type and CapValue is used to present other types. CapValue property and CapValueString property are used when the container type is TWON_ONEVALUE.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetCapItems(System.Int32,System.Double)">
            <summary>
            Sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. 
            This is a runtime property.
            </summary>
            <param name="iIndex">The index is 0-based.</param>
            <param name="dbValue">Capability property value.</param>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            After setting this property, call CapSet() method to actually set the value.
            The SetCapItems property is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use SetCapItemsString. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like CapValue property and CapValueString property, where CapValueString property is used to present String type and CapValue is used to present other types. CapValue property and CapValueString property are used when the container type is TWON_ONEVALUE.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetCapItemsString(System.Int32)">
            <summary>
            Returns or sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION.
            This is a runtime property.
            </summary>
            <param name="iIndex">The index is 0-based.</param>
            <returns>
            Capability property value.
            </returns>            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. 
            This property has a parameter. The data type of the parameter is int and it is 0-based.
            GetCapItemsString is used to return String type values. For other data types, use GetCapItems.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetCapItemsString(System.Int32,System.String)">
            <summary>
            Sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION.
            This is a runtime property.
            </summary>
            <param name="iIndex">The index is 0-based.</param>
            <param name="strValue">Capability property value.</param>
            <returns>
            True indicates success. False indicates failure.
            </returns>            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            After setting this property, call CapSet() method to actually set the value.
            SetCapItemsString property is used to set String type values. For other data types, use SetCapItems property.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ChangeImageSize(System.Int16,System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod)">
            <summary>
            Changes the display size of the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <param name="iNewWidth">
            Specifies the pixel width of the new image.
            </param>
            <param name="iNewHeight">
            Specifies the pixel height of the new image.
            </param>
            <param name="enumInterpolationMethod">
            Specifies the method to do interpolation.
            DWTInterpolationMethod Allowed Values
            Interpolation    Method
                 1           NearestNeighbor 
                 2           Bilinear 
                 3           Bicubic 
            
            </param>
            <returns>
             
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            
            <remarks>
            ChangeImageSize() changes the display size of an image and replaces the original image with new one.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ClearAllHTTPFormField">
            <summary>
            Clears all the web forms which are used for image uploading.
            </summary>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CopyToClipboard(System.Int16)">
            <summary>
            Copies the image of a specified index in buffer to clipboard in DIB format.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            CopyToClipboard() makes a copy of the image to the clipboard. 
            If the application does not need the image in Dynamic .NET TWAIN any more, use CutToClipboard(), 
            which can save memory, especially when the image is large.
            The copied image is in DIB format.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Crop(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
            <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Crop() crops an image and replaces the original image with the cropped copy.
            If the application still needs the original image, use CropToClipboard().
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CropToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the image of a specified index in buffer to clipboard in DIB format.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
            <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            CropToClipboard() crops an image and makes a copy of the cropped image to the clipboard. If the application does not need the original image in Dynamic .NET TWAIN any more, use Crop().
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CutToClipboard(System.Int16)">
            <summary>
            Cuts the image of a specified index in buffer to clipboard in DIB format.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            CutToClipboard() cuts the image to the clipboard.
            If the application still needs the image in Dynamic .NET TWAIN, 
            use CopyToClipboard().
            The image is in DIB format.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Flip(System.Int16)">
            <summary>
            Flips the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Flip() flips an image and replaces the original image with the flipped copy.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPDownload(System.String,System.String)">
            <summary>
            Downloads an image from the FTP server.
            </summary>
            <param name="strFTPServer">
            The name of the FTP server.
            </param>
            <param name="strFTPRemoteFile">
            The name of the file to be downloaded.
            It should be the relative path of the file on the FTP server.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FTPRemoteFile.
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            FTPRemoteFile parameter should include the FTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPDownloadEx(System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Downloads an image from the FTP server.
            </summary>
            <param name="FTPServer">
             the name of the FTP server.
            </param>
            <param name="strFTPRemoteFile">
            The name of the file to be downloaded. It should be the relative path of the file on the FTP server.
            </param>
            <param name="enumImageType">
            The image format of the file to be downloaded.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values ImageType 
                 0    BMP 
                 1    JPEG 
                 2    TIFF 
                 3    PNG 
                 4    PDF 
            FTPRemoteFile parameter should include the FTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, 
            just as it is acquired from a TWAIN Data Source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUpload(System.String,System.Int16,System.String)">
            <summary>
            Uploads the image of a specified index in buffer to the FTP server.
            </summary>
            <param name="strFTPServer">
            The name of the FTP server.
            </param>
            <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
            <param name="strFTPRemoteFile">
            The name of the file to be created on the FTP server. 
            It should be a relative path on the FTP server.
            </param>
            <returns>
             
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FTPRemoteFile. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            FTPRemoteFile parameter should include the FTP directory of the file.
            Write permission of the specified directory is needed for uploading.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadEx(System.String,System.Int16,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
             <summary>
             Uploads the image of a specified index in buffer to the FTP server as a specified image format.
             </summary>
             <param name="strFTPServer">
             The name of the FTP server.
             </param>
             <param name="sImageIndex">
             Specifies the index of image in buffer. The index is 0-based.
             </param>
             <param name="strFTPRemoteFile">
             The name of the file to be created on the FTP server. It should be a relative path on the FTP server.
             </param>
             <param name="enumImageType">
             The image format of the file to be created on the FTP server.
             </param>
             <returns>
              
             True indicates success. False indicates failure.
             </returns>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
             DWTImageFileFormat Allowed Values ImageType 
             0 BMP 
             1 JPEG 
             2 TIFF 
             3 PNG 
             4 PDF 
             FTPRemoteFile parameter should include the FTP directory of the file.
             Write permission of the specified directory is needed for uploading.
             </remarks>
             
             
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAllAsMultiPageTIFF(System.String,System.String)">
            <summary>
            Uploads all images in buffer to the FTP server as a Multi-Page TIFF.
            </summary>
            <param name="strFTPServer">
            The name of the FTP server.
            </param>
            <param name="strFileName">
            The name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAllAsPDF(System.String,System.String)">
            <summary>
            Uploads all images in buffer to the FTP server as a Multi-Page PDF.
            </summary>
            <param name="strFTPServer">
            The name of the FTP server.
            </param>
            <param name="strFileName">
            The name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
            <returns>
             
            True indicates success. False indicates failure.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveAllImages">
            <summary>
            Removes all images in buffer.
            </summary> 
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            ThrowDynamsoftTwainException 
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveImage(System.Int16)">
            <summary>
            Removes the image of a specified index in buffer.
            </summary> 
            <param name="sImageIndexToBeDeleted">Specifies the index of image to be deleted in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If the CurrentImageIndexInBuffer is MaxImagesInBuffer -1, the image with index of CurrentImageIndexInBuffer will be removed,
            and the CurrentImageIndexInBuffer will be MaxImagesInBuffer -2; No image is highlighted in the control.
            If the CurrentImageIndexInBuffer is 0, the first image will be removed; and CurrentImageIndexInBuffer will still be 0.
            The indices of images will be changed accordingly. The image with index 0 will be selected.(This is also the case when the 
            index is set to another value except MaxImagesInBuffer -1)
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RotateLeft(System.Int16)">
            <summary>
            Rotates the image of a specified index in buffer by 90 degrees counter-clockwise.
            </summary>
            <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based. </param>
            <returns>True indicates success. False indicates failure. </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>RotateLeft() rotates an image and replaces the original image with the rotated copy.</remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RotateRight(System.Int16)">
            <summary>
            Rotates the image of a specified index in buffer by 90 degrees clockwise.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>RotateRight() rotates an image and replaces the original image with the rotated copy.</remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsBMP(System.String,System.Int16)">
            <summary>
            Saves the image of a specified index in buffer as a BMP file.
            </summary>
            <param name="strFileName">The name of the BMP file to be saved. It should be a local  path on the local disk.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsMultiPageTIFF(System.String)">
            <summary>
            Saves all images in buffer as a MultiPage TIFF file.
            </summary>
            <param name="strFileName">The name of the MultiPage TIFF file to be saved. It should be a local  path on the local disk.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Multi-Page TIFF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsPDF(System.String)">
            <summary>
            Saves all images in buffer as a Multi-Page PDF file.
            </summary>
            <param name="strFileName">The name of the Multi-Page PDF file to be saved. It should be a local  path on the local disk.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>Multi-Page PDF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required</remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsPDF(System.String,System.Int16)">
            <summary>
            Saves the image of a specified index in buffer as a PDF file.
            </summary>
            <param name="strFileName">The name of the PDF file to be saved. It should be a local  path on the local disk.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            PDF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            This method can not add a new acquired image into an existing PDF file. If you want to save all the acquired images in a Multi-Page PDF file, please use the SaveAllAsPDF method.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsPNG(System.String,System.Int16)">
            <summary>
            Saves the image of a specified index in buffer as a PNG file.
            </summary>
            <param name="strFileName">The name of the PNG file to be saved. It should be a local path on the local disk.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsJPEG(System.String,System.Int16)">
            <summary>
            Saves the image of a specified index in buffer as a JPEG file.
            </summary>
            <param name="strFileName">The name of the JPEG file to be saved. It should be a local  path on the local disk.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            JPEG compression is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            JPEG standard defines that only 256 gray-scaled image and 24 bit RGB image can be compressed as JPEG format.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsTIFF(System.String,System.Int16)">
            <summary>
            Saves the image of a specified index in buffer as a TIFF file.
            </summary>
            <param name="strFileName">The name of the TIFF file to be saved. It should be a local  path on the local disk.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>TIFF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            If IfTiffMultiPage is set to true, and there's a TIFF file with the same name exists on the local disk,
            the new scanned images will be added to the end of the existing TIFF file.
            If IfTiffMultiPage is set to false, the existing file with the same name will be replaced by the newly created one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetHTTPFormField(System.String,System.String)">
            <summary>
            Sets a text parameter of a web form. The text parameter is passed while uploading images.
            </summary>
            <param name="strFieldName">Sspecifies the name of a text field in web form.</param>
            <param name="strFieldValue">Specifies the value of a text field in web form.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetViewMode(System.Int16,System.Int16)">
            <summary>
            Sets the view mode that images are displayed in Dynamic .NET TWAIN. You can use this method to display multiple images in Dynamic .NET TWAIN.
            </summary>
            <param name="sHorizontalImageCount">Specifies how many columns can be displayed in Dynamic .NET TWAIN.</param>
            <param name="sVerticalImageCount">Specifies how many rows can be displayed in Dynamic .NET TWAIN.</param>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>The default is 1 by 1.
            When the view mode is set to -1 by -1, Dynamic .NET TWAIN only shows the current image. No scroll bar is provided to navigate to other images.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ShowImageEditor">
            <summary>
            Shows the GUI of Image Editor.
            </summary>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
             
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the IfFitWindow property is set to true, 
            The image will fit the size of window when the Image Editor prompts;
            otherwise the image will be displayed in its full size.
            If there's no images in buffer, the ShowImageEditor control cannot be loaded.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SwitchImage(System.Int16,System.Int16)">
            <summary>
            Switchs two images of specified indices in buffer.
            </summary>
            <param name="sImageIndex1">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="sImageIndex2">Specifies the index of image in buffer. The index is 0-based. </param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageSize(System.Int16,System.Int32,System.Int32)">
            <summary>
            Returns the file size of the new image resized from the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">specifies the index of image in buffer. The index is 0-based.  </param>
            <param name="iWidth">specifies the pixel width of the new image. </param>
            <param name="iHeight">specifies the pixel height of the new image. </param>
            <returns>
            -1 indicates failure. Other values indicate success. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageSizeWithSpecifiedType(System.Int16,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Pre-calculates the file size of the local image file that is saved from an image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <param name="enumImageType">Specifies the type of an image file.
            DWTImageFileFormat Allowed Values  Image Type
            0               BMP, DIB 
            1               JPG, JPEG, JPE, JFIF 
            2               TIF, TIFF 
            3               PNG 
            4               PDF 
            </param>
            <returns>
            -1 indicates failure. Other values indicate success.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetViewMode(System.Int16@,System.Int16@)">
            <summary>
            Gets the view mode that images are displayed in Dynamic .NET TWAIN.
            </summary>
            <param name="sHorizontalImageCount">the short number for the columns can be displayed in Dynamic .NET TWAIN.  </param>
            <param name="sVerticalImageCount">the short number for the rows can be displayed in Dynamic .NET TWAIN.</param>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the view mode is set to -1*-1, the returned value of sHorizontalImageCount is -1, and so is sVerticalImageCount.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPDownload(System.String,System.String)">
            <summary>
            Downloads an image from the HTTP server.
            </summary>
            <param name="strHTTPServer">the name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="strHTTPRemoteFile">the name of the image to be downloaded. It should be the relative path of the file on the HTTP server.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the HTTPRemoteFile.
            Dynamic .NET TWAIN supports the following types of image files: 
                Bitmap *.bmp, *.dib 
                JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
                TIFF *.TIF, *.TIFF 
                PNG *.PNG 
                PDF *.PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPDownloadEx(System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Downloads an image from the HTTP server.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="strHTTPRemoteFile">The name of the image to be downloaded. It should be the relative path of the file on the HTTP server.</param>
            <param name="enumImageType">The image format of the file to be downloaded.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPost(System.String,System.Int16,System.String,System.String)">
            <summary>
            Uploads the image of a specified index in buffer to the HTTP server through HTTP POST method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. For example: "upload.asp", not "http://www.webserver.com/upload.asp". </param>
            <param name="strFileName">The name of the image to be uploaded. </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
             
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FileName. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "HTML". 
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostEx(System.String,System.Int16,System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Uploads the image of a specified index in buffer to the HTTP server as a specified image format through HTTP POST method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. For example: "upload.asp", not "http://www.webserver.com/upload.asp". </param>
            <param name="strFileName">The name of the image to be uploaded.</param>
            <param name="enumImageType">The image format of the file to be created on the HTTP server.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "html". 
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPut(System.String,System.Int16,System.String)">
            <summary>
            Uploads the image of a specified index in buffer to the HTTP server through HTTP PUT method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="strHTTPRemoteFile">The name of the image to be created on the HTTP server. It should a relative path on the web server.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
             
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the HTTPRemoteFile. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            StrHTTPRemoteFile parameter should include the HTTP directory of the file.
            Write permission of the specified directory is needed for uploading.   
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutEx(System.String,System.Int16,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Uploads the image of a specified index in buffer to the HTTP server as a specified image format through HTTP PUT method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="strHTTPRemoteFile">The name of the file to be created on the HTTP server. It should a relative path on the web server.</param>
            <param name="enumImageType">The image format of the file to be created on the HTTP server.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            Write permission of the specified directory is needed for uploading.   
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPostAsMultiPageTIFF(System.String,System.String,System.String)">
            <summary>
            Uploads all images in buffer to the HTTP server through HTTP Post method as Multi-Page TIFF.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
            <param name="strFileName">The name of the image to be uploaded. </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the HTML". 
            If the value of IfTiffMultiPage is true,and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPostAsPDF(System.String,System.String,System.String)">
            <summary>
            Uploads all images in buffer to the HTTP server through HTTP Post method as Multi-Page PDF.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
            <param name="strFileName">The name of the image to be uploaded. </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "HTML". 
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPutAsMultiPageTIFF(System.String,System.String)">
            <summary>
            Uploads all images in buffer to the HTTP server through HTTP Put method as Multi-Page TIFF.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
            <param name="strFileName">The name of the image to be uploaded. </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the value of IfTiffMultiPage is true,and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPutAsPDF(System.String,System.String)">
             <summary>
             Uploads all images in buffer to the HTTP server through HTTP Put method as Multi-Page PDF.
             </summary>
             <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
             <param name="strFileName">The name of the image to be uploaded. </param>
             <returns>
             True indicates success. False indicates failure. 
             </returns>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
              
            
             </remarks>
             
             
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IsBlankImage(System.Int16)">
            <summary>
            Detects whether an image is blank.
            </summary>
            <param name="sImageIndex">specifies the index of image in buffer. The index is 0-based.  </param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            IsBlankImage() detects whether an image is blank.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadDibFromClipboard">
            <summary>
            Loads a DIB format image from Clipboard into Dynamic .NET TWAIN.
            </summary>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The loaded image will be displayed in Dynamic .NET TWAIN.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImage(System.String)">
            <summary>
            Loads an image into the Dynamic .NET TWAIN.
            </summary>
            <param name="strFileName">The name of the image to be loaded.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
             
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FileName. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            The loaded image will be displayed in Dynamic .NET TWAIN.     
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImageEx(System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Loads an image into Dynamic .NET TWAIN.
            </summary>
            <param name="strFileName">The name of the image to be loaded. It should be the absolute path of the image file on the local disk.</param>
            <param name="enumImageType">The image format of the file to be loaded.</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of ImageType.<br/>
            Allowed Values  ImageType <br/>
            WEBTW_BMP       BMP <br/>
            WEBTW_JPG       JPEG <br/>
            WEBTW_TIF       TIFF <br/>
            WEBTW_PNG       PNG <br/>
            WEBTW_PDF       PDF <br/>
            The loaded image will be displayed in Dynamic .NET TWAIN.
            </remarks>
            
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Mirror(System.Int16)">
             <summary>
             Mirrors the image of a specified index in buffer.
             </summary>
             <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
             <returns>
             True indicates success. False indicates failure. 
             </returns>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            Mirror() mirrors an image and replaces the original image with the mirrored copy.
             </remarks>
             
             
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Picture(System.Int16)">
            <summary>
            Returns the Picture object of the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.  </param>
            <returns>
            Not NULL indicates success. NULL indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The Picture property implements the IPictureDisp interface.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImageFromBytes(System.Byte[],Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Loads image from a byte array with the specified file format.
            </summary>
            <param name="byBuffer">A byte array of the image data.</param>
            <param name="enumImageFileFormat">DWTImageFileFormat type, specifies the file format</param>
            <returns>
            True indicates success. False indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveImageToBytes(System.Int16,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            Saves the image of a specified index in buffer to a byte array in the specified file format.
            </summary>
            <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.</param>
            <param name="enumImageFileFormat">DWTImageFileFormat type, specifies the file format</param>
            <returns>
            A byte array where the image will be saved.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImage(System.Int16)">
            <summary>
            Get the image of a specified index in buffer.
            </summary>
            <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.</param>
            <returns>
            Return an Image.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPageTIFFToBytes(Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Saves the images of the specified indices in buffer to a MultiPage TIFF byte array.
            </summary>
            <param name="aryIndex">Specifies a list of index of image in buffer. The index is 0-based.</param>
            <returns>
            A byte array where the image will be saved.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsMultiPageTIFFToBytes">
            <summary>
            Saves all images in buffer to a MultiPage TIFF byte array.
            </summary>
            <returns>
            A byte array where the image will be saved.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPagePDFToBytes(Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Saves the images of the specified indices in buffer to a MultiPage PDF byte array.
            </summary>
            <param name="aryIndex">Specifies a list of index of image in buffer. The index is 0-based.</param>
            <returns>
            A byte array where the image will be saved.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsPDFToBytes">
            <summary>
            Saves all images in buffer to a MultiPage PDF byte array.
            </summary>
            <returns>
            A byte array where the image will be saved.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPageTIFF(System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Saves several images in buffer as a multi-page TIFF file.
            </summary>
            <param name="strFileName">
            String strFileName:the name of the MultiPage TIFF file to be saved. It should be an absolute path.
            </param>
            <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
            <returns>True indicates success. False indicates failure. </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the local disk, the new images will be added into the existing TIFF file.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPagePDF(System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Saves several images in buffer as a multi-page PDF file.
            </summary>
            <param name="strFileName">
            String strFileName:the name of the Multi-Page PDF file to be saved. It should be a local path on the local disk.
            </param>
            <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
            <returns>True indicates success. False indicates failure. </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the local disk, the old PDF file will be replaced by the newly saved one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAsMultiPageTIFF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Uploads several images in buffer as a multi-page TIFF file to the FTP server.
            </summary>
            <param name="strFTPServer">
            String strFTPServer:the name of the FTP server.
            </param>
            <param name="strFileName">
            String strFileName:the name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
            <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
            <returns>True indicates success. False indicates failure. </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the FTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAsMultiPagePDF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Uploads several images in buffer as a multi-page PDF file to the FTP server.
            </summary>
            <param name="strFTPServer">
            String strFTPServer:the name of the FTP server.
            </param>
            <param name="strFileName">
            String strFileName:the name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
            <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the FTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostAsMultiPageTIFF(System.String,System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Uploads several images in buffer as a multi-page TIFF file to the HTTP server via HTTP post method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.</param>
            <param name="strActionPage">
            The specified page for posting image files. This is the relative path of the page, not the absolute path.</param>
            <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
            <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the HTTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostAsMultiPagePDF(System.String,System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Uploads several images in buffer as a multi-page PDF file to the HTTP server via HTTP post method.
            </summary>
            <param name="strHTTPServer">string strHTTPServer:the name of the HTTP server.</param>
            <param name="strActionPage">
            The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
            <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
            <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the HTTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutAsMultiPageTIFF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Uploads several images in buffer as a multi-page TIFF file to the HTTP server via HTTP put method.
            </summary>
            <param name="strHTTPServer">The name of the HTTP server.</param>
            <param name="strFileName">The name of the image to be uploaded. </param>
            <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the HTTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutAsMultiPagePDF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Upload several images in buffer as a multi-page PDF file to the HTTP server via HTTP put method.
            </summary>
            <param name="strHTTPServer">string strHTTPServer:the name of the HTTP server.</param>
            <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
            <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the HTTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CopyFrameToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Copies the image data in the specified area to the system clipboard in DIB format.
             </summary>
             <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
             <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
             <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
             <returns>
             True indicates success. False indicates failure. 
             </returns>
            
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             
             
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CutFrameToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Cuts the image data in the specified area to the system clipboard in DIB format.
             </summary>
             <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
             <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
             <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
             <returns>
             True indicates success. False indicates failure.
             </returns>
            
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             The fill color can be assigned by calling BackgroundFillColor.This method cuts the image data of selected
             area into the clipboard. The valid area is the intersection of specified area(defined by the input parameters) 
             and the whole image.If the intersection is invalid, an error will be thrown out.
             </remarks>
             
             
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Erase(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Clears the specified area of a specified image, and fill the area with the fill color.
             </summary>
             <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
             <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
             <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
             <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
             <returns>
             True indicates success. False indicates failure.
             </returns>
            
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             The fill color can be defined by BackgroundFillColor. The valid area is the intersection of 
             specified area(defined by the input parameters) and the whole image.If the intersection is 
             invalid, an error will be throwed out.
             </remarks>
             
             
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MoveImage(System.Int16,System.Int16)">
            <summary>
            Moves a specified image.
            </summary>
            <param name="sSourceImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <param name="sTargetImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveImages(Dynamsoft.DotNet.TWAIN.IndexList)">
            <summary>
            Deletes the images of specified indices in the array.
            </summary> 
            <param name="aryIndex">Specifies the indices of image in buffer. The index is 0-based.
            ShortArray: an array with objects of short type. Its length is variable.
            </param>
            <returns>
            True indicates success. False indicates failure.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            After the selected image is deleted, the following images's indices will change accordingly.
            If the original CurrentImageIndexInBuffer &gt;= HowManyImagesInBuffer, CurrentImageIndexInBuffer = HowManyImagesInBuffer;
            Also the image will be selected.
            If the original CurrentImageIndexInBuffer is less than HowManyImagesInBuffer, CurrentImageIndexInBuffer will not change;
            also the image with index of CurrentImageIndexInBuffer will be selected.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetBarcodeText(System.Int32)">
            <summary>
            Gets barcode content by specified index.
            </summary>
            <param name="barcodeIndex">Specifies the index of barcode in image. The index is 0-based.</param>
            <returns>
            Barcode content.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            An empty string will be returned, if the Source doesn't support barcode detection or the image data doesn't contain barcode.
            GetBarcodeText method, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetBarcodeInfo(Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode,System.Int32)">
            <summary>
            Gets barcode type value by specified index and type. The index is 0-based.
            </summary>
            <param name="barcodeInfoType">Defined in TWAIN specification.</param>
            <param name="barcodeIndex">Specifies the index of barcode in image. The index is 0-based.</param>
            <returns>
            No limit
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            GetBarcodeInfo method, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Rotate(System.Int16,System.Double,System.Boolean,Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod)">
            <summary>
            Rotates the image of a specified index in buffer by specified angle.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
            <param name="dbAngle">Specifies the rotation angle.</param>
            <param name="bKeepSize">Keep size or not.</param>
            <param name="dwtInterpolationMethod">Interpolation method.</param>
            <returns>True indicates success. False indicates failure.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            You can specify the fill color by BackgroundFillColor property.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Print">
            <summary>
            Shows the GUI of Image Printer.
            </summary>
            <returns>
             
            Boolean.
            True indicates success. False indicates failure. 
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Depending on the property IfShowPrintUI, the User Interface of the printer may or may not show when you invoke this method.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetAllAnnotationDataList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData}@)">
            <summary>
            Returns all the data of the annotations on a specific image.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadAnnotationDataList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData})">
            <summary>
            Loads annotation data to a specific image from a data list.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSelectedAnnotationList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData}@)">
            <summary>
            Returns the data of the selected annotations on a specific image.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DeleteAnnotations(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData})">
            <summary>
            Deletes the annotations on a specific image which are listed in the parameter <b>aryAnnotation</b>.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CreateAnnotation(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData)">
            <summary>
            Creates an annotation on a specific image according to the annotation definition <b>objAnnotation</b>.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.UpdateAnnotation(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData)">
            <summary>
            Updates an annotation on a specific image with the new annotation definition <b>objNewAnnotation</b>.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ChangeAnnotationPosition(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData,Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationChangePosition)">
            <summary>
            Change the position of an annotation on a specific image to a new position according to <b>DWTAnnotationChangePosition</b>.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Invert(System.Int16)">
            <summary>
            Invert the color of a specific image.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GrayScale(System.Int16)">
            <summary>
            Convert a specific image to a grayscale image.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HookMessage">
            <summary>
            Hook thread message
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnImageAreaDeselected">
            <summary>
            Occurs when the selected area of the specified image is deselected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnImageAreaSelected">
            <summary>
            Occurs when an area of the specified image is selected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnInternetTransferPercentage">
            <summary>
            Occurs when uploading or downloading images via HTTP or FTP.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseClick">
            <summary>
            Occurs when the mouse clicks on an image.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseDoubleClick">
            <summary>
            Occurs when the mouse double clicks on an image.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseMove">
            <summary>
            Occurs when the mouse moves onto an image.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseRightClick">
            <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostAllTransfers">
            <summary>
            Occurs after all image are scanned.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostTransfer">
            <summary>
            Occurs when each image is scanned.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPreAllTransfers">
            <summary>
            Occurs before all images are scanned.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPreTransfer">
            <summary>
            Occurs before each image is scanned.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTopImageInTheViewChanged">
            <summary>
            Occurs when the current top image displayed in Dynamic .Net TWAIN is changed and the view mode is NOT set to -1 by -1.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTransferCancelled">
            <summary>
            Occurs when the transfer is cancelled by the user.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTransferError">
            <summary>
            Occurs when an error occurs during the process of transfer.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationSelected">
            <summary>
            Occurs when an annotation is selected.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationDeselected">
            <summary>
            Occurs when one or more annotations is deselected.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationCreated">
            <summary>
            Occurs when an annotation is created.
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationMoved">
            <summary>
            Occurs when an annotation is moved..
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationResized">
            <summary>
            Occurs when an annotation is resized..
            </summary>
        </member>
        <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationTextChanged">
            <summary>
            Occurs when the text in an annotation is changed.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BitDepth">
            <summary>
            Returns or sets the pixel bit depth for the current value of PixelType property. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Supports 1,8,24,32bit.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Brightness">
            <summary>
            Returns or sets the brightness value available within the Source.
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Capability">
            <summary>
            Specifies the capability to be negotiated. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Prior to negotiating capability, OpenSource() needs to be called to make Dynamic .NET TWAIN ready for capability negotiation.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapCurrentIndex">
            <summary>
            Returns or sets the index (0-based) of a list to indicate the Current Value when the value of the CapType property is TWON_ENUMERATION.
            If the data type of the capability is String, the list is in GetCapItemsString. 
            For other data types, the list is in GetCapItems. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            The CapCurrentIndex property is 0-based.
            It is valid only when the CapType property is TWON_ENUMERATION.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapCurrentValue">
            <summary>
            Returns or sets the current value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method.
            After setting this property, call CapSet() method to actually set the value.
            CapCurrentValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapDefaultIndex">
            <summary>
            Returns the index (0-based) of a list to indicate the Default Value when the value of the CapType property is TWON_ENUMERATION. If the data type of the capability is String, the list is in GetCapItemsString. For other data types, the list is in GetCapItems property. 
            This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method.
            The CapDefaultIndex property is 0-based and read-only.
            It is valid only when the CapType property is TWON_ENUMERATION.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapDefaultValue">
            <summary>
            Returns the default value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method.
            Default value reflects the source's power-on value. It can NOT be set.
            CapDefaultValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapMaxValue">
            <summary>
            Returns or sets the maximum value in a range when the value of the CapType property is TWON_RANGE. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapMaxValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapMinValue">
            <summary>
            Returns or sets the minimum value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapMinValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapNumItems">
            <summary>
            Returns or sets how many items are in the list when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. For String data type, the list is in GetCapItemsString. For other data types, the list is in GetCapItems. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. 
            After setting this property, call CapSet() method to actually set the value.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapStepSize">
            <summary>
            Returns or sets the step size in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapStepSize property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapType">
            <summary>
            Returns or sets the type of capability container used to exchange capability information between application and source. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Allowed Values</term>
            <description>Description</description>
            </listheader>
            <item><term>TWON_ARRAY(3)</term>
            <description>
            An array of associated individual values. 
            CapNumItems property, GetCapItems/SetCapItems/GetCapItemsString/SetCapItemsString are valid.</description></item>
            <item><term>TWON_ENUMERATION(4)</term>
            <description>A group of associated individual values. The values are ordered from the lowest to highest values, but the step size between every two values is probably not uniform.
            CapNumItems property, CapCurrentIndex property, CapDefaultIndex property, GetCapItems/SetCapItems/GetCapItemsString/SetCapItemsString are valid.
            </description></item>
            <item><term>TWON_ONEVALUE(5)</term>
            <description>A single value. CapValue property or CapValueString property is valid.</description>
            </item>
            <item><term>TWON_RANGE(6)</term>
            <description>A range of individual values. 
            CapMinValue property, CapMaxValue property, CapStepSize property, CapDefaultValue property and CapCurrentValue property are valid. 
            </description></item>
            </list>
            <br/>
            CapType property does not need to be set before CapGet() is called.
            CapDefaultIndex property and CapDefaultValue property reflect power-on values and are not available with CapSet().
            
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapValue">
            <summary>
            Returns or sets the value of the capability specified by Capability property when the value of the CapType property is TWON_ONEVALUE. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            The Double type of CapValue property is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use CapValueString property. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like GetCapItems and GetCapItemsString, where GetCapItemsString is used to present String type and GetCapItems is used to present other types. GetCapItems and GetCapItemsString are used when the container type is TWON_ARRAY or TWON_ENUMERATION.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapValueString">
            <summary>
            Returns or sets the string value for a capability when the value of the CapType property is TWON_ONEVALUE.
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapValueString property is used to set or return String type value. For any other data types when the CapType property is TWON_ONEVALUE, use CapValue property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Contrast">
            <summary>
            Returns or sets the contrast values available within the Source. 
            This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentSourceName">
            <summary>
            Returns the device name of current source.
            This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If no source is currently selected, CurrentSourceName property returns "".
            
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DataSourceStatus">
            <summary>
            Returns the value indicating the data source status. 
            This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Allowed values are between 0 and 3, defined in TWDataSourceStatus. 
            0, indicate the data source is closed. 
            1, indicate the data source is opened.
            2, indicate the data source is enabled. 
            3, indicate the data source is acquiring image. 
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DefaultSourceName">
            <summary>
            Returns the device name of default source. 
            This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Duplex">
            <summary>
            Returns whether the source supports duplex.
            If so, it further returns the level of duplex the Source supports (one pass or two pass duplex). This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Values</term>
            <description>Duplex</description>
            </listheader>
            <item><term>0</term>
            <description>Duplex is not supported </description></item>
            <item><term>1</term>
            <description>1-pass duplex</description></item>
            <item><term>2</term>
            <description>2-pass duplex</description>
            </item>
            </list>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoBright">
            <summary>
            Returns or sets whether the Source's Auto-brightness function is enabled. This is a runtime property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoFeed">
            <summary>
            Returns or sets whether the Source enable automatic document feeding process. This is a runtime property. 
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the value of this property is true, the Source will automatically feed the next page from the document feeder after the previous page is acquired.
            Using this property after opening the Data Source and checking if the value of IfFeederEnabled property is true.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoScan">
            <summary>
            Returns or sets whether the Source enables the automatic document scanning process. This is a runtime property. 
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the value of this property is true, the Source will automatically feed the next page from the document feeder after the previous page is acquired.
            Using this property after opening the Data Source and checking if the value of IfFeederEnabled property is true.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDeviceOnline">
             <summary>
             Returns whether the Source is attached, powered on, and communicating. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDisableSourceAfterAcquire">
            <summary>
            Returns or sets whether close the Data Source User Interface after acquire all images. Default value of this property is false.
            </summary>
              
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            IfShowUI     IfDisableSourceAfterAcquire     Actions 
            true         false                           UI will be shown, user can acquire many images, user must close UI himself 
            true         true                            UI will be shown, only one image will be acquired, UI will be closed automatically 
            false        false                           UI will not be shown, one or many images will be acquired (if the source supports), the device will not be closed automatically and needs to be closed by DisableSource() method 
            false        true                            UI will not be shown, one or many images will be acquired (if the source supports), the device will be closed automatically 
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDuplexEnabled">
            <summary>
            Returns or sets whether the Source supports duplex. If true, the scanner scans both sides of a paper; otherwise, the scanner will scan only one side of the image. This is a runtime property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Call OpenSource() method and confirm that the duplex is supported before using this property.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFeederEnabled">
            <summary>
            Returns or sets whether the Automatic Document Feeder (ADF) is enabled. This is a runtime property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the value of this property is true, Source must acquire data from the document feeder acquire area and other feeder capabilities can be used. If the value of this property is false, Source must acquire data from the non-feeder acquire area and no other feeder capabilities can be used.
            Call OpenSource() method before using this property.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFeederLoaded">
            <summary>
            Returns whether or not there are documents loaded in the Source's feeder when IfFeederEnabled and IfPaperDetectable are true. This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Call OpenSource() method before using this property.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfModalUI">
            <summary>
            Returns or sets whether the UI (User Interface) of Source runs in modal state. Default value of this property is true.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the property is true, the TWAIN Data Source will display its User Interface as modal window when invoking the AcquireImage method.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfPaperDetectable">
            <summary>
            Returns the value whether the Source has a paper sensor that can detect documents on the ADF or Flatbed. This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Reading this property after calling OpenSource() method.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowIndicator">
            <summary>
            Returns or sets whether the Source displays a progress indicator during acquisition and transfer, regardless of whether the Source's user interface is active. This is a runtime property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowUI">
            <summary>
            Returns or sets whether the Source displays the User Interface.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the property is true, the TWAIN Data Source will display its User Interface when invoking the AcquireImage method. 
            If the property is false, the Data Source UI will not be displayed and scanning will begin immediately using the current capability values.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfUIControllable">
            <summary>
            Returns whether the Source supports acquisition with the UI (User Interface) disabled. If false, 
            indicates that this Source can only support acquisition with the UI enabled. This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Using this property after calling OpenSource() method.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageBitsPerPixel">
            <summary>
            Returns the number of bits in each image pixel (or bit depth). This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            24-bit RGB has BitsPerPixel = 24. 8-bit Grayscale has BitsPerPixel = 8. Black and White has BitsPerPixel = 1.
            ImageBitsPerPixel property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutDocumentNumber">
            <summary>
            Returns the document number of the current image. This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Usually, increment when a group of new pages is placed into the document feeder (usually tell this has happened when the feeder empties).
            ImageLayoutDocumentNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameBottom">
            <summary>
            Returns the value of the bottom-most edge of the current image frame (in ICAP_UNITS). This is a read-only runtime property.
            </summary>
              
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of ImageLayoutFrameBottom property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameBottom property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameLeft">
            <summary>
            Returns the value of the left-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of ImageLayoutFrameLeft property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameLeft property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameNumber">
            <summary>
            Returns the frame number of the current image. This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The frames are acquired from the same page. The number is reset when a new page is acquired.
            ImageLayoutFrameNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How To Negotiate ICAP_FRAMES for details and sample code.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameRight">
            <summary>
            Returns the value of the right-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of ImageLayoutFrameRight property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameRight property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameTop">
            <summary>
            Returns the value of the top-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of ImageLayoutFrameTop property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameTop property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutPageNumber">
             <summary>
             Returns the page number of the current image. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             Increment for each page fed from a page feeder.
             ImageLayoutPageNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLength">
             <summary>
             Returns how tall/int, in pixels, the image is. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             -1 is returned, if the Source doesn't know the length of the image.(hand scanners may do this).
             ImageLength property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImagePixelType">
             <summary>
             Returns the pixel type of the current image. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             <list type="table">
             <listheader>
             <term>Values</term>
             <description>Description</description>
             </listheader>
             <item><term>TWPT_BW(0)</term>
             <description>Black and White</description></item>
             <item><term>TWPT_GRAY(1)</term>
             <description>Grayscaled</description></item>
             <item><term>TWPT_RGB(2)</term>
             <description>RGB</description>
             </item>
             </list>
             <br/>
             ImagePixelType property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageWidth">
             <summary>
             Returns how width, in pixels, the image is. This is a runtime, read-only property.
             </summary>
            
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             -1 is returned, if the Source doesn't know the width of the image. (handhold scanners may do this).
             ImageWidth property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageXResolution">
            <summary>
            Returns the X resolution of the current image. X resolution is the number of pixels per ICAP_UNITS in the horizontal direction. This is a runtime, read-only property.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The unit of ImageXResolution property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageXResolution property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageYResolution">
             <summary>
             Returns the Y resolution of the current image. Y resolution is the number of pixels per ICAP_UNITS in the vertical direction. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             The unit of ImageYResolution property is determined by ICAP_UNITS capability.
             The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
             ImageYResolution property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PageSize">
            <summary>
            Returns or sets the page size(s) the Source can/should use to acquire image data. This is a runtime property. 
            Please set the pagesize value in enum <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes"/>.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PendingXFERs">
            <summary>
            Returns the number of transfers the Source is ready to supply, upon demand. This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            This property is valid only in OnPostTransfer event.
            The Data Source returns -1 if it is not sure how many transfers are pending. Scanners with ADF (Automatic Document Feeder) will typically return -1 if the current image is not the last one.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PixelFlavor">
            <summary>
            Returns or sets the pixel flavor for acquired images. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            <list type="table">
            <listheader>
            <term>Allowed Values</term>
            <description>Description</description>
            </listheader>
            <item><term>0</term>
            <description>Chocolate. Zero pixel represents darkest shade.</description></item>
            <item><term>1</term>
            <description>Vanilla. Zero pixel represents lightest shade.</description></item>
            </list>
            The default value is 0. That is, the default value of PixelFlavor is Chocolate.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PixelType">
            <summary>
            Returns or sets the pixel type of acquired images. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            <list type="table">
            <listheader>
            <term>Allowed Values</term>
            <description>PixelType TWICapPixelType</description>
            </listheader>
            <item><term>0</term>
            <description>BW</description></item>
            <item><term>1</term>
            <description>GRAY</description></item>
            <item><term>2</term>
            <description>RGB</description></item>
            <item><term>3</term>
            <description>PALETTE</description></item>
            <item><term>4</term>
            <description>CMY</description></item>
            <item><term>5</term>
            <description>CMYK</description></item>
            <item><term>6</term>
            <description>YUV</description></item>
            <item><term>7</term>
            <description>YUVK</description></item>
            <item><term>8</term>
            <description>CIEXYZ</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Resolution">
            <summary>
            Returns or sets the current resolution for image acquisition. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SourceCount">
            <summary>
            Returns how many sources are installed in the system. This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If SourceCount is 0, no source is installed or the Source Manager is not open.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TransferMode">
            <summary>
            Returns or sets the transfer mode. Please set the value of transfer mode in enum <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer"/>.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default value of the TransferMode property is TWSX_NATIVE (0). 
            For DISK FILE mode, since it is not required by TWAIN, the application needs to make sure it is supported by the current Source. One way to do this is checking the TransferMode property after OpenSource() to see if it is still TWSX_FILE. 
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Unit">
            <summary>
            Returns or sets the unit of measure. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Allowed Values</term>
            <description>Unit</description>
            </listheader>
            <item><term>0</term>
            <description>INCHES</description></item>
            <item><term>1</term>
            <description>CENTIMETERS</description></item>
            <item><term>2</term>
            <description>PICAS</description>
            </item>
            <item><term>3</term>
            <description>POINTS</description>
            </item>
            <item><term>4</term>
            <description>TWIPS</description>
            </item>
            <item><term>5</term>
            <description>PIXELS</description>
            </item>
            </list>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.XferCount">
            <summary>
            Returns and sets the number of images you are willing to transfer per session. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Allowed values are between -1 and 32767
            N,  indicate willing  to transfer N images this session.
            -1,  indicate willing to transfer multiple images.
            Using this property after calling OpenSource() method.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BlankImageMaxStdDev">
            <summary>
            Returns or sets the standard deviation of the pixels in the image.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The allowed values are from 0 to 100. 0 means it is a single-color image. The default value is 1.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BlankImageThreshold">
            <summary>
            Returns or sets the dividing line between black and white. The default value is 128.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The allowed values are from 0 to 255. The default value is 128.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BorderStyle">
            <summary>
            Returns or sets the border style.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Allowed Values</term>
            <description>Description</description>
            </listheader>
            <item><term>None (0)</term>
            <description>No border</description></item>
            <item><term>SingleFlat (1)</term>
            <description>Flat border</description></item>
            <item><term>Single3D (2)</term>
            <description>3D border</description></item>
            </list>
            
            The default value of the BorderStyle property is None (0).
            
            Supports changing the border style of the control, not the border style of each image in the view mode.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentImageIndexInBuffer">
            <summary>
            Returns or sets current index of image in buffer. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The index is 0 based. Current image is alwarys selected.
            By changing CurrentImageIndexInBuffer, you can enumerate all the images in buffer. 
            When CurrentImageIndexInBuffer is changed, the control will be redrawn to reflect the change.
            When an image is added to buffer, the CurrentImageIndexInBuffer is skipped to the next one and the new image is added there.
            When image buffer is full, that is HowManyImagesInBuffer = MaxImagesInBuffer, the new acquired or loaded image will replace the existing one, positioned by CurrentImageIndexInBuffer. 
            For example, if HowManyImagesInBuffer = 4 and MaxImagesInBuffer = 4, CurrentImageIndexInBuffer = 3, after a new image is acquired, the CurrentImageIndexInBuffer is set to 0, 
            and the 1st image is replaced by the new acquired one . If another image is acquired again, the CurrentImageIndexInBuffer is set to 1 and the 2nd image is replaced by the new acquired one.
            If an image is selected, the value of CurrentImageIndexInBuffer will be the index of the selected image.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableInteractiveZoom">
            <summary>
            Returns or sets whether the user can zoom image using hot key.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If it is set to true. The user can use hot key "Ctrl + Mouse Wheel" or "Alt + Mouse Wheel" to zoom in/out the image, use "+" (small keyboard) to zoom in the image, and use "-" (small keyboard) to zoom out the image. 
            The default value of this property is true.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorCode">
            <summary>
            Returns the error code. This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If no error occurs, TWERR_SUCCESS(0) is returned.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorString">
            <summary>
            Returns the error string. This is a runtime, read-only property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            none
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPPassword">
            <summary>
            Returns or sets the password used to log into the FTP server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If you wish to use "anonymous" user name to log into a FTP server, 
            just use the default value of FTPUserName property and FTPPassword property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPPort">
            <summary>
            Returns or sets the port number of the FTP server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default FTP port number is 21.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUserName">
            <summary>
            Returns or sets the user name used to log into the FTP server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If you  wish to use "anonymous" user name to log into a FTP server, just use the default value of FTPUserName property and FTPPassword property.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HowManyImagesInBuffer">
             <summary>
             Returns how many images are in buffer. This is a runtime, read-only property.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPassword">
             <summary>
             Sets or returns the password used to log into the HTTP server.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPort">
             <summary>
             Returns or sets the port number of the HTTP server.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default HTTP port number is 80. This property is used with IfSSL property.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPostResponseString">
             <summary>
             Returns the response string from the HTTP server if an error occurs for HTTPUploadThroughPost() method. This is a runtime, read-only property.
             </summary>
            
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            If HTTPUploadThroughPost() method returns false, check this property for response string from the HTTP server. If HTTPUploadThroughPost() method return true, this property returns "".
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUserName">
             <summary>
             Returns or sets the user name used to log into the HTTP server.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfSSL">
             <summary>
             Returns or sets that an SSL connection should be used.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default value is false.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAppendImage">
             <summary>
             Returns or sets whether insert or append new scanned images.
             </summary>
               
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            If the value of the property is set to true, the new scanned image will be appended after the last image in buffer; if the value of the property is set to false, the new scanned image will be inserted before the current image.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFitWindow">
             <summary>
             Returns or sets whether to resize the image to fit the size of window when the view mode is set to -1 by -1. 
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default value of the IfFitWindow property is true.
            When the value is False, the image will be displayed in its full size and scroll bars will be shown if necessary (the width or height of the image is bigger than the control size).
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FitWindowType">
            <summary>
            Returns or sets whether to resize the image to fit the image to the width or height of window.To use the property,the view mode should be set to -1 by -1. 
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>Fit Window Type</th>
            </tr>
            <tr valign="center">
            <td>0(default)</td>
            <td>Fit the image to the width and height of the window</td>
            </tr>
            <tr valign="center">
            <td>1</td>
            <td>Fit the image to the height of the window</td>
            </tr>
            <tr valign="center">
            <td>2</td>
            <td>Fit the image to the width of the window</td>
            </tr>
            </table>
            </div>
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowCancelDialogWhenImageTransfer">
             <summary>
             Sets or returns whether to show the cancel dialog when uploading images to server. 
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default value of the IfShowCancelDialogWhenImageTransfer property is true.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfThrowException">
            <summary>
            Returns or sets whether an exception will be thrown when an error occurs.
            </summary>
            <remarks>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            If IfThrowException is true, When an error occurs, an exception will be thrown.
            Otherwise, please check ErrorCode and ErrorString.
            </exception>
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfTiffMultiPage">
             <summary>
             Returns or sets whether the Source allows to save many images in one TIFF file. The default value is false.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            If this property is true, the new image will be added to existing TIFF file.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorIfEnableEnumerator">
             <summary>
             Returns or sets whether the image enumerator is enabled in Image Editor.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default value is true.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorIfReadonly">
             <summary>
             Returns or sets whether the Image Editor is read-only.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            The default value is False. If this property is true, the Image Editor GUI can only be viewed with all functionalities disabled.
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorWindowTitle">
             <summary>
             Returns or sets the title of Image Editor window.
             </summary>
              
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
            
             </remarks>
             
             
             
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageMargin">
            <summary>
            Returns or sets the margin between images when multiple images are displayed in Dynamic .NET TWAIN.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The default value will auto judge.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.JPEGQuality">
            <summary>
            Returns or sets the quality of the JPEG file.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            The default value of JPEGQuality property is 80.
            The valid range is 0-100. The higher the JPEGQuality property, the better the JPEG quality and the greater the size of the file.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Manufacturer">
            <summary>
            Returns or sets the manufacture string for the application identity.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The Manufacturer property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MaxImagesInBuffer">
            <summary>
            Returns or sets the maximum number of images can be held in buffer.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default value of this property is 1. The maximum value is 1024.
            When image buffer is full, that is HowManyImagesInBuffer = MaxImagesInBuffer, the new acquired or opened image will replace the existing one, positioned by CurrentImageIndexInBuffer. 
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MouseShape">
            <summary>
            Returns or sets the shape of the mouse.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            When the value of the property is set to true, the cursor is set as a hand. If the width or height of the image is bigger than the control size, scroll bars will be shown and you can drag the image to adjust the position in the control.
            When the value of the property is set to false, the cursor is set as an arrow. You can select an area in Dynamic .NET TWAIN directly and the OnImageAreaSelected event will be fired.
            </remarks>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFAuthor">
            <summary>
            Returns or sets the name of the person who creates the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCompressionType">
            <summary>
            Returns or sets the compression type of PDF files.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>PDF compression type</th>
            <th>Description</th>
            <th>Supported image formats</th>
            </tr>
            <tr valign="center">
            <td>0</td>
            <td>PDF_AUTO</td>
            <td>Auto mode</td>
            <td>1, 4, 8, 24 bit</td>
            </tr>
            <tr valign="center">
            <td>1</td>
            <td>PDF_FAX3</td>
            <td>CCITT Group 3 fax encoding</td>
            <td>1 bit</td>
            </tr>
            <tr valign="center">
            <td>2</td>
            <td>PDF_FAX4</td>
            <td>CCITT Group 4 fax encoding</td>
            <td>1 bit</td>
            </tr>
            <tr valign="center">
            <td>3</td>
            <td>PDF_LZW</td>
            <td>Lempel-Ziv Welch</td>
            <td>1, 4, 8, 24 bit</td>
            </tr>
            <tr valign="center">
            <td>4</td>
            <td>PDF_RLE</td>
            <td>CCITT modified Huffman RLE</td>
            <td>1 bit</td>
            </tr>
            <tr valign="center">
            <td>5</td>
            <td>PDF_JPEG</td>
            <td>JPEG encoding</td>
            <td>4, 8, 24 bit</td>
            </tr>
            </table>
            </div>
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFPageSize">
            <summary>
            Returns or sets the page size of images which are going to be saved as PDF files.
            </summary>
            
            <returns> 
            Returns the page size of PDF files.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCreationDate">
            <summary>
            Returns or sets the date when the PDF document is created.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default value is current date.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCreator">
            <summary>
            Returns or sets the name of the application that created the original document, if the PDF document is converted from another form.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFKeywords">
            <summary>
            Returns or sets the keywords associated with the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFModifiedDate">
            <summary>
            Returns or sets the date when the PDF document is last modified.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default value is current date.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFProducer">
            <summary>
            Returns or sets the name of the application that converted the PDF document from its native.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFSubject">
            <summary>
            Returns or sets the subject of the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFTitle">
            <summary>
            Returns or sets the title of the PDF document.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginBottom">
            <summary>
            Returns or sets the bottom margin of a PDF file.
            </summary>
            
            <returns> 
            Returns the bottom margin of a PDF file.
            </returns>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginLeft">
             <summary>
             Returns or sets the left margin of a PDF file.
             </summary>
             
             <returns> 
             Returns the left margin of a PDF file.
             </returns>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginRight">
             <summary>
             Returns or sets the right margin of a PDF file.
             </summary>
             
             <returns> 
             Returns the right margin of a PDF file.
             </returns>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
             <remarks>
             You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
             </remarks>
             
             
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProductFamily">
            <summary>
            Returns or sets the product family string for the application identity.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The ProductFamily property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProductName">
            <summary>
            Returns or sets the product name string for the application identity.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The ProductName property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TIFFCompressionType">
            <summary>
            Returns or sets the compression type of TIFF files.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>Description</th>
            </tr>
            <tr valign="center">
            <td>DWTPDFCompressionType.enumAutoEncode</td>
            <td>Auto mode</td>
            </tr>
            <tr valign="center">
            <td>DWTPDFCompressionType.enumCCITTFax4Encode</td>
            <td>CCITT Group 4 fax encoding</td>
            </tr>
            <tr valign="center">
            <td>DWTPDFCompressionType.enumFlateEncode</td>
            <td>Flate encoding</td>
            </tr>
            <tr valign="center">
            <td>DWTPDFCompressionType.enumJPEGEncode</td>
            <td>JPEG encoding</td>
            </tr>
            </table>
            </div>
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.VersionInfo">
            <summary>
            Returns or sets the version info string for the application identity.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The VersionInfo property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Zoom">
            <summary>
            Returns or sets zoom factor for the image, only valid When the view mode is set to -1 by -1. This is a runtime property.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The zoom value is expressed as a percentage. The valid range is from 2 to 6500 percent (Value: 0.02 ~ 65.0); the default value is 100 percent (Value: 1.0). A zoom value can be specified before or after an image is displayed. When the zoom value is changed, the displayed image will refresh automatically.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HttpFieldNameOfUploadedImage">
            <summary>
            Specifies the field name of uploaded image through POST.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Default is "RemoteFile". It is used in HTTPUploadThroughPost, HTTPUploadThroughPostEx, 
            HTTPUploadAllThroughPostAsMultiPageTIFF, HTTPUploadAllThroughPostAsPDF,
            HTTPUploadThroughPostAsMultiPageTIFF, HTTPUploadThroughPostAsMultiPagePDF
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyServerName">
            <summary>
            Returns or sets the name of the proxy server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Only the name of the proxy serevr is needed. For instance, 192.168.1.100.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyServerPort">
            <summary>
            Returns or sets the port number of the Proxy server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyUserName">
            <summary>
            Returns or sets the user name used to log into the Proxy server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyPassword">
            <summary>
            Sets or returns the password used to log into the Proxy server.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFTPPassiveMode">
            <summary>
            Returns or sets whether FTP passive mode is enabled. 
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The Default value is true. If it is true, FTP passive mode is enabled.
            If it is false, FTP passive mode is not enabled.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentSelectedImageIndicesInBuffer">
            <summary>
            Returns or sets current selected image indices in buffer.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            If no image in buffer, returned array count is zero.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AllowMultiSelect">
            <summary>
            Returns or sets whether support multiple select. This property is invalid when the view mode is set to -1 by -1 or 1 by 1.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            Default is false. If it is true, when a user selecting multiple images, the CurrentImageIndexInBuffer is always the minimum 
            index in the selected images.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfModalImageEditor">
            <summary>
            Returns or sets whether the ImageEditor control is modal.
            </summary>
            
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Default is true.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectionImageBorderColor">
            <summary>
            Returns or sets the border color of the selected image. It is a value specifying the 32-bit ARGB value.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Default is Navy. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MaxUploadImageSize">
            <summary>
            Returns or sets the maximum size of image can be upload.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            <remarks>
            The default value of this property is -1. 
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BackgroundFillColor">
            <summary>
            Returns or sets the fill color of the selected area of an image when it is cut, erased, or rotated. It is a value specifying the 32-bit ARGB value.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Default is Black. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BackgroundColor">
            <summary>
            Returns or sets the background color of the main control. It is a value specifying the 32-bit ARGB value.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Default is White. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
            
            
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.VScrollBar">
            <summary>
            Indicates whether the vertical scroll bar is visible when the images are larger than page size.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            Default is true. If view mode is -1 * -1, ignore this setting.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BarcodeCount">
            <summary>
            Returns the number of barcode detected in an image.
            </summary>
                       
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the Source doesn't contain barcode or not supported barcode, 0 will be returned.
            BarcodeCount property, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowPrintUI">
            <summary>
            Returns or sets whether the driver of the printer displays the User Interface.
            </summary>
            
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            If the property is true(default), the driver of the printer will display its User Interface when invoking the Print method. If the property is false, the User Interface will not be displayed and the print process will get started immediately.
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationType">
            <summary>
            Returns or sets the annotation type. To use the property,the property MouseShape should be set to false.
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
            <remarks>
            <div class="tablediv">
            <table>
            <tr valign="center">
            <th>Allowed Values</th>
            <th>Annotation Types</th>
            </tr>
            <tr valign="center">
            <td>enumNone(default)</td>
            <td>Select an area</td>
            </tr>
            <tr valign="center">
            <td>enumPointer(Pointer)</td>
            <td>Select an existing annotation. Press "Ctrl" to multi-select annotations.</td>
            </tr>
            <tr valign="center">
            <td>enumText(Text)</td>
            <td>Create a text.The annotation type will be set back to 1 once the annotation is completed..</td>
            </tr>
            <tr valign="center">
            <td>enumLine(Line)</td>
            <td>Create a line.The annotation type will be set back to 1 once the annotation is completed..</td>
            </tr>
            <tr valign="center">
            <td>enumRectangle(Rectangle)</td>
            <td>Create a rectangle.The annotation type will be set back to 1 once the annotation is completed..</td>
            </tr>
            <tr valign="center">
            <td>enumEllipse(Ellipse)</td>
            <td>Create a ellipse.The annotation type will be set back to 1 once the annotation is completed..</td>
            </tr>
            </table>
            </div>
            </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationTextFont">
            <summary>
            Returns or sets the font for the annotation text. This property is only valid when the annotation type is set to 2(Text).
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationTextColor">
            <summary>
            Returns or sets the color for the annotation text. This property is only valid when the annotation type is set to 2(Text).
            </summary>
            
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationPen">
             <summary>
             Returns or sets the color and width of the pen for drawing the annotation rectangle/ellipse/line. This property is only valid when the annotation type is NOT 2(Text).
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
            <remarks>
            By default, the color is black and the width is 1;
             </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationFillColor">
             <summary>
             Returns or sets the fill color and transparency for the area inside the annotation rectangle/ellipse. This property is only valid when the annotation type is NOT 2(Text).
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
            <remarks>
            By default, the color is white and not transparent.
             </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfSaveAnnotations">
             <summary>
             Returns or sets whether save the created annotations.This property only applies to PDF files.
             </summary>
             
             <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
            <remarks>
            The default value is false.
             </remarks>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LogLevel">
             <summary>
             Returns or sets whether enable the debug mode of Dynamic .NET TWAIN.
             </summary>
             // <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
            <remarks>
            The default value is 0. When the value i is set to 1, Dynamic .NET TWAIN will send all messages to an external Debugger tool for display. (eg. DgbView.exe)
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Common.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.Util.CopyUnmanagedMemory(System.IntPtr,System.IntPtr,System.Int32)">
             <summary>
             Copy block of unmanaged memory.
             </summary>
             
             <param name="dst">Destination pointer.</param>
             <param name="src">Source pointer.</param>
             <param name="count">Memory block's length to copy.</param>
             
             <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
             
             <remarks><para>This function is required because of the fact that .NET does
             not provide any way to copy unmanaged blocks, but provides only methods to
             copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.Util.CopyUnmanagedMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copy block of unmanaged memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
            <remarks><para>This function is required because of the fact that .NET does
            not provide any way to copy unmanaged blocks, but provides only methods to
            copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.Util.SetUnmanagedMemory(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.Util.SetUnmanagedMemory(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.IndexList">
            <summary>
            Implements the IIndexList interface using an array whose size is dynamically increased as required.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.IIndexList">
            <summary>
            Represents a non-generic collection of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The value to be inserted.</param>
            <returns>
            true indicates success. false indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.Add(System.Int32)">
            <summary>
            Adds an int value to the end of the list.
            </summary>
            <param name="value">
            The value to be added to the end of the list. 
            </param>
            <returns>
            The list index at which the value has been added. -1 indicates failure.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to be removed.</param>
            <returns>
            true indicates success. false indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific value from the list.
            </summary>
            <param name="value">The value to be removed from the list.</param>
            <returns>
            true indicates success. false indicates failure. 
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire list.
            </summary>
            <returns>
            An IEnumerator for the entire list.
            </returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.IIndexList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException"> 
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Business.TwainOperateWrapper">
            <summary>
            Summary description for TwainOperateWrapper.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Business.ImageOperator">
            <summary>
            Summary description for ImageOperator.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Business.MultiImageTwain">
            <summary>
            Summary description for MultiImageTwain.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Business.TwainBase">
            <summary>
            Summary description for TwainBase.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.SelectSourceByIndex(System.Int32)">
            <summary>
            open the data source in m_idSourceList
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.OpenSource">
            <summary>
            open the default data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.OpenSourceManager">
            <summary>
               Function name: OpenSourceManager
               Description: Load source manager and open it
               Return:	TRUE: successful, 
            		    FALSE: failed. The client should call GetErrorCode and GetErrorString to get more information
               Steps: 1. load source manager
            	     2. open it
            	     3. populate source list
               Comment:	there is not a callable function of LoadSourceManager
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfException">
             Signals that an unspecified problem while constructing a PDF document.
            
             @see        BadPdfFormatException
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PRTokeniser">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.BadPdfFormatException">
             Signals that a bad PDF format has been used to construct a <CODE>PdfObject</CODE>.
            
             @see        PdfException
             @see        PdfBoolean
             @see        PdfNumber
             @see        PdfString
             @see        PdfName
             @see        PdfDictionary
             @see        PdfFont
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.BadElementException">
            <summary>
            Signals an attempt to create an Element that hasn't got the right form.
            </summary>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle">
            <summary>
            Summary description for DrawSelectRectangle.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.Draw(System.Drawing.Graphics)">
            <summary>
            Draw m_rcRectangle
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.GetHandle(System.Int32)">
            <summary>
            Get handle point by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.HitTest(System.Drawing.Point)">
            <summary>
            Hit test.
            Return value: -1 - no hit
                           0 - hit anywhere
                           > 1 - handle number
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.GetHandleCursor(System.Int32)">
            <summary>
            Get cursor for the handle
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.MoveHandleTo(System.Drawing.Point,System.Int32)">
            <summary>
            Move handle to new point (resizing)
            </summary>
            <param name="point"></param>
            <param name="handleNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.MoveHandleTo2(System.Drawing.Point,System.Int32)">
            <summary>
            Move handle to new point (resizing)
            </summary>
            <param name="point"></param>
            <param name="handleNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.MakeSureMeetMinimumsize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Make sure m_rcRectangle size great than minimum size
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="dx">return delta x</param>
            <param name="dy">return delta y</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.Move(System.Int32,System.Int32)">
            <summary>
            Move object
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.Normalize">
            <summary>
            Normalize m_rcRectangle
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.SaveToStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            Save objevt to serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.LoadFromStream(System.Runtime.Serialization.SerializationInfo,System.Int32)">
            <summary>
            LOad object from serialization stream
            </summary>
            <param name="info"></param>
            <param name="orderNumber"></param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.DrawSelectRectangle.HandleCount">
            <summary>
            Get number of handles
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage"/> class.
            </summary>
            
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage"/> class.
            </summary>
            
            <param name="bitmapData">Locked bitmap data.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage"/> class.
            </summary>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="!:Create"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.ImageData">
            <summary>
            Pointer to image data in unmanaged memory
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Width">
            <summary>
            Image width in pixels.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Height">
            <summary>
            Image height in pixels.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.Stride">
            <summary>
            Image stride (line size in bytes)
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Filters.UnmanagedImage.PixelFormat">
            <summary>
            Image pixel format.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfTextArray" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfTextArray.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfNumber)">
             Adds a <CODE>PdfNumber</CODE> to the <CODE>PdfArray</CODE>.
            
             @param  number   displacement of the string
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray">
            An implementation of a RandomAccessFile for input only
             that accepts a file or a byte array as data source.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.startOffset">
            Holds value of property startOffset. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.ReadShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.ReadCharLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.ReadIntLE" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray.ReadUnsignedInt" -->
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IanaEncodings">
            Translates a IANA encoding name to a Java encoding.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.IanaEncodings.map">
            The object that maps IANA to Java encodings. 
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.UnsupportedPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document according to iText,
            but it's different from the InvalidPdfException in the sense that it may
            be an iText limitation (most of the times it isn't but you might have
            bumped into something that has been added to the PDF specs, but that isn't
            supported in iText yet).
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.UnsupportedPdfException.#ctor(System.String)">
            Creates an instance of an UnsupportedPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFFaxDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            @param fillOrder   The fill order of the compressed data bytes.
            @param w
            @param h
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.R">
            <summary>
            Index of red component.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.G">
            <summary>
            Index of green component.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.B">
            <summary>
            Index of blue component.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.A">
            <summary>
            Index of alpha component for ARGB images.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.Red">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.Green">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.Blue">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB"/> class.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB"/> class.
            </summary>
            
            <param name="red">Red component.</param>
            <param name="green">Green component.</param>
            <param name="blue">Blue component.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB"/> class.
            </summary>
            
            <param name="color">Initialize from specified <see cref="T:System.Drawing.Color">color.</see></param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.RGB.Color">
            <summary>
            <see cref="T:System.Drawing.Color">Color</see> value of the class.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ImageViewer">
            <summary>
            Summary description for ImageViewer.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow">
            <summary>
            Summary description for ImageWindow.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.NetRectangle">
            <summary>
            Group selection rectangle. Used for drawing.
            http://www.google.com
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.DrawNetRectangle">
            <summary>
            Flas is set to true if group selection rectangle should be drawn.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.ActiveTool">
            <summary>
            Active drawing tool.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Controls.ImageWindow.GraphicsList">
            <summary>
            List of graphics objects.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.ImageViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Controls.ImageViewer.OneByOneMode">
            <summary>
            Sample
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp">
            Stores the PDF version information,
            knows how to write a PDF Header,
            and how to add the version to the catalog (if necessary).
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IPdfVersion">
            The PDF version is described in the PDF Reference 1.7 p92
            (about the PDF Header) and page 139 (the version entry in
            the Catalog). You'll also find info about setting the version
            in the book 'iText in Action' sections 2.1.3 (PDF Header)
            and 3.3 (Version history).
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IPdfVersion.SetAtLeastPdfVersion(System.Char)">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header,
            but only if param refers to a higher version.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IPdfVersion.SetPdfVersion(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            Sets the PDF version as it will appear in the Catalog.
            Note that this only has effect if you use a later version
            than the one that appears in the header; this method
            ignores the parameter if you try to set a lower version.
            @param version   the PDF name that will be used for the Version key in the catalog
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IPdfVersion.PdfVersion">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.HEADER">
            Contains different strings that are part of the header. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.headerWasWritten">
            Indicates if the header was already written. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.appendmode">
            Indicates if we are working in append mode. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.header_version">
            The version that was or will be written to the header. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.catalog_version">
            The version that will be written to the catalog. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.extensions">
            The extensions dictionary.
            @since	2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.SetPdfVersion(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.SetAppendmode(System.Boolean)">
            Sets the append mode.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.WriteHeader(Dynamsoft.DotNet.TWAIN.PDF.OutputStreamCounter)">
            Writes the header to the OutputStreamCounter.
            @throws IOException 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.GetVersionAsName(System.Char)">
            Returns the PDF version as a name.
            @param version    the version character.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.GetVersionAsByteArray(System.Char)">
            Returns the version as a byte[].
            @param version the version character
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.AddToCatalog(Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary)">
            Adds the version to the Catalog dictionary. 
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfVersionImp.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IElementListener">
            <summary>
            A class that implements ElementListener will perform some
            actions when an Element is added.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IElementListener.Add(Dynamsoft.DotNet.TWAIN.PDF.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <param name="element">Element added</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfNull" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfNull.PDFNULL">
            This is an instance of the <CODE>PdfNull</CODE>-object. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfNull.#ctor" -->
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfArray" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.arrayList">
            this is the actual array of PdfObjects 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.#ctor">
            Constructs an empty <CODE>PdfArray</CODE>-object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Constructs an <CODE>PdfArray</CODE>-object, containing 1 <CODE>PdfObject</CODE>.
            
             @param    object        a <CODE>PdfObject</CODE> that has to be added to the array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.#ctor(System.Collections.ArrayList)">
            Constructs a PdfArray with the elements of an ArrayList.
            Throws a ClassCastException if the ArrayList contains something
            that isn't a PdfObject.
            @param   l   an ArrayList with PdfObjects
            @since 2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfArray)">
             Constructs an <CODE>PdfArray</CODE>-object, containing all the <CODE>PdfObject</CODE>s in a given <CODE>PdfArray</CODE>.
            
             @param    array        a <CODE>PdfArray</CODE> that has to be added to the array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Remove(System.Int32)">
            Remove the element at the specified position from the array.
            
            Shifts any subsequent elements to the left (subtracts one from their
            indices).
            
            @param idx The index of the element to be removed.
            @throws IndexOutOfBoundsException the specified position doesn't exist
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.IsEmpty">
            Returns <CODE>true</CODE> if the array is empty.
            
            @return <CODE>true</CODE> if the array is empty
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Adds a <CODE>PdfObject</CODE> to the <CODE>PdfArray</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to add
             @return        <CODE>true</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Add(System.Int32,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Inserts the specified element at the specified position.
             
             Shifts the element currently at that position (if any) and
             any subsequent elements to the right (adds one to their indices).
            
             @param index The index at which the specified element is to be inserted
             @param element The element to be inserted
             @throws IndexOutOfBoundsException if the specified index is larger than the
               last position currently set, plus 1. 
             @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.AddFirst(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Inserts a <CODE>PdfObject</CODE> at the beginning of the
             <CODE>PdfArray</CODE>.
             
             The <CODE>PdfObject</CODE> will be the first element, any other elements
             will be shifted to the right (adds one to their indices).
            
             @param object The <CODE>PdfObject</CODE> to add
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Contains(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Checks if the <CODE>PdfArray</CODE> allready contains a certain <CODE>PdfObject</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to check
             @return        <CODE>true</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Item(System.Int32)">
            Overwrites a specified location of the array.
            
            @param idx The index of the element to be overwritten
            @param obj new value for the specified index
            @throws IndexOutOfBoundsException if the specified position doesn't exist
            @return the previous value
            @since 2.1.5
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.ArrayList">
             Returns an ArrayList containing <CODE>PdfObject</CODE>s.
            
             @return        an ArrayList
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfArray.Size">
             Returns the number of entries in the array.
            
             @return        the size of the ArrayList
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.BadPasswordException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5 It was written for iText 2.0.8, but moved to another package
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BadPasswordException.#ctor(System.String)">
            Creates an exception saying the user password was incorrect.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField">
             @author blowagie
            
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.TEXT">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.DATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.NUMBER">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.FILENAME">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.DESC">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.MODDATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.CREATIONDATE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.SIZE">
            A possible type of collection field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.fieldType">
            The type of the PDF collection field. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.#ctor(System.String,System.Int32)">
            Creates a PdfCollectionField.
            @param name      the field name
            @param type      the field type
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.IsCollectionItem">
            Checks if the type of the field is suitable for a Collection Item.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.GetValue(System.String)">
            Returns a PdfObject that can be used as the value of a Collection Item.
            @param String    value   the value that has to be changed into a PdfObject (PdfString, PdfDate or PdfNumber) 
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.Order">
            The relative order of the field name. Fields are sorted in ascending order.
            @param i a number indicating the order of the field
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.Visible">
            Sets the initial visibility of the field.
            @param visible   the default is true (visible)
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionField.Editable">
            Indication if the field value should be editable in the viewer.
            @param editable  the default is false (not editable)
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.ImageFilter.Threshold.threshold">
            <summary>
            Threshold value.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.Threshold.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.Threshold"/> class.
            </summary>
            
            <param name="threshold">Threshold value.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.Threshold.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.Clear">
            <summary>
            Clear all objects in the list
            </summary>
            <returns>
            true if at least one object is deleted
            </returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.DeleteSelection">
            <summary>
            Delete selected items
            </summary>
            <returns>
            true if at least one object is deleted
            </returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.MoveSelectionToFront">
            <summary>
            Move selected items to front (beginning of the list)
            </summary>
            <returns>
            true if at least one object is moved
            </returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.MoveSelectionToBack">
            <summary>
            Move selected items to back (end of the list)
            </summary>
            <returns>
            true if at least one object is moved
            </returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.Count">
            <summary>
            Count and this [nIndex] allow to read all graphics objects
            from GraphicsList in the loop.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.GDI.GraphicsList.SelectionCount">
            <summary>
            SelectedCount and GetSelectedObject allow to read
            selected objects in the loop
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument" -->
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Document">
            <summary>
            A generic Document class.
            </summary>
            <remarks>
            All kinds of Text-elements can be added to a HTMLDocument.
            The Document signals all the listeners when an element
            has been added.<p/>
            <OL>
                <LI/>Once a document is created you can add some meta information.
                <LI/>You can also set the headers/footers.
                <LI/>You have to open the document before you can write content.
                <LI/>You can only write content (no more meta-formation!) once a document is opened.
                <LI/>When you change the header/footer on a certain page, this will be effective starting on the next page.
                <LI/>Ater closing the document, every listener (as well as its OutputStream) is closed too.
            </OL>
            </remarks>
            <example>
            <code>
            // creation of the document with a certain size and certain margins
            <strong>Document document = new Document(PageSize.A4, 50, 50, 50, 50);</strong>
            try {
                // creation of the different writers
                HtmlWriter.GetInstance(<strong>document</strong>, System.out);
                PdfWriter.GetInstance(<strong>document</strong>, new FileOutputStream("text.pdf"));
                // we add some meta information to the document
                <strong>document.AddAuthor("Bruno Lowagie");
                document.AddSubject("This is the result of a Test.");</strong>
                
                // we define a header and a footer
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                footer.SetAlignment(Element.ALIGN_CENTER);
                <strong>document.SetHeader(header);
                document.SetFooter(footer);</strong>
                // we open the document for writing
                <strong>document.Open();
                document.Add(new Paragraph("Hello world"));</strong>
            }
            catch (DocumentException de) {
                Console.Error.WriteLine(de.Message);
            }
            <strong>document.Close();</strong>
            </code>
            </example>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IDocListener">
            <summary>
            A class that implements DocListener will perform some
            actions when some actions are performed on a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.IElementListener"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.Open">
            <summary>
            Signals that the Document has been opened and that
            Elements can be added.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
            <remarks>
            The output stream of every writer implementing IDocListener will be closed.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.SetPageSize(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.SetMarginMirroring(System.Boolean)">
            Parameter that allows you to do margin mirroring (odd/even pages)
            @param marginMirroring
            @return true if succesfull
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.SetMarginMirroringTopBottom(System.Boolean)">
            Parameter that allows you to do top/bottom margin mirroring (odd/even pages)
            @param marginMirroringTopBottom
            @return true if successful
            @since	2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IDocListener.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.ITEXT">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.RELEASE">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.ITEXT_VERSION">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.Compress">
            <summary> Allows the pdf documents to be produced without compression for debugging purposes. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.WmfFontCorrection">
            <summary> Scales the WMF font size. The default value is 0.86.  </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.listeners">
            <summary> The IDocListener. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.open">
            <summary> Is the document open or not? </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.close">
            <summary> Has the document allready been closed? </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.pageSize">
            <summary> The size of the page. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.marginLeft">
            <summary> margin in x direction starting from the left </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.marginRight">
            <summary> margin in x direction starting from the right </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.marginTop">
            <summary> margin in y direction starting from the top </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.marginBottom">
            <summary> margin in y direction starting from the bottom </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.marginMirroringTopBottom">
            mirroring of the top/bottom margins
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.javaScript_onLoad">
            <summary> Content of JavaScript onLoad function </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.javaScript_onUnLoad">
            <summary> Content of JavaScript onUnLoad function  </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.htmlStyleClass">
            <summary> Style class in HTML body tag </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.pageN">
            <summary> Current pagenumber </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.chapternumber">
            This is a chapter number in case ChapterAutoNumber is used. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.#ctor">
            <summary>
            Constructs a new Document-object.
            </summary>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddDocListener(Dynamsoft.DotNet.TWAIN.PDF.IDocListener)">
            <summary>
            Adds a IDocListener to the Document.
            </summary>
            <param name="listener">the new IDocListener</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.RemoveIDocListener(Dynamsoft.DotNet.TWAIN.PDF.IDocListener)">
            <summary>
            Removes a IDocListener from the Document.
            </summary>
            <param name="listener">the IDocListener that has to be removed.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.Add(Dynamsoft.DotNet.TWAIN.PDF.IElement)">
            <summary>
            Adds an Element to the Document.
            </summary>
            <param name="element">the Element to add</param>
            <returns>true if the element was added, false if not</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.Open">
            <summary>
            Opens the document.
            </summary>
            <remarks>
            Once the document is opened, you can't write any Header- or Meta-information
            anymore. You have to open the document before you can begin to add content
            to the body of the document.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.SetPageSize(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a bool</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.Close">
            <summary>
            Closes the document.
            </summary>
            <remarks>
            Once all the content has been written in the body, you have to close
            the body. After that nothing can be written to the body anymore.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddTitle(System.String)">
            <summary>
            Adds the title to a Document.
            </summary>
            <param name="title">the title</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddSubject(System.String)">
            <summary>
            Adds the subject to a Document.
            </summary>
            <param name="subject">the subject</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddKeywords(System.String)">
            <summary>
            Adds the keywords to a Document.
            </summary>
            <param name="keywords">keywords to add</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddAuthor(System.String)">
            <summary>
            Adds the author to a Document.
            </summary>
            <param name="author">the name of the author</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddCreator(System.String)">
            <summary>
            Adds the creator to a Document.
            </summary>
            <param name="creator">the name of the creator</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddProducer">
            <summary>
            Adds the producer to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.AddCreationDate(System.String)">
            <summary>
            Adds the current date and time to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.IsOpen">
            <summary>
            Checks if the document is open.
            </summary>
            <returns>true if the document is open</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.Document.SetMarginMirroring(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.Document.SetMarginMirroringTopBottom(System.Boolean)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Document.IsMarginMirroring">
            Gets the margin mirroring flag.
            
            @return the margin mirroring flag
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Document.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.PageNumber">
            <summary>
            Returns the current page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.LeftMargin">
            <summary>
            Returns the left margin.
            </summary>
            <value>the left margin</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.RightMargin">
            <summary>
            Return the right margin.
            </summary>
            <value>the right margin</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.TopMargin">
            <summary>
            Returns the top margin.
            </summary>
            <value>the top margin</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.BottomMargin">
            <summary>
            Returns the bottom margin.
            </summary>
            <value>the bottom margin</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Left">
            <summary>
            Returns the lower left x-coordinate.
            </summary>
            <value>the lower left x-coordinate</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Right">
            <summary>
            Returns the upper right x-coordinate.
            </summary>
            <value>the upper right x-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Top">
            <summary>
            Returns the upper right y-coordinate.
            </summary>
            <value>the upper right y-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Bottom">
            <summary>
            Returns the lower left y-coordinate.
            </summary>
            <value>the lower left y-coordinate.</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.PageSize">
            <summary>
            Gets the pagesize.
            </summary>
            <value>the page size</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Product">
            Gets the product name.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Release">
            Gets the release number.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.Version">
            <summary>
            Gets the iText version.
            </summary>
            <value>iText version</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.JavaScript_onLoad">
            <summary>
            Gets the JavaScript onLoad command.
            </summary>
            <value>the JavaScript onLoad command.</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.JavaScript_onUnLoad">
            <summary>
            Gets the JavaScript onUnLoad command.
            </summary>
            <value>the JavaScript onUnLoad command</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Document.HtmlStyleClass">
            <summary>
            Gets the style class of the HTML body tag
            </summary>
            <value>the style class of the HTML body tag</value>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.#ctor">
            Constructs a new PDF document.
            @throws DocumentException on error
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.writer">
            The <CODE>PdfWriter</CODE>. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.AddWriter(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
             Adds a <CODE>PdfWriter</CODE> to the <CODE>PdfDocument</CODE>.
            
             @param writer the <CODE>PdfWriter</CODE> that writes everything
                                 what is added to this document to an outputstream.
             @throws DocumentException on error
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.text">
            This is the PdfContentByte object, containing the text. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.graphics">
            This is the PdfContentByte object, containing the borders and other Graphics. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.leading">
            This represents the leading of the lines. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.currentHeight">
            This is the current height of the document. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.isSectionTitle">
            Signals that onParagraph is valid (to avoid that a Chapter/Section title is treated as a Paragraph).
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.leadingCount">
            Signals that the current leading has to be subtracted from a YMark object.
            @since 2.1.2
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.alignment">
            This represents the current alignment of the PDF Elements. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.lastElementType">
            Holds the type of the last element, that has been added to the document. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Add(Dynamsoft.DotNet.TWAIN.PDF.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @param element the element to add
             @return <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws DocumentException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Open" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Close" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.NewPage">
             Makes a new page and sends it to the <CODE>PdfWriter</CODE>.
            
             @return a <CODE>bool</CODE>
             @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.SetPageSize(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
             Sets the pagesize.
            
             @param pageSize the new pagesize
             @return <CODE>true</CODE> if the page size was set
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.nextMarginLeft">
            margin in x direction starting from the left. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.nextMarginRight">
            margin in x direction starting from the right. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.nextMarginTop">
            margin in y direction starting from the top. Will be valid in the next page 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.nextMarginBottom">
            margin in y direction starting from the bottom. Will be valid in the next page 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the margins.
            
             @param    marginLeft      the margin on the left
             @param    marginRight     the margin on the right
             @param    marginTop       the margin on the top
             @param    marginBottom    the margin on the bottom
             @return   a <CODE>bool</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.SetMarginMirroring(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(bool)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since    2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.ResetPageCount">
            Sets the page number to 0.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.firstPageEvent">
            Signals that OnOpenDocument should be called. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.InitPage" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.info">
            some meta information about the Document. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.GetCatalog(Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
             Gets the <CODE>PdfCatalog</CODE>-object.
            
             @param pages an indirect reference to this document pages
             @return <CODE>PdfCatalog</CODE>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.viewerPreferences">
            Contains the Viewer preferences of this PDF document. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.AddViewerPreference(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName, com.lowagie.text.pdf.PdfObject) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.nextPageSize">
            This is the size of the next page. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.thisBoxSize">
            This is the size of the several boxes of the current Page. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.boxSize">
            This is the size of the several boxes that will be used in
            the next page. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.pageEmpty">
            This checks if the page is empty. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.strictImageSequence">
            Holds value of property strictImageSequence. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.imageEnd">
            This is the position where the image ends. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.imageWait">
            This is the image that could not be shown on a previous page. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Add(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            Adds an image to the document.
            @param image the <CODE>Image</CODE> to add
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Leading">
            Getter for the current leading.
            @return  the current leading
            @since   2.1.2
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PageCount">
             Sets the page number.
            
             @param    pageN       the new page number
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.IndentLeft">
             Gets the indentation on the left side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.IndentRight">
             Gets the indentation on the right side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.IndentTop">
             Gets the indentation on the top side.
            
             @return   a margin
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.IndentBottom">
             Gets the indentation on the bottom side.
            
             @return   a margin
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Info" -->
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.ViewerPreferences">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int) 
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.StrictImageSequence">
            Setter for property strictImageSequence.
             @param strictImageSequence New value of property strictImageSequence.
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.#ctor">
            Construct a <CODE>PdfInfo</CODE>-object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.#ctor(System.String,System.String,System.String)">
             Constructs a <CODE>PdfInfo</CODE>-object.
            
             @param        author      name of the author of the document
             @param        title       title of the document
             @param        subject     subject of the document
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddTitle(System.String)">
             Adds the title of the document.
            
             @param    title       the title of the document
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddSubject(System.String)">
             Adds the subject to the document.
            
             @param    subject     the subject of the document
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddKeywords(System.String)">
             Adds some keywords to the document.
            
             @param    keywords        the keywords of the document
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddAuthor(System.String)">
             Adds the name of the author to the document.
            
             @param    author      the name of the author
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddCreator(System.String)">
             Adds the name of the creator to the document.
            
             @param    creator     the name of the creator
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddProducer">
            Adds the name of the producer to the document.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfInfo.AddCreationDate">
            Adds the date of creation to the document.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfCatalog" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfCatalog.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
             Constructs a <CODE>PdfCatalog</CODE>.
            
             @param        pages       an indirect reference to the root of the document's Pages tree.
             @param writer the writer the catalog applies to
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfCatalog.AddNames(Dynamsoft.DotNet.TWAIN.PDF.OrderedTree,System.Collections.Hashtable,System.Collections.Hashtable,Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
            Adds the names of the named destinations to the catalog.
            @param localDestinations the local destinations
            @param documentJavaScript the javascript used in the document
            @param writer the writer the catalog applies to
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.PdfCatalog.AdditionalActions">
            Sets the document level additional actions.
            @param actions   dictionary of actions
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.indentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.sectionIndentLeft">
            Indentation to the left caused by a section. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.listIndentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.imageIndentLeft">
            This is the indentation caused by an image on the left. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.indentRight">
            This represents the current indentation of the PDF Elements on the right side. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.sectionIndentRight">
            Indentation to the right caused by a section. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.imageIndentRight">
            This is the indentation caused by an image on the right. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.indentTop">
            This represents the current indentation of the PDF Elements on the top side. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDocument.Indentation.indentBottom">
            This represents the current indentation of the PDF Elements on the bottom side. 
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Add(System.IComparable,System.Object)">
            <summary>
             Add
             args: ByVal key As IComparable, ByVal data As Object
             key is object that implements IComparable interface
             performance tip: change to use use int type (such as the hashcode)
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RestoreAfterInsert(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode)">
            <summary>
             RestoreAfterInsert
             Additions to red-black trees usually destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RotateLeft(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode)">
            <summary>
             RotateLeft
             Rebalance the tree by rotating the nodes to the left
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RotateRight(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode)">
            <summary>
             RotateRight
             Rebalance the tree by rotating the nodes to the right
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetData(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetMinKey" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetMaxKey" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetMinValue" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetMaxValue" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Elements" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.IsEmpty" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Remove(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Delete(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RestoreAfterDelete(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode)">
            <summary>
             RestoreAfterDelete
             Deletions from red-black trees may destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RemoveMin" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.RemoveMax" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Clear" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Keys" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTree.Values" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.#ctor(Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode,System.Boolean,System.Boolean)">
            <summary>
             Determine order, walk the tree and push the nodes onto the stack
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.HasMoreElements">
            <summary>
             HasMoreElements
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.NextElement">
            <summary>
             NextElement
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.MoveNext">
            <summary>
             MoveNext
             For .NET compatibility
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeEnumerator.Value">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.OrderedTreeNode.Right">
            <summary>
             Right
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfNameTree">
            Creates a name tree.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfNameTree.IterateItems(Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary,System.Collections.Hashtable)">
            Creates a name tree.
            @param items the item of the name tree. The key is a <CODE>String</CODE>
            and the value is a <CODE>PdfObject</CODE>. Note that although the
            keys are strings only the lower byte is used and no check is made for chars
            with the same lower byte and different upper byte. This will generate a wrong
            tree name.
            @param writer the writer
            @throws IOException on error
            @return the dictionary with the name tree. This dictionary is the one
            generally pointed to by the key /Dests, for example
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage">
            <summary>
            Summary description for UnmanagedImage.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage"/> class.
            </summary>
            
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage"/> class.
            </summary>
            
            <param name="bitmapData">Locked bitmap data.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage"/> class.
            </summary>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Create(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Clone">
            <summary>
            Clone the unmanaged images.
            </summary>
            
            <returns>Returns clone of the unmanaged image.</returns>
            
            <remarks><para>The method does complete cloning of the object.</para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Copy(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Copy unmanaged image.
            </summary>
            
            <param name="destImage">Destination image to copy this image to.</param>
            
            <remarks><para>The method copies current unmanaged image to the specified image.
            Size and pixel format of the destination image must be exactly the same.</para></remarks>
            
            <exception cref="!:InvalidImagePropertiesException">Destination image has different size or pixel format.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Create(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Allocate new image in unmanaged memory.
            </summary>
            
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="pixelFormat">Image pixel format.</param>
            
            <returns>Return image allocated in unmanaged memory.</returns>
            
            <remarks><para>Allocate new image with specified attributes in unmanaged memory.</para>
            
            <para><note>The method supports only
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>,
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format16bppGrayScale</see>,
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format24bppRgb</see>,
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format32bppRgb</see>,
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format32bppArgb</see>,
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format48bppRgb</see> and
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format64bppArgb</see> pixel formats.
            In the case if <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            format is specified, pallete is not not created for the image (supposed that it is
            8 bpp grayscale image).
            </note></para>
            </remarks>
            
            <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format was specified.</exception>
            <exception cref="!:InvalidImagePropertiesException">Invalid image size was specified.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.ToManagedImage">
            <summary>
            Create managed image from the unmanaged.
            </summary>
            
            <returns>Returns managed copy of the unmanaged image.</returns>
            
            <remarks><para>The method creates a managed copy of the unmanaged image with the
            same size and pixel format.</para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.SetGrayscalePalette(System.Drawing.Bitmap)">
            <summary>
            Set pallete of the 8 bpp indexed image to grayscale.
            </summary>
            
            <param name="image">Image to initialize.</param>
            
            <remarks>The method initializes palette of
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with 256 gradients of gray color.</remarks>
            
            <exception cref="!:UnsupportedImageFormatException">Provided image is not 8 bpp indexed image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.FromManagedImage(System.Drawing.Bitmap)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            
            <param name="image">Source managed image.</param>
            
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory.</para></remarks>
            
            <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of source image.</exception>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.FromManagedImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            
            <param name="imageData">Source locked image data.</param>
            
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory.</para></remarks>
            
            <exception cref="!:UnsupportedImageFormatException">Unsupported pixel format of source image.</exception>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.ImageData">
            <summary>
            Pointer to image data in unmanaged memory.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Width">
            <summary>
            Image width in pixels.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Height">
            <summary>
            Image height in pixels.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.Stride">
            <summary>
            Image stride (line size in bytes).
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage.PixelFormat">
            <summary>
            Image pixel format.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor">
             <summary>
             Rotate image using nearest neighbor algorithm.
             </summary>
             
             <remarks><para>The class implements image rotation filter using nearest
             neighbor algorithm, which does not assume any interpolation.</para>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <para>The filter accepts 8 bpp grayscale images and 24 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateNearestNeighbor filter = new RotateNearestNeighbor( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_nearest.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear"/>
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic"/>
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.KeepSize"/> property to
            <see langword="false"/>.
            </para></remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor.FormatTransalations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Web.HttpClient">
            <summary>
            Summary description for HttpClient.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.HttpClient.HTTPUsername">
            <summary>
            Gets and Sets the username.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.HttpClient.HTTPPassword">
            <summary>
            Gets and Set the password.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.HttpClient.HTTPPort">
            <summary>
            Remote server port. Typically TCP 21
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.HttpClient.HTTPServer">
            <summary>
            Gets and Sets the name of the FTP server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Web.HttpClient.IFSSL">
            <summary>
            Gets and Sets ifssl.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfReaderInstance">
             Instance of PdfReader in each output document.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PageSize">
            <summary>
            The PageSize-object contains a number of read only rectangles representing the most common paper sizes.
            </summary>
            <seealso cref="T:iTextSharp.text.RectangleReadOnly"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.LETTER">
            This is the letter format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.NOTE">
            This is the note format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.LEGAL">
            This is the legal format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.TABLOID">
            This is the tabloid format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.EXECUTIVE">
            This is the executive format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.POSTCARD">
            This is the postcard format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A0">
            This is the a0 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A1">
            This is the a1 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A2">
            This is the a2 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A3">
            This is the a3 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A4">
            This is the a4 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A5">
            This is the a5 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A6">
            This is the a6 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A7">
            This is the a7 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A8">
            This is the a8 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A9">
            This is the a9 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.A10">
            This is the a10 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B0">
            This is the b0 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B1">
            This is the b1 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B2">
            This is the b2 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B3">
            This is the b3 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B4">
            This is the b4 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B5">
            This is the b5 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B6">
            This is the b6 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B7">
            This is the b7 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B8">
            This is the b8 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B9">
            This is the b9 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.B10">
            This is the b10 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ARCH_E">
            This is the archE format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ARCH_D">
            This is the archD format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ARCH_C">
            This is the archC format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ARCH_B">
            This is the archB format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ARCH_A">
            This is the archA format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.FLSA">
            This is the American Foolscap format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.FLSE">
            This is the European Foolscap format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.HALFLETTER">
            This is the halfletter format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize._11X17">
            This is the 11x17 format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ID_1">
            This is the ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ID_2">
            This is the ISO 7810 ID-2 format (A7 rotated) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ID_3">
            This is the ISO 7810 ID-3 format (B7 rotated) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.LEDGER">
            This is the ledger format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.CROWN_QUARTO">
            This is the Crown Quarto format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.LARGE_CROWN_QUARTO">
            This is the Large Crown Quarto format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.DEMY_QUARTO">
            This is the Demy Quarto format. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ROYAL_QUARTO">
            This is the Royal Quarto format. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.CROWN_OCTAVO">
            This is the Crown Octavo format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.LARGE_CROWN_OCTAVO">
            This is the Large Crown Octavo format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.DEMY_OCTAVO">
            This is the Demy Octavo format 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.ROYAL_OCTAVO">
            This is the Royal Octavo format. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.SMALL_PAPERBACK">
            This is the small paperback format. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.PENGUIN_SMALL_PAPERBACK">
            This is the Pengiun small paperback format. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PageSize.PENGUIN_LARGE_PAPERBACK">
            This is the Penguin large paparback format. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PageSize.GetRectangle(System.String)">
            This method returns a Rectangle based on a String.
            Possible values are the the names of a constant in this class
            (for instance "A4", "LETTER",...) or a value like "595 842"
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfLiteral">
            a Literal
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.TRUE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.FALSE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.value">
            the bool value of this object 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.#ctor(System.Boolean)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.#ctor(System.String)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>, represented as a <CODE>string</CODE>
            
             @throws        BadPdfFormatException    thrown if the <VAR>value</VAR> isn't '<CODE>true</CODE>' or '<CODE>false</CODE>'
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfBoolean.BooleanValue">
             Returns the primitive value of the <CODE>PdfBoolean</CODE>-object.
            
             @return        the actual value of the object.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp">
            Stores the information concerning viewer preferences,
            and contains the business logic that allows you to set viewer preferences.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.viewerPreferencesMask">
            The mask to decide if a ViewerPreferences dictionary is needed 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.NONFULLSCREENPAGEMODE_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.DIRECTION_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.PAGE_BOUNDARIES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.PRINTSCALING_PREFERENCES">
            A series of viewer preferences 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.DUPLEX_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.pageLayoutAndMode">
            This value will hold the viewer preferences for the page layout and page mode. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.viewerPreferences">
            This dictionary holds the viewer preferences (other than page layout and page mode). 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.GetViewerPreferences">
            Returns the viewer preferences.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.GetIndex(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            Given a key for a viewer preference (a PdfName object),
            this method returns the index in the VIEWER_PREFERENCES array.
            @param key    a PdfName referring to a viewer preference
            @return   an index in the VIEWER_PREFERENCES array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.IsPossibleValue(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfName[])">
            Checks if some value is valid for a certain key.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.AddViewerPreference(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Sets the viewer preferences for printing.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.AddToCatalog(Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary)">
            Adds the viewer preferences defined in the preferences parameter to a
            PdfDictionary (more specifically the root or catalog of a PDF file).
            
            @param catalog
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.PageLayoutAndMode">
            Returns the page layout and page mode value.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfViewerPreferencesImp.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            
            @param preferences
                       the viewer preferences
            @see PdfWriter#setViewerPreferences
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotationsImp.annotations">
            This is the array containing the references to annotations
            that were added to the document.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotationsImp.delayedAnnotations">
            This is an array containg references to some delayed annotations
            (that were added for a page that doesn't exist yet).
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.isBigEndian">
            A bool storing the endianness of the stream. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.numEntries">
            The number of entries in the IFD. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.fields">
            An array of TIFFFields. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.fieldIndex">
            A Hashtable indexing the fields by tag number. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.IFDOffset">
            The offset of this IFD. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.nextIFDOffset">
            The offset of the next IFD. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.#ctor">
            The default constructor. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.#ctor(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray,System.Int32)">
             Constructs a TIFFDirectory from a SeekableStream.
             The directory parameter specifies which directory to read from
             the linked list present in the stream; directory 0 is normally
             read but it is possible to store multiple images in a single
             TIFF file by maintaing multiple directories.
            
             @param stream a SeekableStream to read from.
             @param directory the index of the directory to read.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.#ctor(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray,System.Int64,System.Int32)">
             Constructs a TIFFDirectory by reading a SeekableStream.
             The ifd_offset parameter specifies the stream offset from which
             to begin reading; this mechanism is sometimes used to store
             private IFDs within a TIFF file that are not part of the normal
             sequence of IFDs.
            
             @param stream a SeekableStream to read from.
             @param ifd_offset the long byte offset of the directory.
             @param directory the index of the directory to read beyond the
                    one at the current stream offset; zero indicates the IFD
                    at the current offset.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetNumEntries">
            Returns the number of directory entries. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetField(System.Int32)">
            Returns the value of a given tag as a TIFFField,
            or null if the tag is not present.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.IsTagPresent(System.Int32)">
            Returns true if a tag appears in the directory.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetTags">
            Returns an ordered array of ints indicating the tag
            values.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFields">
            Returns an array of TIFFFields containing all the fields
            in this directory.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsByte(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsByte(System.Int32)">
            Returns the value of index 0 of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has  type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsLong(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsLong(System.Int32)">
            Returns the value of index 0 of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsFloat(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            float.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsFloat(System.Int32)">
            Returns the value of index 0 of a given tag as a float.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsDouble(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            double.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetFieldAsDouble(System.Int32)">
            Returns the value of index 0 of a given tag as a double.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetNumDirectories(Dynamsoft.DotNet.TWAIN.PDF.RandomAccessFileOrArray)">
            Returns the number of image directories (subimages) stored in a
            given TIFF file, represented by a <code>SeekableStream</code>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.IsBigEndian">
            Returns a bool indicating whether the byte order used in the
            the TIFF file is big-endian (i.e. whether the byte order is from
            the most significant to the least significant)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetIFDOffset">
            Returns the offset of the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFDirectory.GetNextIFDOffset">
            Returns the offset of the next IFD after the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder">
            Encodes data in the CCITT G4 FAX format.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder.#ctor(System.Int32)">
            Creates a new encoder.
            @param width the line width
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32,System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param offset the offset into the data
            @param size the size of the data to be encoded
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder.Compress(System.Byte[],System.Int32,System.Int32)">
            Encodes a full image.
            @param data the data to encode
            @param width the image width
            @param height the image height
            @return the encoded image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param height the number of lines to encode
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.CCITTG4Encoder.Close">
            Closes the encoder and returns the encoded data.
            @return the encoded data
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.CancelDialog">
            <summary>
            Summary description for CancelDialog.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.CancelDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.CancelDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.CancelDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Cancel">
            <summary>
            Implements the ICancel interface.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.ICancel">
            <summary>
            Provides the cancel interface for event OnInternetTransferPercentage.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.ICancel.Cancelled">
            <summary>
            If you want to cancel upload or download, please set its value as true.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_VERSION">
            <summary>
            /* No DAT needed.  Describes version of software currently running. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_HANDLE">
            <summary>
            Memory handle define
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_FIX32">
            <summary>
            /* Fixed point structure type. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_EVENT">
            <summary>
            /* DAT_EVENT. For passing events down from the application to the DS. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_FRAME">
            <summary>
            /* No DAT.  Defines a frame rectangle in ICAP_UNITS coordinates. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_ONEVALUE">
            <summary>
            /* TWON_ONEVALUE. Container for one value. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_MEMORY">
            <summary>
            /* No DAT needed.  Used to manage memory buffers. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_ELEMENT8">
            <summary>
            /* No DAT needed. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TWDSMEntry.Twain32Import">
            <summary>
            Import twain_32.dll
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TWDSMEntry.TwainDSMImport">
            <summary>
            Import twaindsm.dll
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter">
            A <CODE>DocWriter</CODE> class for PDF.
            <P>
            When this <CODE>PdfWriter</CODE> is added
            to a certain <CODE>PdfDocument</CODE>, the PDF representation of every Element
            added to this Document will be written to the outputstream.</P>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.DocWriter">
            <summary>
            An abstract Writer class for documents.
            </summary>
            <remarks>
            DocWriter is the abstract class of several writers such
            as PdfWriter and HtmlWriter.
            A DocWriter can be added as a DocListener
            to a certain Document by getting an instance (see method
            GetInstance() in the specific writer-classes).
            Every Element added to the original Document
            will be written to the stream of the listening
            DocWriter.
            </remarks>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.NEWLINE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.TAB">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.LT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.SPACE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.EQUALS">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.QUOTE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.GT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.FORWARD">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.pageSize">
            <summary> The pageSize. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.document">
            <summary> This is the document that has to be written. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.os">
            <summary> The stream of this writer. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.open">
            <summary> Is the writer open for writing? </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.pause">
            <summary> Do we have to pause all writing actions? </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.closeStream">
            Closes the stream on document close 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Document,System.IO.Stream)">
            <summary>
            Constructs a DocWriter.
            </summary>
            <param name="document">The Document that has to be written</param>
            <param name="os">The Stream the writer has to write to.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Add(Dynamsoft.DotNet.TWAIN.PDF.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class.
            </remarks>
            <param name="element"></param>
            <returns>false</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Open">
            <summary>
            Signals that the Document was opened.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.SetPageSize(Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.GetISOBytes(System.String)">
            <summary>
            Converts a string into a Byte array
            according to the ISO-8859-1 codepage.
            </summary>
            <param name="text">the text to be converted</param>
            <returns>the conversion result</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Pause">
            <summary>
            Let the writer know that all writing has to be paused.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.IsPaused">
             Checks if writing is paused.
            
             @return       <CODE>true</CODE> if writing temporarely has to be paused, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Resume">
            <summary>
            Let the writer know that writing may be resumed.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Flush">
            <summary>
            Flushes the Stream.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="str">the string to write</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.AddTabs(System.Int32)">
            <summary>
            Writes a number of tabs.
            </summary>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.Write(System.String,System.String)">
            <summary>
            Writes a key-value pair to the stream.
            </summary>
            <param name="key">the name of an attribute</param>
            <param name="value">the value of an attribute</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.WriteStart(System.String)">
            <summary>
            Writes a starttag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.WriteEnd(System.String)">
            <summary>
            Writes an endtag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.WriteEnd">
            <summary>
            Writes an endtag to the stream.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.WriteMarkupAttributes(Dynamsoft.DotNet.TWAIN.PDF.Properties)">
            <summary>
            Writes the markup attributes of the specified MarkupAttributes
            object to the stream.
            </summary>
            <param name="mAtt">the MarkupAttributes to write.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since	2.1.6
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.DocWriter.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GENERATION_MAX">
            The highest generation number possible.
            @since   iText 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_2">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_3">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_4">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_5">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_6">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.VERSION_1_7">
            possible PDF version (header) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutSinglePage">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutOneColumn">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutTwoColumnLeft">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutTwoColumnRight">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutTwoPageLeft">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageLayoutTwoPageRight">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeFullScreen">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageModeUseAttachments">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.HideToolbar">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.HideMenubar">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.HideWindowUI">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.FitWindow">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.CenterWindow">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DisplayDocTitle">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.NonFullScreenPageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.NonFullScreenPageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.NonFullScreenPageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.NonFullScreenPageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DirectionL2R">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DirectionR2L">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PrintScalingNone">
            A viewer preference 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.fullCompression">
            Holds value of property fullCompression.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.#ctor">
            Constructs a <CODE>PdfWriter</CODE>.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfDocument,System.IO.Stream)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetInstance(Dynamsoft.DotNet.TWAIN.PDF.Document,System.IO.Stream)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @param    document    The <CODE>Document</CODE> that has to be written
             @param    os  The <CODE>Stream</CODE> the writer has to write to.
             @return   a new <CODE>PdfWriter</CODE>
            
             @throws   DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetInstance(Dynamsoft.DotNet.TWAIN.PDF.Document,System.IO.Stream,Dynamsoft.DotNet.TWAIN.PDF.IDocListener)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @return a new <CODE>PdfWriter</CODE>
             @param document The <CODE>Document</CODE> that has to be written
             @param os The <CODE>Stream</CODE> the writer has to write to.
             @param listener A <CODE>DocListener</CODE> to pass to the PdfDocument.
             @throws DocumentException on error
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.pdf">
            the pdfdocument object. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.directContent">
            The direct content in this document. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.directContentUnder">
            The direct content under in this document. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.ResetContent">
            Resets all the direct contents to empty.
            This happens when a new page is started.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.body">
            body of the PDF document 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddLocalDestinations(Dynamsoft.DotNet.TWAIN.PDF.OrderedTree)">
            Adds the local destinations to the body of the document.
            @param dest the <CODE>Hashtable</CODE> containing the destinations
            @throws IOException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Adds an object to the PDF body.
            @param object
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,System.Int32)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddToBody(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,System.Int32,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.extraCatalog">
            Holds value of property extraCatalog. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.root">
            The root of the page tree. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.pageReferences">
            The PdfIndirectReference to the pages. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.currentPageNumber">
            The current page number. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.tabs">
            The value of the Tabs entry in the page dictionary.
            @since   2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.SetLinearPageMode">
            Use this method to make sure the page tree has a lineair structure
            (every leave is attached directly to the root).
            Use this method to allow page reordering with method reorderPages.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.ReorderPages(System.Int32[])">
            Use this method to reorder the pages in the document.
            A <CODE>null</CODE> argument value only returns the number of pages to process.
            It is advisable to issue a <CODE>Document.newPage()</CODE> before using this method.
            @return the total number of pages
            @param order an array with the new page sequence. It must have the
            same size as the number of pages.
            @throws DocumentException if all the pages are not present in the array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetPageReference(System.Int32)">
            Use this method to get a reference to a page existing or not.
            If the page does not exist yet the reference will be created
            in advance. If on closing the document, a page number greater
            than the total number of pages was requested, an exception
            is thrown.
            @param page the page number. The first page is 1
            @return the reference to the page
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_2">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_3">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_4">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_5">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_6">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PDF_VERSION_1_7">
            possible PDF version (catalog) 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.pdf_version">
            Stores the version information for the header and the catalog. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.SetPdfVersion(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetPdfVersion">
            Returns the version information.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.prevxref">
            A number refering to the previous Cross-Reference Table. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Open" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Close" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddViewerPreference(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Adds a viewer preference
            @param preferences the viewer preferences
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.SetBoxSize(System.String,Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
            Sets the page box sizes. Allowed names are: "crop", "trim", "art" and "bleed".
            @param boxName the box size
            @param size the size
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.SetDefaultColorspace(Dynamsoft.DotNet.TWAIN.PDF.PdfName,Dynamsoft.DotNet.TWAIN.PDF.PdfObject)" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.imageDictionary">
            Dictionary, containing all the images of the PDF document 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.images">
            This is the list with all the images in the document. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddDirectImageSimple(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddDirectImageSimple(Dynamsoft.DotNet.TWAIN.PDF.Images.Image,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @param fixedRef the reference to used. It may be <CODE>null</CODE>,
            a <CODE>PdfIndirectReference</CODE> or a <CODE>PRIndirectReference</CODE>.
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfImage,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
             Writes a <CODE>PdfImage</CODE> to the outputstream.
            
             @param pdfImage the image to be added
             @return a <CODE>PdfIndirectReference</CODE> to the encapsulated image
             @throws PdfException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfPage,Dynamsoft.DotNet.TWAIN.PDF.PdfContents)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.GetImageReference(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
             return the <CODE>PdfIndirectReference</CODE> to the image with a given name.
            
             @param name the name of the image
             @return a <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.rgbTransparencyBlending">
            Holds value of property RGBTranparency.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.AddAnnotation(Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation)">
            Adds a <CODE>PdfAnnotation</CODE> or a <CODE>PdfFormField</CODE>
            to the document. Only the top parent of a <CODE>PdfFormField</CODE>
            needs to be added.
            @param annot the <CODE>PdfAnnotation</CODE> or the <CODE>PdfFormField</CODE> to add
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> associated with this writer.
            @return the <CODE>PdfDocument</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Info">
            Use this method to get the info dictionary if you want to
            change it directly (add keys and values to the info dictionary).
            @return the info dictionary
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DirectContent">
            Use this method to get the direct content for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DirectContentUnder">
            Use this method to get the direct content under for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfIndirectReference">
            Gets a <CODE>PdfIndirectReference</CODE> for an object that
            will be created in the future.
            @return the <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Os">
            Returns the outputStreamCounter.
            @return the outputStreamCounter
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.ExtraCatalog">
            Sets extra keys to the catalog.
            @return the catalog to change
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageNumber">
            Gets the pagenumber of this document.
            This number can be different from the real pagenumber,
            if you have (re)set the page number previously.
            @return a page number
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.Tabs">
            Sets the value for the Tabs entry in the page tree.
            @param	tabs	Can be PdfName.R, PdfName.C or PdfName.S.
            Since the Adobe Extensions Level 3, it can also be PdfName.A
            or PdfName.W
            @since	2.1.5
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.CurrentDocumentSize">
            Gets the current document size. This size only includes
            the data already writen to the output stream, it does not
            include templates or fonts. It is usefull if used with
            <CODE>freeReader()</CODE> when concatenating many documents
            and an idea of the current size is needed.
            @return the approximate size without fonts or templates
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageSize">
            Gives the size of the media box.
            @return a Rectangle
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.CropBoxSize">
            Sets the crop box. The crop box should not be rotated even if the
            page is rotated. This change only takes effect in the next
            page.
            @param crop the crop box
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PageEmpty">
            If you use SetPageEmpty(false), invoking NewPage() after a blank page will add a newPage.
            @param pageEmpty the state
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.DefaultColorspace">
            Gets the default colorspaces.
            @return the default colorspaces
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.StrictImageSequence">
            Sets the image sequence to follow the text in strict order.
             @param strictImageSequence new value of property strictImageSequence
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.RgbTransparencyBlending">
            Sets the transparency blending colorspace to RGB. The default blending colorspace is
            CMYK and will result in faded colors in the screen and in printing. Calling this method
            will return the RGB colors to what is expected. The RGB blending will be applied to all subsequent pages
            until other value is set.
            Note that this is a generic solution that may not work in all cases.
            @param rgbTransparencyBlending <code>true</code> to set the transparency blending colorspace to RGB, <code>false</code>
            to use the default blending colorspace
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.CompressionLevel">
            Sets the compression level to be used for streams written by this writer.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.xrefs">
            array containing the cross-reference table of the normal objects. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.position">
            the current byteposition in the body. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
            Constructs a new <CODE>PdfBody</CODE>.
            @param writer
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.WriteCrossReferenceTable(System.IO.Stream,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfObject,System.Int32)">
            Returns the CrossReferenceTable of the <CODE>Body</CODE>.
            @param os
            @param root
            @param info
            @param encryption
            @param fileID
            @param prevxref
            @throws IOException
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfIndirectReference">
            Gets a PdfIndirectReference for an object that will be created in the future.
            @return a PdfIndirectReference
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.Offset">
             Returns the offset of the Cross-Reference table.
            
             @return       an offset
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.Size">
             Returns the total number of objects contained in the CrossReferenceTable of this <CODE>Body</CODE>.
            
             @return   a number of objects
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference">
            <CODE>PdfCrossReference</CODE> is an entry in the PDF Cross-Reference table.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.offset">
            Byte offset in the PDF file. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.generation">
            generation of the object. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
            @param    generation  generationnumber of the object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param os
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.Int32,System.IO.Stream)">
            Writes PDF syntax to the Stream
            @param midSize
            @param os
            @throws IOException
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.CompareTo(System.Object)">
            @see java.lang.Comparable#compareTo(java.lang.Object)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfBody.PdfCrossReference.Equals(System.Object)">
            @see java.lang.Object#equals(java.lang.Object)
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfTrailer" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfTrailer.#ctor(System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference,Dynamsoft.DotNet.TWAIN.PDF.PdfObject,System.Int32)">
             Constructs a PDF-Trailer.
            
             @param        size        the number of entries in the <CODE>PdfCrossReferenceTable</CODE>
             @param        offset      offset of the <CODE>PdfCrossReferenceTable</CODE>
             @param        root        an indirect reference to the root of the PDF document
             @param        info        an indirect reference to the info object of the PDF document
             @param encryption
             @param fileID
             @param prevxref
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfWriter.PdfTrailer.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param writer
            @param os
            @throws IOException
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte">
            <CODE>PdfContentByte</CODE> is an object containing the user positioned
            text and graphic contents of a page. It knows how to apply the proper
            font encoding.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.ALIGN_CENTER">
            The alignement is center 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.ALIGN_LEFT">
            The alignement is left 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.ALIGN_RIGHT">
            The alignement is right 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_CAP_BUTT">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_CAP_ROUND">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_CAP_PROJECTING_SQUARE">
            A possible line cap value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_JOIN_MITER">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_JOIN_ROUND">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.LINE_JOIN_BEVEL">
            A possible line join value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_INVISIBLE">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.TEXT_RENDER_MODE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.content">
            This is the actual content 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.writer">
            This is the writer 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.pdf">
            This is the PdfDocument 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.layerDepth">
            The list were we save/restore the layer depth 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.stateList">
            The list were we save/restore the state 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.separator">
            The separator between commands.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
             Constructs a new <CODE>PdfContentByte</CODE>-object.
            
             @param wr the writer associated to this content
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.ToString">
             Returns the <CODE>string</CODE> representation of this <CODE>PdfContentByte</CODE>-object.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
            Returns the PDF representation of this <CODE>PdfContentByte</CODE>-object.
            
             @param writer the <CODE>PdfWriter</CODE>
             @return a <CODE>byte</CODE> array with the representation
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte)">
             Adds the content of another <CODE>PdfContent</CODE>-object to this object.
            
             @param       other       another <CODE>PdfByteContent</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.AddImage(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning.
            @param image the <CODE>Image</CODE> object
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.AddImage(Dynamsoft.DotNet.TWAIN.PDF.Images.Image,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning. The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.AddImage(Dynamsoft.DotNet.TWAIN.PDF.Images.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y).
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.AddImage(Dynamsoft.DotNet.TWAIN.PDF.Images.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException on error
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.Reset">
            Makes this <CODE>PdfContentByte</CODE> empty.
            Calls <code>reset( true )</code>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.Reset(System.Boolean)">
            Makes this <CODE>PdfContentByte</CODE> empty.
            @param validateContent will call <code>sanityCheck()</code> if true.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.EscapeString(System.Byte[])">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
             @return an escaped <CODE>byte</CODE> array
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.EscapeString(System.Byte[],Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer)">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.CheckWriter">
            Check if we have a valid PdfWriter.
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.InternalBuffer">
            Gets the internal buffer.
            @return the internal buffer
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.Size">
             Gets the size of this content.
            
             @return the size of the content
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.PdfWriter">
            Gets the <CODE>PdfWriter</CODE> in use by this object.
            @return the <CODE>PdfWriter</CODE> in use by this object
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> in use by this object.
            @return the <CODE>PdfDocument</CODE> in use by this object
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfColor">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a new <CODE>PdfColor</CODE>.
            
             @param        red            a value between 0 and 255
             @param        green        a value between 0 and 255
             @param        blue        a value between 0 and 255
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation">
             A <CODE>PdfAnnotation</CODE> is a note that is associated with a page.
            
             @see     PdfDictionary
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.MARKUP_SQUIGGLY">
            attributevalue 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.used">
            Holds value of property used. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.placeInPage">
            Holds value of property placeInPage. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.Single,System.Single,System.Single,System.Single,Dynamsoft.DotNet.TWAIN.PDF.PdfString,Dynamsoft.DotNet.TWAIN.PDF.PdfString)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype text.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.SetHighlighting(Dynamsoft.DotNet.TWAIN.PDF.PdfName)">
            Sets the annotation's highlighting mode. The values can be
            <CODE>HIGHLIGHT_NONE</CODE>, <CODE>HIGHLIGHT_INVERT</CODE>,
            <CODE>HIGHLIGHT_OUTLINE</CODE> and <CODE>HIGHLIGHT_PUSH</CODE>;
            @param highlight the annotation's highlighting mode
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.IsForm">
            Getter for property form.
            @return Value of property form.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.IsAnnotation">
            Getter for property annotation.
            @return Value of property annotation.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.PlaceInPage">
            Getter for property placeInPage.
            @return Value of property placeInPage.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.Name">
            Sets the name of the annotation.
            With this name the annotation can be identified among
            all the annotations on a page (it has to be unique).
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.PdfImportedLink">
            This class processes links from imported pages so that they may be active. The following example code reads a group
            of files and places them all on the output PDF, four pages in a single page, keeping the links active.
            <pre>
            String[] files = new String[] {&quot;input1.pdf&quot;, &quot;input2.pdf&quot;};
            String outputFile = &quot;output.pdf&quot;;
            int firstPage=1;
            Document document = new Document();
            PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream(outputFile));
            document.SetPageSize(PageSize.A4);
            float W = PageSize.A4.GetWidth() / 2;
            float H = PageSize.A4.GetHeight() / 2;
            document.Open();
            PdfContentByte cb = writer.GetDirectContent();
            for (int i = 0; i &lt; files.length; i++) {
               PdfReader currentReader = new PdfReader(files[i]);
               currentReader.ConsolidateNamedDestinations();
               for (int page = 1; page &lt;= currentReader.GetNumberOfPages(); page++) {
                   PdfImportedPage importedPage = writer.GetImportedPage(currentReader, page);
                   float a = 0.5f;
                   float e = (page % 2 == 0) ? W : 0;
                   float f = (page % 4 == 1 || page % 4 == 2) ? H : 0;
                   ArrayList links = currentReader.GetLinks(page);
                   cb.AddTemplate(importedPage, a, 0, 0, a, e, f);
                   for (int j = 0; j &lt; links.Size(); j++) {
                       PdfAnnotation.PdfImportedLink link = (PdfAnnotation.PdfImportedLink)links.Get(j);
                       if (link.IsInternal()) {
                           int dPage = link.GetDestinationPage();
                           int newDestPage = (dPage-1)/4 + firstPage;
                           float ee = (dPage % 2 == 0) ? W : 0;
                           float ff = (dPage % 4 == 1 || dPage % 4 == 2) ? H : 0;
                           link.SetDestinationPage(newDestPage);
                           link.TransformDestination(a, 0, 0, a, ee, ff);
                       }
                       link.TransformRect(a, 0, 0, a, e, f);
                       writer.AddAnnotation(link.CreateAnnotation(writer));
                   }
                   if (page % 4 == 0)
                   document.NewPage();
               }
               if (i &lt; files.length - 1)
               document.NewPage();
               firstPage += (currentReader.GetNumberOfPages()+3)/4;
            }
            document.Close();
            </pre>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfAnnotation.PdfImportedLink.ToString">
            Returns a String representation of the link.
            @return	a String representation of the imported link
            @since	2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary)">
            Creates dictionary referring to a target document that is the parent of the current document.
            @param nested    null if this is the actual target, another target if this is only an intermediate target.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.#ctor(System.Boolean)">
            Creates a dictionary referring to a target document.
            @param child if false, this refers to the parent document; if true, this refers to a child document, and you'll have to specify where to find the child using the other methods of this class
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.EmbeddedFileName">
            If this dictionary refers to a child that is a document level attachment,
            you need to specify the name that was used to attach the document.
            @param   name    the name in the EmbeddedFiles name tree
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.FileAttachmentPagename">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the name of the page (or use setFileAttachmentPage to specify the page number).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param name  the named destination referring to the page with the file attachment.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.FileAttachmentPage">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page number (or use setFileAttachmentPagename to specify a named destination).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param page  the page number of the page with the file attachment.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.FileAttachmentName">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the name of the attachment added to this page (or use setFileAttachmentIndex).
            @param name      the name of the attachment
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.FileAttachmentIndex">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the index of the attachment added to this page (or use setFileAttachmentName).
            @param name      the name of the attachment
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfTargetDictionary.AdditionalPath">
            If this dictionary refers to an intermediate target, you can
            add the next target in the sequence.
            @param nested    the next target in the sequence
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer">
            Acts like a <CODE>StringBuilder</CODE> but works with <CODE>byte</CODE> arrays.
            floating point is converted to a format suitable to the PDF.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.count">
            The count of bytes in the buffer. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.buf">
            The buffer where the bytes are stored. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.HIGH_PRECISION">
            If <CODE>true</CODE> always output floating point numbers with 6 decimal digits.
            If <CODE>false</CODE> uses the faster, although less precise, representation.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.#ctor">
            Creates new ByteBuffer with capacity 128 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.#ctor(System.Int32)">
            Creates a byte buffer with a certain capacity.
            @param size the initial capacity
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.SetCacheSize(System.Int32)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.FillCache(System.Int32)">
             You can fill the cache in advance if you want to.
            
             @param   decimals
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.ConvertToBytes(System.Int32)">
             Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
            
             @param   i   the int
             @return  a bytearray
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append_i(System.Int32)">
            Appends an <CODE>int</CODE>. The size of the array will grow by one.
            @param b the int to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            Appends the subarray of the <CODE>byte</CODE> array. The buffer will grow by
            <CODE>len</CODE> bytes.
            @param b the array to be appended
            @param off the offset to the start of the array
            @param len the length of bytes to Append
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Byte[])">
            Appends an array of bytes.
            @param b the array to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.String)">
            Appends a <CODE>string</CODE> to the buffer. The <CODE>string</CODE> is
            converted according to the encoding ISO-8859-1.
            @param str the <CODE>string</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Char)">
            Appends a <CODE>char</CODE> to the buffer. The <CODE>char</CODE> is
            converted according to the encoding ISO-8859-1.
            @param c the <CODE>char</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer)">
            Appends another <CODE>ByteBuffer</CODE> to this buffer.
            @param buf the <CODE>ByteBuffer</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Int32)">
            Appends the string representation of an <CODE>int</CODE>.
            @param i the <CODE>int</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Single)">
            Appends a string representation of a <CODE>float</CODE> according
            to the Pdf conventions.
            @param i the <CODE>float</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Append(System.Double)">
            Appends a string representation of a <CODE>double</CODE> according
            to the Pdf conventions.
            @param d the <CODE>double</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.FormatDouble(System.Double)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.FormatDouble(System.Double,Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @param buf a ByteBuffer
            @return the <CODE>String</CODE> representation of the <CODE>double</CODE> if
            <CODE>buf</CODE> is <CODE>null</CODE>. If <CODE>buf</CODE> is <B>not</B> <CODE>null</CODE>,
            then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Reset">
            Sets the size to zero.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.ToByteArray">
             Creates a newly allocated byte array. Its size is the current
             size of this output stream and the valid contents of the buffer
             have been copied into it.
            
             @return  the current contents of this output stream, as a byte array.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.ToString">
             Converts the buffer's contents into a string, translating bytes into
             characters according to the platform's default character encoding.
            
             @return string translated from the buffer's contents.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.WriteTo(System.IO.Stream)">
             Writes the complete contents of this byte buffer output to
             the specified output stream argument, as if by calling the output
             stream's write method using <code>out.Write(buf, 0, count)</code>.
            
             @param      out   the output stream to which to write the data.
             @exception  IOException  if an I/O error occurs.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.ByteBuffer.Size">
             Returns the current size of the buffer.
            
             @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.BaseFont">
            <summary>
            Summary description for BaseFont.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.COURIER">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.COURIER_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.COURIER_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.COURIER_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.HELVETICA">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.HELVETICA_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.HELVETICA_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.HELVETICA_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SYMBOL">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.TIMES_ROMAN">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.TIMES_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.TIMES_ITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.TIMES_BOLDITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ZAPFDINGBATS">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ASCENT">
            The maximum height above the baseline reached by glyphs in this
            font, excluding the height of glyphs for accented characters.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CAPHEIGHT">
            The y coordinate of the top of flat capital letters, measured from
            the baseline.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.DESCENT">
            The maximum depth below the baseline reached by glyphs in this
            font. The value is a negative number.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ITALICANGLE">
            The angle, expressed in degrees counterclockwise from the vertical,
            of the dominant vertical strokes of the font. The value is
            negative for fonts that slope to the right, as almost all italic fonts do.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.BBOXLLX">
            The lower left x glyph coordinate.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.BBOXLLY">
            The lower left y glyph coordinate.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.BBOXURX">
            The upper right x glyph coordinate.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.BBOXURY">
            The upper right y glyph coordinate.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AWT_ASCENT">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AWT_DESCENT">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AWT_LEADING">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AWT_MAXADVANCE">
            java.awt.Font property 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.UNDERLINE_POSITION">
            The underline position. Usually a negative value.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.UNDERLINE_THICKNESS">
            The underline thickness.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.STRIKETHROUGH_POSITION">
            The strikethrough position.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.STRIKETHROUGH_THICKNESS">
            The strikethrough thickness.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SUBSCRIPT_SIZE">
            The recommended vertical size for subscripts for this font.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SUBSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for subscripts for this font. Usually a negative value.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SUPERSCRIPT_SIZE">
            The recommended vertical size for superscripts for this font.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SUPERSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for superscripts for this font.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_T1">
            The font is Type 1.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_TT">
            The font is True Type with a standard encoding.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_CJK">
            The font is CJK.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_TTUNI">
            The font is True Type with a Unicode encoding.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_DOCUMENT">
            A font already inside the document.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FONT_TYPE_T3">
            A Type3 font.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.IDENTITY_H">
            The Unicode encoding with horizontal writing.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.IDENTITY_V">
            The Unicode encoding with vertical writing.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CP1250">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CP1252">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CP1257">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.WINANSI">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.MACROMAN">
            A possible encoding. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.EMBEDDED">
            if the font has to be embedded 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.NOT_EMBEDDED">
            if the font doesn't have to be embedded 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CACHED">
            if the font has to be cached 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.NOT_CACHED">
            if the font doesn't have to be cached 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.RESOURCE_PATH">
            The path to the font resources. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CID_NEWLINE">
            The fake CID code that represents a newline. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.notdef">
            a not defined character in a custom PDF encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.fontType">
            The font type.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.widths">
            table of characters widths for this encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.differences">
            encoding names 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.unicodeDifferences">
            same as differences but with the unicode codes 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.encoding">
            encoding used with this font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.embedded">
            true if the font is to be embedded in the PDF 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.compressionLevel">
            The compression level for the font stream.
            @since   2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.fontSpecific">
            true if the font must use its built in encoding. In that case the
            <CODE>encoding</CODE> is only used to map a char to the position inside
            the font, not to the expected char name.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.fontCache">
            cache for the fonts already used. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.BuiltinFonts14">
            list of the 14 built in fonts. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.forceWidthsOutput">
            Forces the output of the width array. Only matters for the 14
            built-in fonts.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.directTextToByte">
            Converts <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.specialMap">
            Custom encodings use this map to key the Unicode character
            to the single byte code.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.#ctor">
            Creates new BaseFont
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetBaseName(System.String)">
            Gets the name without the modifiers Bold, Italic or BoldItalic.
            @param name the full name of the font
            @return the name without the modifiers Bold, Italic or BoldItalic
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.NormalizeEncoding(System.String)">
            Normalize the encoding names. "winansi" is changed to "Cp1252" and
            "macroman" is changed to "MacRoman".
            @param enc the encoding to be normalized
            @return the normalized encoding
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CreateEncoding">
            Creates the <CODE>widths</CODE> and the <CODE>differences</CODE> arrays
            @throws UnsupportedEncodingException the encoding is not supported
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
            or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetDescent(System.String)">
            Gets the descent of a <CODE>String</CODE> in normalized 1000 units. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @return the dexcent in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetAscent(System.String)">
            Gets the ascent of a <CODE>String</CODE> in normalized 1000 units. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @return the ascent in normalized 1000 units
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetDescentPoint(System.String,System.Single)">
            Gets the descent of a <CODE>String</CODE> in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @param fontSize the size of the font
            @return the dexcent in points
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetAscentPoint(System.String,System.Single)">
            Gets the ascent of a <CODE>String</CODE> in points. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @param fontSize the size of the font
            @return the ascent in points
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetWidthPointKerned(System.String,System.Single)">
            Gets the width of a <CODE>String</CODE> in points taking kerning
            into account.
            @param text the <CODE>String</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetWidthPoint(System.String,System.Single)">
            Gets the width of a <CODE>string</CODE> in points.
            @param text the <CODE>string</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetWidthPoint(System.Int32,System.Single)">
            Gets the width of a <CODE>char</CODE> in points.
            @param char1 the <CODE>char</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ConvertToBytes(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ConvertToBytes(System.Int32)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetFullFontStream">
            Returns a PdfStream object with the full font program (if possible).
            This method will return null for some types of fonts (CJKFont, Type3Font)
            or if there is no font program available (standard Type 1 fonts).
            @return  a PdfStream with the font program
            @since   2.1.3
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.IsEmbedded">
            Gets the embedded flag.
            @return <CODE>true</CODE> if the font is embedded.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.IsFontSpecific">
            Gets the symbolic flag of the font.
            @return <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CreateSubsetPrefix">
            Creates a unique subset prefix to be added to the font name when the font is embedded and subset.
            @return the subset prefix
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetUnicodeDifferences(System.Int32)">
            Gets the Unicode character corresponding to the byte output to the pdf stream.
            @param index the byte index
            @return the Unicode character
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetResourceStream(System.String)">
            Gets the font resources.
            @param key the name of the resource
            @return the <CODE>Stream</CODE> to get the resource or
            <CODE>null</CODE> if not found
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetUnicodeEquivalent(System.Int32)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetCidCode(System.Int32)">
            Gets the CID code given an Unicode.
            It has only meaning with CJK fonts.
            @param c the Unicode
            @return the CID equivalent
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CharExists(System.Int32)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.SetCharAdvance(System.Int32,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetDocumentFonts(Dynamsoft.DotNet.TWAIN.PDF.PdfReader)">
            Gets a list of all document fonts. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @return the list of fonts and references
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetDocumentFonts(Dynamsoft.DotNet.TWAIN.PDF.PdfReader,System.Int32)">
            Gets a list of the document fonts in a particular page. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @param page the page to list the fonts from
            @return the list of fonts and references
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.GetCharBBox(System.Int32)">
            Gets the smallest box enclosing the character contours. It will return
            <CODE>null</CODE> if the font has not the information or the character has no
            contours, as in the case of the space, for example. Characters with no contours may
            also return [0,0,0,0].
            @param c the character to get the contour bounding box from
            @return an array of four floats with the bounding box in the format [llx,lly,urx,ury] or
            <code>null</code>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CorrectArabicAdvance">
            iText expects Arabic Diactrics (tashkeel) to have zero advance but some fonts,
            most notably those that come with Windows, like times.ttf, have non-zero
            advance for those characters. This method makes those character to have zero
            width advance and work correctly in the iText Arabic shaping and reordering
            context.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AddSubsetRange(System.Int32[])">
            Adds a character range when subsetting. The range is an <CODE>int</CODE> array
            where the first element is the start range inclusive and the second element is the
            end range inclusive. Several ranges are allowed in the same array.
            @param range the character range
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.Encoding">
            Gets the encoding used to convert <CODE>string</CODE> into <CODE>byte[]</CODE>.
            @return the encoding name
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FontType">
            Gets the font type. The font types can be: FONT_TYPE_T1,
            FONT_TYPE_TT, FONT_TYPE_CJK and FONT_TYPE_TTUNI.
            @return the font type
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.FamilyFontName" -->
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CodePagesSupported">
            Gets the code pages supported by the font. This has only meaning
            with True Type fonts.
            @return the code pages supported by the font
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.Widths">
            Gets the font width array.
            @return the font width array
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.Differences">
            Gets the array with the names of the characters.
            @return the array with the names of the characters
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.UnicodeDifferences">
            Gets the array with the unicode characters.
            @return the array with the unicode characters
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.ForceWidthsOutput">
            Set to <CODE>true</CODE> to force the generation of the
            widths array.
            @param forceWidthsOutput <CODE>true</CODE> to force the generation of the
            widths array
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.DirectTextToByte">
            Sets the conversion of <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting. This is a low level feature to put the bytes directly in
            the content stream without passing through string.GetBytes().
            @param directTextToByte New value of property directTextToByte.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. When set to <CODE>true</CODE>
            only the glyphs used will be included in the font. When set to <CODE>false</CODE>
            and {@link #addSubsetRange(int[])} was not called the full font will be included
            otherwise just the characters ranges will be included.
            @param subset new value of property subset
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.BaseFont.CompressionLevel">
            Sets the compression level to be used for the font streams.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.GDI.DrawLineAnnotation.m_areaPath">
            <summary>
             Graphic objects for hit test
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawLineAnnotation.GetHandle(System.Int32)">
            <summary>
            Get handle point by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawLineAnnotation.HitTest(System.Drawing.Point)">
            <summary>
            Hit test.
            Return value: -1 - no hit
                           0 - hit anywhere
                           > 1 - handle number
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawLineAnnotation.Invalidate">
            <summary>
            Invalidate object.
            When object is invalidated, path used for hit test
            is released and should be created again.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawLineAnnotation.CreateObjects">
            <summary>
            Create graphic objects used from hit test.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode">
            <summary>
            DynamicDotNetTWAIN error code.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.Succeed">
            <summary>
            Successful.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_SUCCESS">
            <summary>
            Successful.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BUMMER">
            <summary>
            General error.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_LOWMEMORY">
            <summary>
            No enough memory to perform the required operation.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_NODS">
            <summary>
            Source Manager is unable to find the specified Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_MAXCONNECTIONS">
            <summary>
            Source is connected to maximum supported number of applications. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_OPERATIONERROR">
            <summary>
            Source or Source Manager reported an error to the user and handled the error. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADCAP">
            <summary>
            Capability is not supported by Source or the specified operation is not supported by the capability, or capability had dependencies on other capabilities and cannot be operated upon at this time. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADPROTOCOL">
            <summary>
            Unrecognized operation triplet. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADVALUE">
            <summary>
            Data parameter out of supported range. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_SEQERROR">
            <summary>
            Operation out of expected sequence.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADDEST">
            <summary>
            Unknown destination in DSM_Entry.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPUNSUPPORTED">
            <summary>
            Capability is not supported by source. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPBADOPERATION">
            <summary>
            Operation is not supported by the capability. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPSEQERROR">
            <summary>
            Capability has dependencies on other capabilities and cannot be operated upon at this time. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_DENIED">
            <summary>
            File System operation is denied (file is protected).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILEEXISTS">
            <summary>
            Operation failed because file already exists. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILENOTFOUND">
            <summary>
            File not found. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_NOTEMPTY">
            <summary>
            Operation failed because directory is not empty. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_PAPERJAM">
            <summary>
            The feeder is jammed. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_PAPERDOUBLEFEED">
            <summary>
            The feeder detected multiple pages. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILEWRITEERROR">
            <summary>
            Error writing file. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CHECKDEVICEONLINE">
            <summary>
            The device went offline prior to or during this operation.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_GeneralError">
             <summary>
             General error.
             </summary>
            
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_SystemException">
            <summary>
            System exception.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_OPENDSM">
            <summary>
            Can not open Source Manager. TWain_32.dll is missing or is in use by another application. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_SEQUENCE">
            <summary>
            Sequence error. The operation can not be performed upon the current Source Manager or Source state. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_CANCEL">
            <summary>
            User cancelled the operation.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_INDEX">
            <summary>
            Invalid index.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_VALUE">
            <summary>
            Invalid value.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_BADPARAMETER">
            <summary>
            Data parameter out of supported range. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_EXTENSION">
            <summary>
            Unrecognized file extension.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_BMP">
            <summary>
            BMP format error or not supported.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_NOTSUPPORTIMAGE">
            <summary>
            Image format is not supported.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_INVALID_IMAGE">
            <summary>
            Invalid image index. Original image does't exist.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_UPLOADFAILEDFORTOOBIG">
            <summary>
            The file too big for upload.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_HANDSHAKEEXCEPTION">
            <summary>
            Handshake exception.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_INVALIDPROXYUSERNAMEORPASSWORD">
            <summary>
            Proxy username or password invalid.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_PROTOCOLREQUESTNOTPASS">
            <summary>
            Protocol request is not passed.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_NOTCONNECTREMOTESERVER">
            <summary>
            Can't connect to remote server.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_MALFORMEDPASVRESULT">
            <summary>
            Malformed PASV result:
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_MALFORMEDPASVRESULTNOTSUPPORTED">
            <summary>
            Malformed PASV result (not supported):
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_PDF_ERRORINREADPDF">
            <summary>
            Error in reading PDF file.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_PDF_ERRORINWRITEPDF">
            <summary>
            Error in writing PDF file.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_IMAGE_ERRORBIGIMAGE">
            <summary>
            The image too big for resample.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfICCBased">
             A <CODE>PdfICCBased</CODE> defines a ColorSpace
            
             @see        PdfStream
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfICCBased.#ctor(Dynamsoft.DotNet.TWAIN.PDF.ICC_Profile)">
            Creates an ICC stream.
            @param   profile an ICC profile
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfICCBased.#ctor(Dynamsoft.DotNet.TWAIN.PDF.ICC_Profile,System.Int32)">
             Creates an ICC stream.
            
             @param   compressionLevel    the compressionLevel
            
             @param   profile an ICC profile
             @since   2.1.3   (replacing the constructor without param compressionLevel)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PRIndirectReference.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfReader,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PRIndirectReference.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfReader,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.DETAILS">
            A type of PDF Collection 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.TILE">
            A type of PDF Collection 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.HIDDEN">
            A type of PDF Collection 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.#ctor(System.Int32)">
            Constructs a PDF Collection.
            @param   type    the type of PDF collection.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.InitialDocument">
            Identifies the document that will be initially presented
            in the user interface.
            @param description   the description that was used when attaching the file to the document
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.Schema">
            Sets the Collection schema dictionary.
            @param schema    an overview of the collection fields
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfCollection.Sort">
            Sets the Collection sort dictionary.
            @param sort  a collection sort dictionary
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Common.StringObject">
            <summary>
            Summary description for StringObject.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.StringArray">
            <summary>
            Summary description for StringArray.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfPage" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.PORTRAIT">
            value of the <B>Rotate</B> key for a page in PORTRAIT 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.LANDSCAPE">
            value of the <B>Rotate</B> key for a page in LANDSCAPE 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.INVERTEDPORTRAIT">
            value of the <B>Rotate</B> key for a page in INVERTEDPORTRAIT 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.SEASCAPE">
            value of the <B>Rotate</B> key for a page in SEASCAPE 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.mediaBox">
            value of the <B>MediaBox</B> key 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle,System.Collections.Hashtable,Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary,System.Int32)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
             @param       rotate          a value for the <B>Rotate</B> key
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle,System.Collections.Hashtable,Dynamsoft.DotNet.TWAIN.PDF.PdfDictionary)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.IsParent" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
             Adds an indirect reference pointing to a <CODE>PdfContents</CODE>-object.
            
             @param       contents        an indirect reference to a <CODE>PdfContents</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.RotateMediaBox">
             Rotates the mediabox, but not the text in it.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfPage.MediaBox">
             Returns the MediaBox of this Page.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ImgCCITT">
             CCITT Image data that has to be inserted into the document
            
             @see        Element
             @see        Image
            
             @author  Paulo Soares
            <summary>
            CCITT Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.ImgCCITT.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in CCITT mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="reverseBits">
            reverses the bits in data.
            Bit 0 is swapped with bit 7 and so on
            </param>
            <param name="typeCCITT">
            the type of compression in data. It can be
            CCITTG4, CCITTG31D, CCITTG32D
            </param>
            <param name="parameters">
            parameters associated with this stream. Possible values are
            CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
            combination of them
            </param>
            <param name="data">the image data</param>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Properties">
            <summary>
            Summary description for Properties.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.Decode(System.Byte[],System.Byte[],System.Int32)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
             @param h               The number of rows the compressed data contains.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFLZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newString</code> to the end of <code>oldString</code>.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainException">
            <summary>
            DynamicDotNetTWAIN exception class definition.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor">
            <summary>
            Initializes a new instance of the TwainException class.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TwainException class with a specified error message.
            </summary>
            <param name="strError">The message that describes the error.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor(System.String,Dynamsoft.DotNet.TWAIN.Enums.ErrorCode)">
            <summary>
            Initializes a new instance of the TwainException class with a specified error message and error code.
            </summary>
            <param name="strError">The message that describes the error.</param>
            <param name="errCode">The error code.</param>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.Code">
            <summary>
            Get and set DynamicDotNetTWAIN error code.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapType">
            <summary>
            Capabilities exist in many varieties but all have a Default Value, Current Value, and may have other values available that can be supported if selected. 
            To help categorize the supported values into clear structures, TWAIN defines four types of containers for capabilities: 
            TW_ONEVALUE, TW_ARRAY, TW_RANGE and TW_ENUMERATION.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_NONE">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ARRAY">
            <summary>
            A rectangular array of values that describe a logical item. It is similar to the TW_ONEVALUE because the current and default values are the same and 
            there are no other values to select from. For example, a list of the names, such as the supported capabilities list returned by the CAP_SUPPORTEDCAPS 
            capability, would use this type of container. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ENUMERATION">
            <summary>
            This is the most general type because it defines a list of values from which the Current Value can be chosen. 
            The values do not progress uniformly through a range and there is not a consistent step size between the values. 
            For example, if a Source's resolution options do not occur in even step sizes then an enumeration would be used (for example, 150, 400, and 600). 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ONEVALUE">
            <summary>
            A single value whose current and default values are coincident. The range of available values for this type of capability is simply this single value.
            For example, a capability that indicates the presence of a document feeder could be of this type.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_RANGE">
            <summary>
            Many capabilities allow users to select their current value from a range of regularly spaced values. 
            The capability can specify the minimum and maximum acceptable values and the incremental step size between the values.
            For example, resolution might be supported from 100 to 600 in steps of 50 (100, 150, 200, ..., 550, 600). 
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapability">
            <summary>
            Capabilities.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_NONE">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_XFERCOUNT">
            <summary>
            The application is willing to accept this number of images.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_COMPRESSION">
            <summary>
            Allows the application and Source to identify which compression schemes they have in
            common for Buffered Memory and File transfers.
            Note for File transfers:
            Since only certain file formats support compression, this capability must be negotiated after
            setting the desired file format with ICAP_IMAGEFILEFORMAT.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELTYPE">
            <summary>
            The type of pixel data that a Source is capable of acquiring (for example, black and white, gray, RGB, etc.).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_UNITS">
            <summary>
            Unless a quantity is dimensionless or uses a specified unit of measure, ICAP_UNITS determines
            the unit of measure for all quantities.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XFERMECH">
            <summary>
            Allows the application and Source to identify which transfer mechanisms the source supports.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTHOR">
            <summary>
            The name or other identifying information about the Author of the image. It may include a copyright string.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CAPTION">
            <summary>
            A general note about the acquired image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERENABLED">
            <summary>
            If TRUE, Source must acquire data from the document feeder acquire area and other feeder 
            capabilities can be used. If FALSE, Source must acquire data from the non-feeder acquire area 
            and no other feeder capabilities can be used.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERLOADED">
            <summary>
            Reflect whether there are documents loaded in the Source’s feeder.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEDATE">
            <summary>
            The date and time the image was acquired.
            
            Stored in the form “YYYY/MM/DD HH:mm:SS.sss” where YYYY is the year, MM is the 
            numerical month, DD is the numerical day, HH is the hour, mm is the minute, SS is the second, 
            and sss is the millisecond.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SUPPORTEDCAPS">
            <summary>
            Returns a list of all the capabilities for which the Source will answer inquiries. Does not indicate
            which capabilities the Source will allow to be set by the application. Some capabilities can only
            be set if certain setup work has been done so the Source cannot globally answer which
            capabilities are “set-able.”
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_EXTENDEDCAPS">
            <summary>
            Allows the application and Source to negotiate capabilities to be used in States 5 and 6.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOFEED">
            <summary>
            If TRUE, the Source will automatically feed the next page from the document feeder after the
            number of frames negotiated for capture from each page are acquired. CAP_FEEDERENABLED
            must be TRUE to use this capability.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CLEARPAGE">
            <summary>
            If TRUE, the Source will eject the current page being acquired from and will leave the feeder
            acquire area empty.
            If CAP_AUTOFEED is TRUE, a fresh page will be advanced.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDPAGE">
            <summary>
            If TRUE, the Source will eject the current page and advance the next page in the document feeder
            into the feeder acquire area.
            If CAP_AUTOFEED is TRUE, the same action just described will occur and CAP_AUTOFEED will
            remain active.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_REWINDPAGE">
            <summary>
            If TRUE, the Source will return the current page to the input side of the document feeder and
            feed the last page from the output side of the feeder back into the acquisition area.
            If CAP_AUTOFEED is TRUE, automatic feeding will continue after all negotiated frames from this
            page are acquired.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_INDICATORS">
            <summary>
            If TRUE, the Source will display a progress indicator during acquisition and transfer, regardless
            of whether the Source’s user interface is active. If FALSE, the progress indicator will be
            suppressed if the Source’s user interface is inactive.
            The Source will continue to display device-specific instructions and error messages even with
            the Source user interface and progress indicators turned off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SUPPORTEDCAPSEXT">
            <summary>
            Returns a list of all the capabilities for which the Source will answer inquiries. Does not indicate
            which capabilities the Source will allow to be set by the application. Some capabilities can only
            be set if certain setup work has been done so the Source cannot globally answer which
            capabilities are “set-able.”
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PAPERDETECTABLE">
            <summary>
            This capability determines whether the device has a paper sensor that can detect documents on the ADF or Flatbed.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_UICONTROLLABLE">
            <summary>
            If TRUE, indicates that this Source supports acquisition with the UI disabled; i.e.,
            TW_USERINTERFACE’s ShowUI field can be set to FALSE. If FALSE, indicates that this Source
            can only support acquisition with the UI enabled.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DEVICEONLINE">
            <summary>
            If TRUE, the physical hardware (e.g., scanner, digital camera, image database, etc.) that
            represents the image source is attached, powered on, and communicating.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOSCAN">
            <summary>
            This capability is intended to boost the performance of a Source. The fundamental assumption
            behind AutoScan is that the device is able to capture the number of images indicated by the
            value of CAP_XFERCOUNT without waiting for the Application to request the image transfers.
            This is only possible if the device has internal buffers capable of caching the images it captures.
            The default behavior is undefined, because some high volume devices are incapable of anything
            but CAP_AUTOSCAN being equal to TRUE. However, if a Source supports FALSE, it should use it
            as the mandatory default, since this best describes the behavior of pre-1.8 TWAIN Applications.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_THUMBNAILSENABLED">
            <summary>
            Allows an application to request the delivery of thumbnail representations for the set of images
            that are to be delivered.
            Setting CAP_THUMBNAILSENABLED to TRUE turns on thumbnail mode. Images transferred
            thereafter will be sent at thumbnail size (exact thumbnail size is determined by the Data Source).
            Setting this capability to FALSE turns thumbnail mode off and returns full size images.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DUPLEX">
            <summary>
            This indicates whether the scanner supports duplex. If so, it further indicates whether one-path
            or two-path duplex is supported.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DUPLEXENABLED">
            <summary>
            The user can set the duplex option to be TRUE or FALSE. If TRUE, the scanner scans both sides
            of a paper; otherwise, the scanner will scan only one side of the image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ENABLEDSUIONLY">
            <summary>
            Allows an application to query a source to see if it implements the new user interface settings dialog. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ENDORSER">
            <summary>
            Allows the application to specify the starting endorser / imprinter number. All other endorser/
            imprinter properties should be handled through the data source’s user interface.
            The user can set the starting number for the endorser.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ALARMS">
            <summary>
            Turns specific audible alarms on and off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ALARMVOLUME">
            <summary>
            The volume of a device’s audible alarm. Note that this control affects the volume of all alarms;
            no specific volume control for individual types of alarms is provided.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOMATICCAPTURE">
            <summary>
            The number of images to automatically capture. This does not refer to the number of images to
            be sent to the Application, use CAP_XFERCOUNT for that.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEBEFOREFIRSTCAPTURE">
            <summary>
            For automatic capture, this value selects the number of milliseconds before the first picture is to
            be taken, or the first image is to be scanned.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEBETWEENCAPTURES">
            <summary>
            For automatic capture, this value selects the milliseconds to wait between pictures taken, or images scanned.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CLEARBUFFERS">
            <summary>
            CapGet() reports the presence of data in the scanner's buffers. CapSet() with a value of TWCB_CLEAR immediately clears the buffers.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_MAXBATCHBUFFERS">
            <summary>
            Describes the number of pages that the scanner can buffer when CAP_AUTOSCAN is enabled.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DEVICETIMEDATE">
            <summary>
            The date and time of the device’s clock.
            Managed in the form “YYYY/MM/DD HH:mm:SS:sss” where YYYY is the year, MM is the
            numerical month, DD is the numerical day, HH is the hour, mm is the minute, SS is the second,
            and sss is the millisecond.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_POWERSUPPLY">
            <summary>
            CapGet() reports the kinds of power available to the device. CapGetCurrent() reports the current power supply in use.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CAMERAPREVIEWUI">
            <summary>
            This capability queries the Source for UI support for preview mode. If TRUE, the Source supports preview UI.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SERIALNUMBER">
            <summary>
            A string containing the serial number of the currently selected device in the Source. Multiple
            devices may all report the same serial number.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTER">
            <summary>
            CapGet() returns the current list of available printer devices, along with the one currently being used for negotiation. 
            CapSet() selects the current device for negotiation, and optionally constrains the list.
            Top/Bottom refers to duplex devices, and indicates if the printer is writing on the top or the bottom of the sheet of paper. 
            Simplex devices use the top settings. Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERENABLED">
            <summary>
            Turns the current CAP_PRINTER device on or off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERINDEX">
            <summary>
            The User can set the starting number for the current CAP_PRINTER device.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERMODE">
            <summary>
            Specifies the appropriate current CAP_PRINTER device mode.
            Note:
            • TWPM_SINGLESTRING specifies that the printed text will consist of a single string.
            • TWPM _MULTISTRING specifies that the printed text will consist of an enumerated list of
            strings to be printed in order.
            • TWPM _COMPOUNDSTRING specifies that the printed string will consist of a compound of a
            String followed by a value followed by a suffix string.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERSTRING">
            <summary>
            Specifies the string(s) that are to be used in the string component when the current
            CAP_PRINTER device is enabled.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERSUFFIX">
            <summary>
            Specifies the string that shall be used as the current CAP_PRINTER device’s suffix.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_LANGUAGE">
            <summary>
            Allows Application and Source to identify which languages they have in common for the exchange of string data, 
            and to select the language of the internal UI. Since the TWLG_xxxx codes include language and country data, there is no separate 
            capability for selecting the country.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERALIGNMENT">
            <summary>
            Helps the Application determine any special actions it may need to take when negotiating
            frames with the Source. Allowed values are listed in <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment"/>.
            TWFA_NONE: The alignment is free-floating. Applications should assume
            that the origin for frames is on the left.
            TWFA_LEFT: The alignment is to the left.
            TWFA_CENTER: The alignment is centered. This means that the paper will
            be fed in the middle of the ICAP_PHYSICALWIDTH of the
            device. If this is set, then the Application should calculate
            any frames with a left offset of zero.
            TWFA_RIGHT: The alignment is to the right.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERORDER">
            <summary>
            TWFO_FIRSTPAGEFIRST if the feeder starts with the top of the first page.
            TWFO_LASTPAGEFIRST is the feeder starts with the top of the last page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_REACQUIREALLOWED">
            <summary>
            Indicates whether the physical hardware (e.g. scanner, digital camera) is capable of acquiring
            multiple images of the same page without changes to the physical registration of that page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_BATTERYMINUTES">
            <summary>
            The minutes of battery power remaining to the device.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_BATTERYPERCENTAGE">
            <summary>
            When used with CapGet(), return the percentage of battery power level on camera. If -1 is returned, it indicates that the battery is not present. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOBRIGHT">
            <summary>
            TRUE enables and FALSE disables the Source’s Auto-brightness function (if any).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BRIGHTNESS">
            <summary>
            The brightness values available within the Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CONTRAST">
            <summary>
            The contrast values available within the Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CUSTHALFTONE">
            <summary>
            Specifies the square-cell halftone (dithering) matrix the Source should use to halftone the image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_EXPOSURETIME">
            <summary>
            Specifies the exposure time used to capture the image, in seconds.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FILTER">
            <summary>
            Describes the color characteristic of the subtractive filter applied to the image data. Multiple
            filters may be applied to a single acquisition.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLASHUSED">
            <summary>
            Specifies whether or not the image was acquired using a flash.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_GAMMA">
            <summary>
            Gamma correction value for the image data.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_HALFTONES">
            <summary>
            A list of names of the halftone patterns available within the Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_HIGHLIGHT">
            <summary>
            Specifies which value in an image should be interpreted as the lightest “highlight.” All values
            “lighter” than this value will be clipped to this value. Whether lighter values are smaller or
            larger can be determined by examining the Current value of ICAP_PIXELFLAVOR.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_IMAGEFILEFORMAT">
            <summary>
            Informs the application which file formats the Source can generate (CapGet()). Tells the Source which file formats the application can handle (CapSet()).
            TWFF_TIFF Used for document 
            TWFF_PICT Native Macintosh 
            TWFF_BMP Native Microsoft 
            TWFF_XBM Used for document 
            TWFF_JFIF Wrapper for JPEG 
            TWFF_FPX FlashPix, used with digital 
            TWFF_TIFFMULTI Multi-page TIFF files
            TWFF_PNG An image format standard intended for use on the web, replaces GIF
            TWFF_SPIFF A standard from JPEG, intended to replace JFIF, also supports JBIG
            TWFF_EXIF File format for use with digital cameras. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LAMPSTATE">
            <summary>
            TRUE means the lamp is currently, or should be set to ON. Sources may not support CapSet() operations. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LIGHTSOURCE">
            <summary>
            Describes the general color characteristic of the light source used to acquire the image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ORIENTATION">
            <summary>
            Defines which edge of the "paper" the image's "top" is aligned with. This information is used to adjust the frames to match the 
            scanning orientation of the paper. For instance, if an ICAP_SUPPORTEDSIZE of TWSS_ISOA4 has been negotiated, 
            and ICAP_ORIENTATION is set to TWOR_LANDSCAPE, then the Source must rotate the frame it downloads to the scanner to reflect the 
            orientation of the paper. Please note that setting ICAP_ORIENTATION does not affect the values reported by ICAP_FRAMES; 
            it just causes the Source to use them in a different way. The upper-left of the image is defined as the location where both the primary and 
            secondary scans originate. (The X axis is the primary scan direction and the Y axis is the secondary scan direction.)
            For a flatbed scanner, the light bar moves in the secondary scan direction. For a handheld scanner, the scanner is drug in the 
            secondary scan direction. For a digital camera, the secondary direction is the vertical axis when the viewed image is considered upright. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PHYSICALWIDTH">
            <summary>
            The maximum physical width (X-axis) the Source can acquire (measured in units of ICAP_UNITS).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PHYSICALHEIGHT">
            <summary>
            The maximum physical height (Y-axis) the Source can acquire (measured in units of ICAP_UNITS).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SHADOW">
            <summary>
            Specifies which value in an image should be interpreted as the darkest “shadow.” All values 
            “darker” than this value will be clipped to this value.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FRAMES">
            <summary>
            The list of frames the Source will acquire on each page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XNATIVERESOLUTION">
            <summary>
            The native optical resolution along the X-axis of the device being controlled by the Source. Most
            devices will respond with a single value (TW_ONEVALUE).
            This is NOT a list of all resolutions that can be generated by the device. Rather, this is the
            resolution of the device’s optics. Measured in units of pixels per unit as defined by
            ICAP_UNITS (pixels per TWUN_PIXELS yields dimensionless data).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YNATIVERESOLUTION">
            <summary>
            The native optical resolution along the Y-axis of the device being controlled by the Source.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XRESOLUTION">
            <summary>
            All the X-axis resolutions the Source can provide.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data). That is, when the units are TWUN_PIXELS, both
            ICAP_XRESOLUTION and ICAP_YRESOLUTION shall report 1 pixel/pixel. Some data sources
            like to report the actual number of pixels that the device reports, but that response is more
            appropriate in ICAP_PHYSICALHEIGHT and ICAP_PHYSICALWIDTH.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YRESOLUTION">
            <summary>
            All the Y-axis resolutions the Source can provide.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data). That is, when the units are TWUN_PIXELS, both
            ICAP_XRESOLUTION and ICAP_YRESOLUTION shall report 1 pixel/pixel. Some data sources
            like to report the actual number of pixels that the device reports, but that response is more
            appropriate in ICAP_PHYSICALHEIGHT and ICAP_PHYSICALWIDTH.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MAXFRAMES">
            <summary>
            The maximum number of frames the Source can provide or the application can accept per page. 
            This is a bounding capability only. It does not establish current or future behavior.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_TILES">
            <summary>
            This is used with buffered memory transfers. If TRUE, Source can provide application with tiled image data.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITORDER">
            <summary>
            Specifies how the bytes in an image are filled by the Source. TWBO_MSBFIRST indicates that the leftmost bit in the byte (usually bit 7) is 
            the byte's Most Significant Bit.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CCITTKFACTOR">
            <summary>
            Used for CCITT Group 3 2-dimensional compression. The ‘K’ factor indicates how often the
            new compression baseline should be re-established. A value of 2 or 4 is common in facsimile
            communication. A value of zero in this field will indicate an infinite K factor—the baseline is
            only calculated at the beginning of the transfer.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LIGHTPATH">
            <summary>
            Describes whether the image was captured transmissively or reflectively.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELFLAVOR">
            <summary>
            Sense of the pixel whose numeric value is zero (minimum data value). 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PLANARCHUNKY">
            <summary>
            Allows the application and Source to identify which color data formats are available. There are
            two options, “planar” and “chunky.”
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ROTATION">
            <summary>
            How the Source can/should rotate the scanned image data prior to transfer. This doesn’t use
            ICAP_UNITS. It is always measured in degrees. Any applied value is additive with any
            rotation specified in ICAP_ORIENTATION.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDSIZES">
            <summary>
            For devices that support fixed frame sizes. 
            Defined sizes match typical page sizes. This specifies the size(s) the Source can/should use to acquire image data. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_THRESHOLD">
            <summary>
            Specifies the dividing line between black and white. This is the value the Source will use to
            threshold, if needed, when ICAP_PIXELTYPE = TWPT_BW.
            The value is normalized so there are no units of measure associated with this ICAP.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XSCALING">
            <summary>
            All the X-axis scaling values available. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YSCALING">
            <summary>
            All the Y-axis scaling values available. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero. 
            There are no units inherent with this data as it is normalized to 1.0 being “unscaled.”
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITORDERCODES">
            <summary>
            Used for CCITT data compression only. Indicates the bit order representation of the stored compressed codes.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELFLAVORCODES">
            <summary>
            Used only for CCITT data compression. Specifies whether the compressed codes’ pixel “sense” 
            will be inverted from the Current value of ICAP_PIXELFLAVOR prior to transfer.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_JPEGPIXELTYPE">
            <summary>
            Allows the application and Source to agree upon a common set of color descriptors that are 
            made available by the Source. This ICAP is only useful for JPEG-compressed buffered memory image transfers.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_TIMEFILL">
            <summary>
            Used only with CCITT data compression. Specifies the minimum number of words of compressed codes (compressed data) to be transmitted per line.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITDEPTH">
            <summary>
            Specifies the pixel bit depths for the Current value of ICAP_PIXELTYPE. For example, when
            using ICAP_PIXELTYPE = TWPT_GRAY, this capability specifies whether this is 8-bit gray or 4-bit gray.
            This depth applies to all the data channels (for instance, the R, G, and B channels will all have
            this same bit depth for RGB data).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITDEPTHREDUCTION">
            <summary>
            Specifies the Reduction Method the Source should use to reduce the bit depth of the data. Most
            commonly used with ICAP_PIXELTYPE = TWPT_BW to reduce gray data to black and white.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_UNDEFINEDIMAGESIZE">
            <summary>
            If TRUE the Source will issue a MSG_XFERREADY before starting the scan.
            Note: The Source may need to scan the image before initiating the transfer. This is the case if
            the scanned image is rotated or merged with another scanned image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_EXTIMAGEINFO">
            <summary>
            Allows the application to query the data source to see if it supports extended image attribute capabilities, 
            such as Barcode Recognition, Shaded Area Detection and Removal, Skew detection and Removal, and so on.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MINIMUMHEIGHT">
            <summary>
            Allows the source to define the minimum height (Y-axis) that the source can acquire.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MINIMUMWIDTH">
            <summary>
            Allows the source to define theminimum width (X-axis) that the source can acquire.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTODISCARDBLANKPAGES">
            <summary>
            Use this capability to have the Source discard blank images. The Application never sees these
            images during the scanning session.
            TWBP_DISABLE – this must be the default state for the Source. It indicates that all images will
            be delivered to the Application, none of them will be discarded.
            TWBP_AUTO – if this is used, then the Source will decide if an image is blank or not and discard
            as appropriate.
            If the specified value is a positive number in the range 0 to 231–1, then this capability will use it
            as the byte size cutoff point to identify which images are to be discarded. If the size of the image
            is less than or equal to this value, then it will be discarded. If the size of the image is greater
            than this value, then it will be kept so that it can be transferred to the Application.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLIPROTATION">
            <summary>
            Flip rotation is used to properly orient images that flip orientation every other image.
            TWFR_BOOK The images to be scanned are viewed in book form, flipping each page from left to right or right to left.
            TWFR_FANFOLD The images to be scanned are viewed in fanfold paper style, flipping each page up or down. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEDETECTIONENABLED">
            <summary>
            Turns bar code detection on and off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDBARCODETYPES">
            <summary>
            Provides a list of bar code types that can be detected by the current Data Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEMAXSEARCHPRIORITIES">
            <summary>
            The maximum number of supported search priorities.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODESEARCHPRIORITIES">
            <summary>
            A prioritized list of bar code types dictating the order in which bar codes will be sought.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODESEARCHMODE">
            <summary>
            Restricts bar code searching to certain orientations, or prioritizes one orientation over the other.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEMAXRETRIES">
            <summary>
            Restricts the number of times a search will be retried if none are found on each page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODETIMEOUT">
            <summary>
            Restricts the total time spent on searching for a bar code on each page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ZOOMFACTOR">
            <summary>
            When used with CapGet(), returns all camera supported lens zooming range. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEDETECTIONENABLED">
            <summary>
            Turns patch code detection on and off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDPATCHCODETYPES">
            <summary>
            A list of patch code types that may be detected by the current Data Source.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEMAXSEARCHPRIORITIES">
            <summary>
            The maximum number of supported search priorities.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODESEARCHPRIORITIES">
            <summary>
            A prioritized list of patch code types dictating the order in which patch codes will be sought.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODESEARCHMODE">
            <summary>
            Restricts patch code searching to certain orientations, or prioritizes one orientation over the other.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEMAXRETRIES">
            <summary>
            Restricts the number of times a search will be retried if none are found on each page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODETIMEOUT">
            <summary>
            Restricts the total time spent on searching for a patch code on each page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLASHUSED2">
            <summary>
            For devices that support flash. CapSet() selects the flash to be used (if any). CapGet() reports the current setting.
            This capability replaces ICAP_FLASHUSED, which is only able to negotiate the flash being on or off. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_IMAGEFILTER">
            <summary>
            For devices that support image enhancement filtering. This capability selects the algorithm used to improve the quality of the image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_NOISEFILTER">
            <summary>
            For devices that support noise filtering. This capability selects the algorithm used to remove noise.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_OVERSCAN">
            <summary>
            Overscan is used to scan outside of the boundaries described by ICAP_FRAMES, and is used to help acquire image data that 
            may be lost because of skewing.
            This is primarily of use for transport scanners which rely on edge detection to begin scanning. 
            If overscan is supported, then the device is capable of scanning in the inter-document gap to get the skewed image information. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICBORDERDETECTION">
            <summary>
            Turns automatic border detection on and off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICDESKEW">
            <summary>
            Turns automatic deskew correction on and off.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICROTATE">
            <summary>
            When TRUE this capability depends on intelligent features within the Source to automatically 
            rotate the image to the correct position.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapLanguage">
            <summary>
            CAP_LANGUAGE values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes">
            <summary>
            TWAIN Supported sizes.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_NONE">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A4LETTER">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B5LETTER">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLETTER">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLEGAL">
            <summary>
            4
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A5">
            <summary>
            5
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B4">
            <summary>
            6
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B6">
            <summary>
            7
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLEDGER">
            <summary>
            9
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USEXECUTIVE">
            <summary>
            10
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A3">
            <summary>
            11
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B3">
            <summary>
            12
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A6">
            <summary>
            13
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C4">
            <summary>
            14
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C5">
            <summary>
            15
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C6">
            <summary>
            16
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_4A0">
            <summary>
            17
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_2A0">
            <summary>
            18
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A0">
            <summary>
            19
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A1">
            <summary>
            20
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A2">
            <summary>
            21
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A4">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A7">
            <summary>
            22
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A8">
            <summary>
            23
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A9">
            <summary>
            24
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A10">
            <summary>
            25
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB0">
            <summary>
            26
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB1">
            <summary>
            27
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB2">
            <summary>
            28
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB3">
            <summary>
            12
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB4">
            <summary>
            6
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB5">
            <summary>
            29
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB6">
            <summary>
            7
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB7">
            <summary>
            30
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB8">
            <summary>
            31
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB9">
            <summary>
            32
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB10">
            <summary>
            33
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB0">
            <summary>
            34
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB1">
            <summary>
            35
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB2">
            <summary>
            36
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB3">
            <summary>
            37
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB4">
            <summary>
            38
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB5">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB6">
            <summary>
            39
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB7">
            <summary>
            40
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB8">
            <summary>
            41
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB9">
            <summary>
            41
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB10">
            <summary>
            43
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C0">
            <summary>
            44
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C1">
            <summary>
            45
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C2">
            <summary>
            46
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C3">
            <summary>
            47
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C7">
            <summary>
            48
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C8">
            <summary>
            49
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C9">
            <summary>
            50
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C10">
            <summary>
            51
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USSTATEMENT">
            <summary>
            52
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_BUSINESSCARD">
            <summary>
            53
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_MAXSIZE">
            <summary>
            54
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapDuplex">
            <summary>
            ICAP_DUPLEX values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment">
            <summary>
            CAP_FEEDERALIGNMENT values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_NONE">
            <summary>
            The alignment is free-floating. Applications should assume that the origin for frames is on the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_LEFT">
            <summary>
            The alignment is to the left.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_CENTER">
            <summary>
            The alignment is centered. This means that the paper will be fed in the middle of the ICAP_PHYSICALWIDTH of the 
            device. If this is set, then the Application should calculate any frames with a left offset of zero.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_RIGHT">
            <summary>
            The alignment is to the right.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder">
            <summary>
            CAP_FEEDERORDER values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder.TWFO_FIRSTPAGEFIRST">
            <summary>
            The feeder starts with the top of the first page.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder.TWFO_LASTPAGEFIRST">
            <summary>
            The feeder starts with the top of the last page.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer">
            <summary>
            ICAP_XFERMECH values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_NATIVE">
            <summary>
            Native transfers require the data to be transferred to a single large block of RAM. Therefore,
            they always face the risk of having an inadequate amount of RAM available to perform the transfer successfully.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_FILE">
            <summary>
            Disk File Mode Transfers.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_MEMORY">
            <summary>
            Buffered Memory Mode Transfers.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat">
            <summary>
            ICAP_IMAGEFILEFORMAT values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_TIFF">
            <summary>
            Used for document imaging.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PICT">
            <summary>
            Native Macintosh format.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_BMP">
            <summary>
            Native Microsoft format.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_XBM">
            <summary>
            Used for document imaging.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_JFIF">
            <summary>
            Wrapper for JPEG images.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_FPX">
            <summary>
            FlashPix, used with digital cameras.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_TIFFMULTI">
            <summary>
            Multi-page TIFF files.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PNG">
            <summary>
            An image format standard intended for use on the web, replaces GIF.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_SPIFF">
            <summary>
            A standard from JPEG, intended to replace JFIF, also supports JBIG.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_EXIF">
            <summary>
            File format for use with digital cameras.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PDF">
            <summary>
            A file format from Adobe.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_JP2">
            <summary>
            A file format from the Joint Photographic Experts Group.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_DEJAVU">
            <summary>
            A file format from LizardTech.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PDFA">
            <summary>
            A file format from Adobe.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinter">
            <summary>
            CAP_PRINTER values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode">
            <summary>
            CAP_PRINTERMODE values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_SINGLESTRING">
            <summary>
            Specifies that the printed text will consist of a single string.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_MULTISTRING">
            <summary>
            Specifies that the printed text will consist of an enumerated list of strings to be printed in order.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_COMPOUNDSTRING">
            <summary>
            Specifies that the printed string will consist of a compound of a String followed by a value followed by a suffix string.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitdepthReduction">
            <summary>
            ICAP_BITDEPTHREDUCTION values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitOrder">
            <summary>
            ICAP_BITORDER values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitOrder.TWBO_MSBFIRST">
            <summary>
            Indicates that the leftmost bit in the byte (usually bit 7) is the byte’s Most Significant Bit.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFilterType">
            <summary>
            ICAP_FILTER values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlash">
            <summary>
            ICAP_FLASHUSED2 values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation">
            <summary>
            ICAP_FLIPROTATION values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation.TWFR_BOOK">
            <summary>
            The images to be scanned are viewed in book form, flipping each page from left to right or right to left.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation.TWFR_FANFOLD">
            <summary>
            The images to be scanned are viewed in fanfold paper style, flipping each page up or down.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter">
            <summary>
            ICAP_IMAGEFILTER values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_LOWPASS">
            <summary>
            Good for halftone images.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_BANDPASS">
            <summary>
            Good for improving text.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_HIGHPASS">
            <summary>
            Good for improving fine lines.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapLightPath">
            <summary>
            ICAP_LIGHTPATH values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapLightSource">
            <summary>
            ICAP_LIGHTSOURCE values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWEIMagType">
            <summary>
            TWEI_MAGTYPE values. (MD_ means Mag Type) Added 2.0 
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapNoiseFilter">
            <summary>
            ICAP_NOISEFILTER values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapORientation">
            <summary>
            ICAP_ORIENTATION values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapOverscan">
            <summary>
            ICAP_OVERSCAN values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor">
            <summary>
            ICAP_PIXELFLAVOR values.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor.TWPF_CHOCOLATE">
            <summary>
            Zero pixel represents darkest shade.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor.TWPF_VANILLA">
            <summary>
            Zero pixel represents lightest shade.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelType">
            <summary>
            ICAP_PIXELTYPE values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPlanarChunky">
            <summary>
            ICAP_PLANARCHUNKY values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapUNits">
            <summary>
            ICAP_UNITS values.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWQC">
            <summary>
            For query the operation that are supported by the data source on a capability .
            Application gets these through DG_CONTROL/DAT_CAPABILITY/MSG_QUERYSUPPORT
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus">
            <summary>
            Data source status.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_CLOSED">
            <summary>
            Indicate the data source is closed. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_OPENED">
            <summary>
            Indicate the data source is opened.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_ENABLED">
            <summary>
            Indicate the data source is enabled. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_ACQUIRING">
            <summary>
            Indicate the data source is acquiring image.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode">
            <summary>
            Barcode type
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODECOUNT">
            <summary>
            Returns the number of bar codes found on the document image. A 
            value of 0 means the bar code engine was enabled but that no bar 
            codes were found. A value of -1 means the bar code engine was not enabled.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODECONFIDENCE">
            <summary>
            This number reflects the degree of certainty the bar code engine has in 
            the accuracy of the information obtained from the scanned image and 
            ranges from 0 (no confidence) to 100 (supreme confidence). The Source may 
            return a value of -1 if it does not support confidence reporting.
            TWBCOR_ROT0 Normal reading orientation
            TWBCOR_ROT90 Rotated 90 degrees clockwise
            TWBCOR_ROT180 Rotated 180 degrees clockwise
            TWBCOR_ROT270 Rotated 270 degrees clockwise
            TWBCOR_ROTX The orientation is not known.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEROTATION">
            <summary>
            The bar code’s orientation on the scanned image is described in 
            reference to a Western-style interpretation of the image.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETEXTLENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle">
            <summary>
            Image window border style.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.SingleFlat">
            <summary>
            Flat border.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.Single3D">
            <summary>
            3D border.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType">
            <summary>
            TIFF file compression type.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_AUTO">
            <summary>
            Auto mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_NONE">
            <summary>
            Dump mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_RLE">
            <summary>
            CCITT modified Huffman RLE.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_FAX3">
            <summary>
            CCITT Group 3 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_T4">
            <summary>
            CCITT T.4 (TIFF 6 name).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_FAX4">
            <summary>
            CCITT Group 4 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_T6">
            <summary>
            CCITT T.6 (TIFF 6 name).
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_LZW">
            <summary>
            Lempel Ziv and Welch.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod">
            <summary>
            The method to do interpolation.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize">
            <summary>
            PDF Page Size
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.FLSA">
            <summary>
            American Foolscap format
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.FLSE">
            <summary>
            European Foolscap format
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.HALFLETTER">
            <summary>
            halfletter format
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_1">
            <summary>
            ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch)
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_2">
            <summary>
            ISO 7810 ID-2 format (A7 rotated)
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_3">
            <summary>
            ISO 7810 ID-3 format (B7 rotated)
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat">
            <summary>
            Image type
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_BMP">
            <summary>
            Native Microsoft format.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_JPG">
            <summary>
            JPEG format.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_TIF">
            <summary>
            Tagged Image File Format.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_PNG">
            <summary>
            An image format standard intended for use on the web, replaces GIF.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_PDF">
            <summary>
            A file format from Adobe.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType">
            <summary>
            PDF file compression type.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumAutoEncode">
            <summary>
            Auto mode.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumCCITTFax4Encode">
            <summary>
            CCITT Group 4 fax encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumFlateEncode">
            <summary>
            flate encoding.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumJPEGEncode">
            <summary>
            JPEG encoding.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTFitWindowType">
            <summary>
            FitWindow type
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationType">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationChangePosition">
            <summary>
            Change annotation position
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTTextRotate">
            <summary>
            Rotate text annotaion
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Utilities">
            A collection of convenience methods that were present in many different iText
            classes.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.GetKeySet(Dynamsoft.DotNet.TWAIN.PDF.Properties)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.AddToArray(System.Object[][],System.Object[])">
            Utility method to extend an array.
            @param original the original array or <CODE>null</CODE>
            @param item the item to be added to the array
            @return a new array with the item appended
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.CheckTrueOrFalse(Dynamsoft.DotNet.TWAIN.PDF.Properties,System.String)">
            Checks for a true/false value of a key in a Properties object.
            @param attributes
            @param key
            @return
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.ToURL(System.String)">
            <summary>
            This method makes a valid URL from a given filename.
            </summary>
            <remarks>
            
            </remarks>
            <param name="filename">a given filename</param>
            <returns>a valid URL</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.UnEscapeURL(System.String)">
            Unescapes an URL. All the "%xx" are replaced by the 'xx' hex char value.
            @param src the url to unescape
            @return the eunescaped value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.Skip(System.IO.Stream,System.Int32)">
            <summary>
            This method is an alternative for the Stream.Skip()-method
            that doesn't seem to work properly for big values of size.
            </summary>
            <param name="istr">the stream</param>
            <param name="size">the number of bytes to skip</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.MillimetersToPoints(System.Single)">
            Measurement conversion from millimeters to points.
            @param    value   a value in millimeters
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.MillimetersToInches(System.Single)">
            Measurement conversion from millimeters to inches.
            @param    value   a value in millimeters
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.PointsToMillimeters(System.Single)">
            Measurement conversion from points to millimeters.
            @param    value   a value in points
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.PointsToInches(System.Single)">
            Measurement conversion from points to inches.
            @param    value   a value in points
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.InchesToMillimeters(System.Single)">
            Measurement conversion from inches to millimeters.
            @param    value   a value in inches
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Utilities.InchesToPoints(System.Single)">
            Measurement conversion from inches to points.
            @param    value   a value in inches
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfContents">
            <CODE>PdfContents</CODE> is a <CODE>PdfStream</CODE> containing the contents (text + graphics) of a <CODE>PdfPage</CODE>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfContents.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte,Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte,Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte,Dynamsoft.DotNet.TWAIN.PDF.PdfContentByte,Dynamsoft.DotNet.TWAIN.PDF.Rectangle)">
             Constructs a <CODE>PdfContents</CODE>-object, containing text and general graphics.
            
             @param under the direct content that is under all others
             @param content the graphics in a page
             @param text the text in a page
             @param secondContent the direct content that is over all others
             @throws BadPdfFormatException on error
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Dimension">
            <summary>
            The <code>Dimension</code> class encapsulates the width and
            height of a component (in int precision) in a single object. 
            </summary>
            <remarks>
            The class is 
            associated with certain properties of components. Several methods 
            defined by the <code>Component</code> class and the 
            <code>LayoutManager</code> interface return a <code>Dimension</code> object.
            <p/>
            Normally the values of <code>width</code> 
            and <code>height</code> are non-negative ints. 
            The constructors that allow you to create a dimension do 
            not prevent you from setting a negative value for these properties. 
            If the value of <code>width</code> or <code>height</code> is 
            negative, the behavior of some methods defined by other objects is 
            undefined. 
            </remarks>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Dimension.width">
            <summary>
            The width dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Dimension.height">
            <summary>
            The height dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.#ctor">
            <summary>
            Creates an instance of <code>Dimension</code> with a width 
            of zero and a height of zero. 
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Dimension)">
            <summary>
            Creates an instance of <code>Dimension</code> whose width 
            and height are the same as for the specified dimension. 
            </summary>
            <param name="d">
            the specified dimension for the 
            <code>width</code> and 
            <code>height</code> values.
            </param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Dimension and initializes it to the specified width and
            specified height.
            </summary>
            <param name="width">the specified width dimension</param>
            <param name="height">the specified height dimension</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.SetSize(System.Double,System.Double)">
            <summary>
            Set the size of this Dimension object to the specified width
            and height in double precision.
            </summary>
            <param name="width">the new width for the Dimension object</param>
            <param name="height">the new height for the Dimension object</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
            Set the size of this <code>Dimension</code> object 
            to the specified width and height.
            </summary>
            <param name="width">the new width for this <code>Dimension</code> object.</param>
            <param name="height">the new height for this <code>Dimension</code> object.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.Equals(System.Object)">
            <summary>
            Checks whether two dimension objects have equal values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.GetHashCode">
            <summary>
            Returns the hash code for this Dimension.
            </summary>
            <returns>a hash code</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Dimension.ToString">
            <summary>
            Returns a string representation of the values of this 
            <code>Dimension</code> object's <code>height</code> and 
            <code>width</code> fields.
            </summary>
            <remarks>
            This method is intended to be used only 
            for debugging purposes, and the content and format of the returned 
            string may vary between implementations. The returned string may be 
            empty but may not be <code>null</code>.
            </remarks>
            <returns>a string representation of this <code>Dimension</code>
            object.
            </returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension.Width">
            <summary>
            Returns the width of this dimension in double precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension.Height">
            <summary>
            Returns the height of this dimension in double precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Dimension.Size">
            <summary>
            Get/set the size of this <code>Dimension</code> object.
            </summary>
            <value>the size</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfString" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfString.value">
            The value of this object. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfString.encoding">
            The encoding. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.#ctor">
            Constructs an empty <CODE>PdfString</CODE>-object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.#ctor(System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.#ctor(System.String,System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
             @param        encoding    an encoding
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.#ctor(System.Byte[])">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        bytes    an array of <CODE>byte</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.ToPdf(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfString</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfString.ToString">
             Returns the <CODE>string</CODE> value of the <CODE>PdfString</CODE>-object.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfString.Encoding">
             Gets the encoding of this string.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawTextBox">
            <summary>
            Summary description for TextBoxEx.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.GDI.DrawTextBox.#ctor(System.Windows.Forms.TextBox,Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTextBox.GetFirstCharIndexOfLine(System.Int32)">
            <summary>
            Get first char index of the specified line
            </summary>
            <example>The following is an example of initializing a 
            <c>DocumentationSample</c> type:
              <code>
                // Create the type.
                DocumentationSample ds = new DocumentationSample();
                
                if ( null == ds )
                  return;
                  
                return ds.MyMethod( ?someString? );
              </code>
            </example>
            <param name="someValue">
              A <see cref="T:System.String"/> type representing a value.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="someValue"/> is <c><I><B>null pointer</B></I></c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="someValue"/> is <c>empty</c>.
            </exception>
            <param name="line">line index in TextBox, A <see cref="!:TwainWnd"/> type </param>
            <returns>char index</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTextBox.GetLineFromCharIndex(System.Int32)">
            <summary>
            Get line index from the specified char index
            </summary>
            <param name="index">char index in TextBox</param>
            <returns>line index</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawTextBox.GetLineCount">
            <summary>
            Get total lines count
            </summary>
            <returns>total lines count</returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.SetViewMode">
            <summary>
            Summary description for Rotate.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.SetViewMode.components">
            <summary>
            Required designer variable.
            </summary>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.SetViewMode.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.SetViewMode.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings">
            Supports fast encodings for winansi and PDFDocEncoding.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.ConvertToBytes(System.Char,System.String)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.IsPdfDocEncoding(System.String)">
            Checks is <CODE>text</CODE> only has PdfDocEncoding characters.
            @param text the <CODE>String</CODE> to test
            @return <CODE>true</CODE> if only PdfDocEncoding characters are present
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.CRLF_CID_NEWLINE">
            Assumes that '\\n' and '\\r\\n' are the newline sequences. It may not work for
            all CJK encodings. To be used with LoadCmap().
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.ClearCmap(System.String)">
            Clears the CJK cmaps from the cache. If <CODE>name</CODE> is the
            empty string then all the cache is cleared. Calling this method
            has no consequences other than the need to reload the cmap
            if needed.
            @param name the name of the cmap to clear or all the cmaps if the empty string
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.LoadCmap(System.String,System.Byte[][])">
            Loads a CJK cmap to the cache with the option of associating
            sequences to the newline.
            @param name the CJK cmap name
            @param newline the sequences to be replaced bi a newline in the resulting CID. See <CODE>CRLF_CID_NEWLINE</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfEncodings.AddExtraEncoding(System.String,Dynamsoft.DotNet.TWAIN.PDF.IExtraEncoding)">
            Adds an extra encoding.
            @param name the name of the encoding. The encoding recognition is case insensitive
            @param enc the conversion class
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IExtraEncoding">
            Classes implementing this interface can create custom encodings or
            replace existing ones. It is used in the context of <code>PdfEncoding</code>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IExtraEncoding.CharToByte(System.String,System.String)">
            Converts an Unicode string to a byte array according to some encoding.
            @param text the Unicode string
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IExtraEncoding.CharToByte(System.Char,System.String)">
            Converts an Unicode char to a byte array according to some encoding.
            @param char1 the Unicode char
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IExtraEncoding.ByteToChar(System.Byte[],System.String)">
            Converts a byte array to an Unicode string according to some encoding.
            @param b the input byte array
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IllegalPdfSyntaxException">
            Typed exception used when creating PDF syntax that isn't valid.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IllegalPdfSyntaxException.#ctor(System.String)">
            Creates an exception saying the PDF syntax isn't correct.
            @param	message	some extra info about the exception
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.schema">
            The PdfCollectionSchema with the names and types of the items. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSchema)">
            Constructs a Collection Item that can be added to a PdfFileSpecification.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,System.String)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.DotNet.TWAIN.PDF.PdfString)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.DotNet.TWAIN.PDF.PdfDate)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,Dynamsoft.DotNet.TWAIN.PDF.PdfNumber)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,System.DateTime)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,System.Int32)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,System.Single)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.AddItem(System.String,System.Double)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionItem.SetPrefix(System.String,System.String)">
            Adds a prefix for the Collection item.
            You can only use this method after you have set the value of the item.
            @param prefix    a prefix
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PngImage" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.IHDR">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.PLTE">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.IDAT">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.IEND">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.tRNS">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.pHYs">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.gAMA">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.cHRM">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.sRGB">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.iCCP">
            A PNG marker. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PngImage.PNGID">
            Some PNG specific values. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.#ctor(System.IO.Stream)">
            Creates a new instance of PngImage 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetImage(System.Uri)">
            Reads a PNG from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetImage(System.IO.Stream)">
            Reads a PNG from a stream.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetImage(System.String)">
            Reads a PNG from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetImage(System.Byte[])">
            Reads a PNG from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetInt(System.IO.Stream)">
             Gets an <CODE>int</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetWord(System.IO.Stream)">
             Gets a <CODE>word</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PngImage.GetString(System.IO.Stream)">
             Gets a <CODE>String</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic">
             <summary>
             Rotate image using bicubic interpolation.
             </summary>
             
             <remarks><para>The class implements image rotation filter using bicubic
             interpolation algorithm.</para>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <para>The filter accepts 8 bpp grayscale images and 24 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateBicubic filter = new RotateBicubic( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_bicubic.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBilinear"/>
             <seealso cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateNearestNeighbor"/>
             
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic.#ctor(System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic"/> class.
             </summary>
             
             <param name="angle">Rotation angle.</param>
             
             <remarks><para>This constructor sets <see cref="P:Dynamsoft.DotNet.TWAIN.ImageFilter.BaseRotateFilter.KeepSize"/> property
             to <see langword="false"/>.</para>
             </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.ImageFilter.RotateBicubic.FormatTransalations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.Interpolation.BiCubicKernel(System.Double)">
            <summary>
            Bicubic kernel.
            </summary>
            
            <param name="x">X value.</param>
            
            <returns>Bicubic cooefficient.</returns>
            
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawToolPointer">
            <summary>
            Pointer tool
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolPointer.OnMouseDown(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Left mouse button is pressed
            </summary>
            <param name="imgWindow"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolPointer.OnMouseMove(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse is moved.
            None button is pressed, ot left button is pressed.
            </summary>
            <param name="imgWindow"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolPointer.OnMouseUp(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Right mouse button is released
            </summary>
            <param name="imgWindow"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ImageControl">
            <summary>
            Summary description for ImageControl.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.ImageControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.About.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.About.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.About.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfPages" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfPages.#ctor(Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
            Constructs a <CODE>PdfPages</CODE>-object.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable">
            A Hashtable that uses ints as the keys.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.table">
            The hash table data.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.count">
            The total number of entries in the hash table.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.threshold">
            Rehashes the table when count exceeds this threshold.
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.loadFactor">
            The load factor for the hashtable.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.#ctor(System.Int32,System.Single)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.#ctor(System.Int32)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.#ctor">
            Constructs a new, empty hashtable. A default capacity and load factor
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.IsEmpty">
            Returns true if the hashtable contains no elements.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Contains(System.Int32)">
            Returns true if the specified object is an element of the hashtable.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.ContainsKey(System.Int32)">
            Returns true if the collection contains an element for the key.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Rehash">
            Rehashes the content of the table into a bigger table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Remove(System.Int32)">
            Removes the element corresponding to the key. Does nothing if the
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Clear">
            Clears the hash table so that it has no more elements in it.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Size">
            Returns the number of elements contained in the hashtable.
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.IntHashtable.Item(System.Int32)">
            Gets the object associated with the specified key in the
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSort.#ctor(System.String)">
            Constructs a PDF Collection Sort Dictionary.
            @param key   the key of the field that will be used to sort entries
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSort.#ctor(System.String[])">
            Constructs a PDF Collection Sort Dictionary.
            @param keys  the keys of the fields that will be used to sort entries
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSort.SetSortOrder(System.Boolean)">
            Defines the sort order of the field (ascending or descending).
            @param ascending true is the default, use false for descending order
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfCollectionSort.SetSortOrder(System.Boolean[])">
            Defines the sort order of the field (ascending or descending).
            @param ascending an array with every element corresponding with a name of a field.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ZoomTo">
            <summary>
            Summary description for ZoomTo.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ZoomTo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ZoomTo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_IDENTITY">
            <summary>
            /* DAT_IDENTITY. Identifies the program/library/code resource. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_SETUPFILEXFER">
            <summary>
            /* DAT_SETUPFILEXFER. Sets up DS to application data transfer via a file. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_CAPABILITY">
            <summary>
            /* DAT_CAPABILITY. Used by application to get/set capability from/in a data source. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_ARRAY">
            <summary>
            /* TWON_ARRAY. Container for array of values (a simplified TW_ENUMERATION) */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_ENUMERATION">
            <summary>
            /* TWON_ENUMERATION. Container for a collection of values. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_STATUS">
            <summary>
            /* DAT_STATUS. Application gets detailed status info from a data source with this. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_USERINTERFACE">
            <summary>
            /* DAT_USERINTERFACE. Coordinates UI between application and data source. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_IMAGEINFO">
            <summary>
            /* DAT_IMAGEINFO. Application gets detailed image info from DS with this. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_PENDINGXFERS">
            <summary>
            /* DAT_PENDINGXFERS. Used with MSG_ENDXFER to indicate additional data. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_RANGE">
            <summary>
            /* TWON_RANGE. Container for a range of values. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_IMAGEMEMXFER">
            <summary>
            /* DAT_IMAGEMEMXFER. Used to pass image data (e.g. in strips) from DS to application.*/
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_SETUPMEMXFER">
            <summary>
            /* DAT_SETUPMEMXFER. Sets up DS to application data transfer via a memory buffer. */
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.TwainDefine.TW_PALETTE8">
            <summary>
            /* DAT_PALETTE8. Color palette when TWPT_PALETTE pixels xfer'd in mem buf. */
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfResources" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfResources.#ctor">
            Constructs a PDF ResourcesDictionary.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.llx">
            lower left x 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.lly">
            lower left y 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.urx">
            upper right x 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.ury">
            upper right y 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object.
            
             @param       llx         lower left x
             @param       lly         lower left y
             @param       urx         upper right x
             @param       ury         upper right y
            
             @since       rugPdf0.10
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.#ctor(System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object starting from the origin (0, 0).
            
             @param       urx         upper right x
             @param       ury         upper right y
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Rectangle,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object with a <CODE>Rectangle</CODE>-object.
            
             @param   rectangle   a <CODE>Rectangle</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Add(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
             Overrides the <CODE>add</CODE>-method in <CODE>PdfArray</CODE> in order to prevent the adding of extra object to the array.
            
             @param       object          <CODE>PdfObject</CODE> to add (will not be added here)
             @return      <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Add(System.Single[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Add(System.Int32[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.AddFirst(Dynamsoft.DotNet.TWAIN.PDF.PdfObject)">
            Block changes to the underlying PdfArray
            @param object Ignored.
            @since 2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.GetLeft(System.Int32)">
             Returns the lower left x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left x-coordinate
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.GetRight(System.Int32)">
             Returns the upper right x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right x-coordinate
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.GetTop(System.Int32)">
             Returns the upper right y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right y-coordinate
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.GetBottom(System.Int32)">
             Returns the lower left y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left y-coordinate
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Rectangle">
            Returns the high level version of this PdfRectangle
            @return this PdfRectangle translated to class Rectangle
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Left">
             Returns the lower left x-coordinate.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Width">
             Returns the width of the rectangle.
            
             @return      a width
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Height">
             Returns the height of the rectangle.
            
             @return      a height
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfRectangle.Rotate">
             Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.XYZ">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FIT">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITH">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITV">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITR">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITB">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITBH">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.FITBV">
            This is a possible destination type 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.status">
            Is the indirect reference to a page already added? 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.#ctor(System.Int32,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.HasPage">
             Checks if an indirect reference to a page has been added.
            
             @return    <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDestination.AddPage(Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectReference)">
            Adds the indirect reference of the destination page.
            
             @param page    an indirect reference
             @return true if the page reference was added
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Meta">
            <summary>
            This is an Element that contains
            some meta information about the document.
            </summary>
            <remarks>
            An object of type Meta can not be constructed by the user.
            Userdefined meta information should be placed in a Header-object.
            Meta is reserved for: Subject, Keywords, Author, Title, Producer
            and Creationdate information.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Header"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Meta.type">
            <summary> This is the type of Meta-information this object contains. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Meta.content">
            <summary> This is the content of the Meta-information. </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="type">the type of meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.#ctor(System.String,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="tag">the tagname of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.Process(Dynamsoft.DotNet.TWAIN.PDF.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.Append(System.String)">
            <summary>
            appends some text to this Meta.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Meta.GetType(System.String)">
            <summary>
            Returns the name of the meta information.
            </summary>
            <param name="tag">name to match</param>
            <returns>a string</returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Meta.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Meta.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Meta.Content">
            <summary>
            Returns the content of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.Meta.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Jpeg">
            <summary>
            An Jpeg is the representation of a graphic element (JPEG)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Png"/>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.NOT_A_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.VALID_MARKERS">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.UNSUPPORTED_MARKERS">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.NOPARAM_MARKERS">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.#ctor(Dynamsoft.DotNet.TWAIN.PDF.Images.Image)">
            <summary>
            Construct a Jpeg-object, using a Image
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.#ctor(System.Uri)">
            <summary>
            Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="Uri">the Uri where the image can be found</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.#ctor(System.Byte[])">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image.</param>
            <param name="width">the width you want the image to have</param>
            <param name="height">the height you want the image to have</param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.GetShort(System.IO.Stream)">
            <summary>
            Reads a short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.GetShortInverted(System.IO.Stream)">
            <summary>
            Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.MarkerType(System.Int32)">
            <summary>
            Returns a type of marker.
            </summary>
            <param name="marker">an int</param>
            <returns>a type: VALID_MARKER, UNSUPPORTED_MARKER or NOPARAM_MARKER</returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.Jpeg.ProcessParameters">
            <summary>
            This method checks if the image is a valid JPEG and processes some parameters.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ICC_Profile">
            <summary>
            Summary description for ICC_Profile.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.Decode(System.Byte[],System.IO.Stream)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.LZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newstring</code> to the end of <code>oldstring</code>.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawToolTextBox.OnMouseDown(Dynamsoft.DotNet.TWAIN.Controls.ImageWindow,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="imgWindow"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl">
            <summary>
            Summary description for DrawImageControl.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.Draw(System.Drawing.Graphics)">
            <summary>
            Draw object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.GetHandle(System.Int32)">
            <summary>
            Get handle point by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.GetHandleRectangle(System.Int32)">
            <summary>
            Get handle rectangle by 1-based number
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.DrawTracker(System.Drawing.Graphics)">
            <summary>
            Draw tracker for selected object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.HitTest(System.Drawing.Point)">
            <summary>
            Hit test.
            Return value: -1 - no hit
                           0 - hit anywhere
                           > 1 - handle number
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.PointInObject(System.Drawing.Point)">
            <summary>
            Test whether point is inside of the object
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.GetHandleCursor(System.Int32)">
            <summary>
            Get curesor for the handle
            </summary>
            <param name="handleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.IntersectsWith(System.Drawing.Rectangle)">
            <summary>
            Test whether object intersects with rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.Move(System.Int32,System.Int32)">
            <summary>
            Move object
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.MoveHandleTo(System.Drawing.Point,System.Int32)">
            <summary>
            Move handle to the point
            </summary>
            <param name="point"></param>
            <param name="handleNumber"></param>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.GDI.DrawImageControl.Normalize">
            <summary>
            Normalize object.
            Call this function in the end of object resizing.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ImageEditor">
            <summary>
            Summary description for ImageEditor.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ConstStringHelper">
            <summary>
            Summary description for ConstStringHelper.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Business.WebTwainBase">
            <summary>
            Summary description for WebTwainBase.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Business.WebTwainBase.FTPUpload(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
            <summary>
            
            </summary>
            <param name="strFTPServer"></param>
            <param name="strFTPRemoteFile"></param>
            <param name="sImageIndex">-1,表示所有图片</param>
            <param name="enumImageType"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.PdfBorderDictionary">
             A <CODE>PdfBorderDictionary</CODE> define the appearance of a Border (Annotations).
            
             @see     PdfDictionary
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfBorderDictionary.#ctor(System.Single,System.Int32)">
            Constructs a <CODE>PdfBorderDictionary</CODE>.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Licenses.TwainLicenseProvider">
            <summary>
            Summary description for TwainLicenseProvider.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.ITwainEvent">
            <summary>
            Provides the base interface for firing DynamicDotNetTWAIN events.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPostTransferHandler">
            <summary>
            Occurs when each image is scanned.
            </summary>
            <remarks>
            This is the place to check <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.PendingXFERs"/> property.
            <para>
            This is the place to read the properties of image information: <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageBitsPerPixel"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImagePixelType"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLength"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageWidth"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageXResolution"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageYResolution"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutDocumentNumber"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameLeft"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameTop"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameRight"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameBottom"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutPageNumber"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameNumber"/> property. 
            </para>
            This is also the place to call <see cref="M:Dynamsoft.DotNet.TWAIN.Interface.ITwain.CancelAllPendingTransfers"/>.
            </remarks>
            <seealso cref="!:OnPreAllTransfers"/> Event, <seealso cref="!:OnPreTransfer"/> Event, <seealso cref="!:OnPostAllTransfers"/> Event, 
            <seealso cref="!:OnTransferCancelled"/> Event, <seealso cref="!:OnTransferError"/> Event.
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPreTransferHandler">
            <summary>
            Occurs before each image is scanned.
            </summary>
            <remarks>
            This is the place to read the properties of image information: ImageBitsPerPixel property, 
            ImagePixelType property, ImageLength property, ImageWidth property, ImageXResolution property, 
            ImageYResolution property, ImageLayoutDocumentNumber property, ImageLayoutFrameLeft property, 
            ImageLayoutFrameTop property, ImageLayoutFrameRight property, ImageLayoutFrameBottom property, 
            ImageLayoutPageNumber property, ImageLayoutFrameNumber property. 
            <para>
            This is also the place to call CancelAllPendingTransfers().
            </para>
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPreAllTransfersHandler">
            <summary>
            Occurs before all images are scanned.
            </summary>
            <remarks>
            Multiple transfers may occur when ADF(Auto Document Feeder) is enabled or there are more than one frames in a page.
            In those cases, more than one OnPreTransfer Event will be fired, and only one OnPreAllTransfers Event will be fired.
            This is the place to call CancelAllPendingTransfers().
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPostAllTransfersHandler">
            <summary>
            Occurs after all image are scanned.
            </summary>
            <remarks>
            Multiple transfers may occur when ADF(Auto Document Feeder) is enabled or there are more than one frames in a page. 
            In those cases, more than one OnPostTransfer Event will be fired, and only one OnPostAllTransfers Event will be fired.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTransferErrorHandler">
            <summary>
            Occurs when an error occurs during the process of transfer.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTransferCancelledHandler">
            <summary>
            Occurs when the transfer is cancelled by the user.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseClickHandler">
            <summary>
            Occurs when the mouse clicks on an image.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex >=0. When the value of sImageIndex equals -1, it indicates that no image is clicked.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseMoveHandler">
            <summary>
            Occurs when the mouse moves onto an image.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex >=0. When the value of sImageIndex equals -1, it indicates that mouse is not on any image.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnInternetTransferPercentageHandler">
            <summary>
            Occurs when uploading or downloading images via HTTP or FTP.
            </summary>
            <param name="sPercent">Specifies upload or download progress.</param>
            <param name="cancel">Specifies if canncel upload or download. If you want to cancel upload or download, please set its member Cancelled value as true.</param>
            <remarks>
            This event is triggered when user uploads or downloads images via HTTP or FTP.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseRightClickHandler">
            <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex >=0. When the value of sImageIndex equals -1, it indicates that no image is right-clicked.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseDoubleClickHandler">
            <summary>
            Occurs when the mouse double clicks on an image.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex >=0. When the value of sImageIndex equals -1, it indicates that no image is double-clicked.
            </remarks>    
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTopImageInTheViewChangedHandler">
            <summary>
            Occurs when the current top image displayed in Dynamic .Net TWAIN is changed and the view mode is NOT set to -1 by -1.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex >=0.
            </remarks>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnImageAreaSelectedHandler">
            <summary>
            Occurs when an area of the specified image is selected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <param name="left">The long point number for the left side of the rectangle are the mouse selects.</param>
            <param name="top">The long point number for the top side of the rectangle are the mouse selects.</param>
            <param name="right">The long point number for the right side of the rectangle are the mouse selects.</param>
            <param name="bottom">The long point number for the bottom side of the rectangle are the mouse selects.</param>
            <remarks>
            Short sImageIndex &gt;=0. 
            </remarks> 
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnImageAreaDeselectedHandler">
            <summary>
            Occurs when the selected area of the specified image is deselected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
            <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
            <remarks>
            Short sImageIndex &gt;=0.
            </remarks>  
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.ImageSize">
            <summary>
            Summary description for ImageSize.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Dynamsoft.DotNet.TWAIN.Controls.ImageSize.components" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageSize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.ImageSize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="!:Create"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.OverflowCoordinates(System.Int32@,System.Int32@,Dynamsoft.DotNet.TWAIN.Enums.EnumOverflowMethod)">
             Recalculates coordinates according to specified overflow method.
             If pixel (x,y) lies within image, nothing changes.
            
              \param x, y - coordinates of pixel
              \param enumOverflowMethod - overflow method
             
              \return x, y - new coordinates (pixel (x,y) now lies inside image)
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.OverflowCoordinates(System.Single@,System.Single@,Dynamsoft.DotNet.TWAIN.Enums.EnumOverflowMethod)">
            See OverflowCoordinates for integer version 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.GetPixelColorWithOverflow(System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.Enums.EnumOverflowMethod,Dynamsoft.DotNet.TWAIN.Common.RGBQUAD_*)">
             Method return pixel color. Different methods are implemented for out of bounds pixels.
             If an image has alpha channel, alpha value is returned in .RGBReserved.
            
              \param x,y : pixel coordinates
              \param enumOverflowMethod : out-of-bounds method:
                - OF_WRAP - wrap over to pixels on other side of the image
                - OF_REPEAT - repeat last pixel on the edge
                - OF_COLOR - return input value of color
                - OF_BACKGROUND - return background color (if not set, return input color)
                - OF_TRANSPARENT - return transparent pixel
            
              \param rplColor : input color (returned for out-of-bound coordinates in OF_COLOR mode and if other mode is not applicable)
            
             \return color : color of pixel
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.GetAreaColorInterpolated(System.Single,System.Single,System.Single,System.Single,Dynamsoft.DotNet.TWAIN.Enums.EnumInterpolationMethod,Dynamsoft.DotNet.TWAIN.Enums.EnumOverflowMethod,Dynamsoft.DotNet.TWAIN.Common.RGBQUAD_*)">
             This method is similar to GetPixelColorInterpolated, but this method also properly handles 
             subsampling.
             If you need to sample original image with interval of more than 1 pixel (as when shrinking an image), 
             you should use this method instead of GetPixelColorInterpolated or aliasing will occur.
             When area width and height are both less than pixel, this method gets pixel color by interpolating
             color of frame center with selected (enumInterpolationMethod) interpolation by calling GetPixelColorInterpolated. 
             If width and height are more than 1, method calculates color by averaging color of pixels within area.
             Interpolation method is not used in this case. Pixel color is interpolated by averaging instead.
             If only one of both is more than 1, method uses combination of interpolation and averaging.
             Chosen interpolation method is used, but since it is averaged later on, there is little difference
             between IM_BILINEAR (perhaps best for this case) and better methods. enumInterpolationMethodNearestNeighbour again
             leads to aliasing artifacts.
             This method is a bit slower than GetPixelColorInterpolated and when aliasing is not a problem, you should
             simply use the later. 
            
             \param  xc, yc - center of (rectangular) area
             \param  w, h - width and height of area
             \param  enumInterpolationMethod - interpolation method that is used, when interpolation is used (see above)
             \param  enumOverflowMethod - overflow method used when retrieving individual pixel colors
             \param  rplColor - replacement colour to use, in enumOverflowMethodColor
            
             \author ***bd*** 2.2004
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.KernelCubic(System.Single)">
            **
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.Common.CImage.KernelGeneralizedCubic(System.Single,System.Single)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.Common.CImage.Rotate(System.Single,Dynamsoft.DotNet.TWAIN.Enums.EnumInterpolationMethod,Dynamsoft.DotNet.TWAIN.Enums.EnumOverflowMethod,System.Drawing.Color,System.Boolean)">
             Rotates image around it's center.
             Method can use interpolation with paletted images, but does not change pallete, so results vary.
             (If you have only four colours in a palette, there's not much room for interpolation.)
             
             \param  angle - angle in degrees (positive values rotate clockwise)
             \param  *iDst - destination image (if null, this image is changed)
             \param  inMethod - interpolation method used
                          (IM_NEAREST_NEIGHBOUR produces aliasing (fast), IM_BILINEAR softens picture a bit (slower)
                           IM_SHARPBICUBIC is slower and produces some halos...)
             \param  ofMethod - overflow method (how to choose colour of pixels that have no source)
             \param  replColor - replacement colour to use (OM_COLOR, OM_BACKGROUND with no background colour...)
             \param  optimizeRightAngles - call faster methods for 90, 180, and 270 degree rotations. Faster methods
                                     are called for angles, where error (in location of corner pixels) is less
                                     than 0.25 pixels.
             \param  bKeepOriginalSize - rotates the image without resizing.
            
             \author ***bd*** 2.2004
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.number">
            The object number 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.generation">
            the generation number 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.#ctor(System.Int32,Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        objecti            the direct objecti
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.#ctor(System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.PDF.PdfObject,Dynamsoft.DotNet.TWAIN.PDF.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        generation        the generation number
             @param        objecti            the direct objecti
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.WriteTo(System.IO.Stream)">
             Writes eficiently to a stream
            
             @param os the stream to write to
             @throws IOException on write error
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.PDF.PdfIndirectObject.IndirectReference">
             Returns a <CODE>PdfIndirectReference</CODE> to this <CODE>PdfIndirectObject</CODE>.
            
             @return        a <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.PDF.ListIterator">
            <summary>
            Summary description for ListIterator.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfName" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName._3D">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.A">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ABSOLUTECOLORIMETRIC">
            A name
            @since 2.1.5 renamed from ABSOLUTECALORIMETRIC
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ACROFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ACTION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ACTUALTEXT">
            a name used in PDF structure
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE_PKCS7_DETACHED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE_PKCS7_S4">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE_PKCS7_S5">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE_PKCS7_SHA1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADBE_X509_RSA_SHA1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADOBE_PPKLITE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ADOBE_PPKMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AESV2">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AIS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ALLPAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ALT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ALTERNATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ANNOT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ANNOTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ANTIALIAS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.APPDEFAULT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ART">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ARTBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ASCENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ASCII85DECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ASCIIHEXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ASSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ASSETS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AUTHEVENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.AUTHOR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.B">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BACKGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BASEENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BASEFONT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BASEVERSION">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BIBENTRY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BIGFIVE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BINDING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BINDINGMATERIALNAME">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BITSPERCOMPONENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BITSPERSAMPLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BL">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BLACKIS1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BLACKPOINT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BLOCKQUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BLEEDBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BLINDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BORDER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BOUNDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BTN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.BYTERANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.C">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.C0">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.C1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ca_">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CALGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CALRGB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CAPHEIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CAPTION">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CATALOG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CATEGORY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CCITTFAXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CENTER">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CENTERWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CERT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CFM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CH">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CHARPROCS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIDFONTTYPE0">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIDFONTTYPE2">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIDSET">
            A name
            @since 2.0.7
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIDSYSTEMINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIDTOGIDMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CIRCLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CMD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CODE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLORS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLORSPACE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTIONFIELD">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTIONITEM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTIONSCHEMA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTIONSORT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLLECTIONSUBITEM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COLUMNS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONDITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONFIGURATIONS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONTACTINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CONTENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COORDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COUNT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COURIER">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COURIER_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COURIER_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.COURIER_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CREATIONDATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CREATOR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CREATORINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CROPBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CRYPT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CUEPOINT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CUEPOINTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.D">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DATA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DCTDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DECODEPARMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEFAULT">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEFAULTCRYPTFILTER">
            A name
            @since	2.1.5 renamed from DEFAULTCRYPTFILER
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEFAULTCMYK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEFAULTGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEFAULTRGB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DESC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DESCENDANTFONTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DESCENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEST">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DESTOUTPUTPROFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DESTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEVICEGRAY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEVICERGB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DEVICECMYK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DIFFERENCES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DISSOLVE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DIRECTION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DISPLAYDOCTITLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DIV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DOCMDP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DOCOPEN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DOCUMENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DOMAIN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DUR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DUPLEX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DUPLEXFLIPSHORTEDGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DUPLEXFLIPLONGEDGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.E">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EARLYCHANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EFF">
            A name
            @since	2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EFOPEN">
            A name
            @since	2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EMBEDDED">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EMBEDDEDFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EMBEDDEDFILES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENCODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENCODEDBYTEALIGN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENCRYPT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENCRYPTMETADATA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENDOFBLOCK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ENDOFLINE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXTEND">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXTENSIONS">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXTENSIONLEVEL">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXTGSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXPORT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EXPORTSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EVENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.F">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FDECODEPARMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FDF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FFILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIELDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIGURE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FILEATTACHMENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FILESPEC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIRST">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIRSTCHAR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIRSTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FIT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITH">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITBH">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITBV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FITWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FLAGS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FLASH">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FLASHVARS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FLATEDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTBBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTDESCRIPTOR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTFILE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTFILE2">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTFILE3">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTMATRIX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FONTNAME">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FOREGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FORM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FORMTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FORMULA">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FREETEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FRM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FULLSCREEN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FUNCTION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FUNCTIONS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.FUNCTIONTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GAMMA">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GBK">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GLITTER">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GOTO">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GOTOE">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GOTOR">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GROUP">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GTS_PDFA1">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GTS_PDFX">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GTS_PDFXVERSION">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H1">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H2">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H3">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H4">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H5">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.H6">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HEIGHT">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HELV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HELVETICA">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HELVETICA_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HELVETICA_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HELVETICA_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HID">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HIDE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HIDEMENUBAR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HIDETOOLBAR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HIDEWINDOWUI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HIGHLIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.HOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.I">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ICCBASED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ID">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IDENTITY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMAGEB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMAGEC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMAGEI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMAGEMASK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INDEX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INDEXED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INFO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INKLIST">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INSTANCES">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IMPORTDATA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.INTERPOLATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ISMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IRT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ITALICANGLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ITXT">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.IX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.JAVASCRIPT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.JBIG2DECODE">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.JBIG2GLOBALS">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.JPXDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.JS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.K">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.KEYWORDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.KIDS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.L">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.L2R">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LANG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LANGUAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LAST">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LASTCHAR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LASTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LAUNCH">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LBL">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LENGTH">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LENGTH1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LI">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LIMITS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LINE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LINEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LINK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LISTMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LOCATION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LOCK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LOCKED">
            A name
            @since	2.1.2
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.LZWDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.M">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MATERIAL">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MATRIX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MAC_EXPERT_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MAC_ROMAN_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MARKED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MARKINFO">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MASK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MAX_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MAX
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MAX_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MAXLEN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MEDIABOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MCID">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MCR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.METADATA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MIN_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MIN
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MIN_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MMTYPE1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.MODDATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N0">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N2">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N3">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.N4">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NAME">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NAMED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NAMES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NAVIGATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NAVIGATIONPANE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NEEDAPPEARANCES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NEWWINDOW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NEXTPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NONE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NONFULLSCREENPAGEMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NONSTRUCT">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NUMCOPIES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.NUMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.O">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OBJ">
            A name used with Document Structure
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OBJR">
            a name used with Doucment Structure
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OBJSTM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OCG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OCGS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OCMD">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OCPROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.Off_">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OFF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ON">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ONECOLUMN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OPEN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OPENACTION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.op_">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OPM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OPT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ORDER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ORDERING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OSCILLATING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OUTLINES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OUTPUTCONDITION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OUTPUTCONDITIONIDENTIFIER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OUTPUTINTENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.OUTPUTINTENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.P">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAGELABELS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAGELAYOUT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAGEMODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PAINTTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PANOSE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PARAMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PARENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PARENTTREE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PARENTTREENEXTKEY">
            A name used in defining Document Structure.
            @since 2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PART">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PASSCONTEXTCLICK">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PATTERN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PATTERNTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PC">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PDF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PDFDOCENCODING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PERCEPTUAL">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PERMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PI">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PICKTRAYBYPDFSIZE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PLAYCOUNT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.POPUP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.POSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PREDICTOR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PREFERRED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRESERVERB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PREV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PREVPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINTAREA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINTCLIP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINTPAGERANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINTSCALING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRINTSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRIVATE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PROCSET">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PRODUCER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PUBSEC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.PV">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.Q">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.QUADPOINTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.QUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.R">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.R2L">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RANGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RBGROUPS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.REASON">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RECIPIENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RECT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.REFERENCE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.REGISTRY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.REGISTRYNAME">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RELATIVECOLORIMETRIC">
            A name
            @since	2.1.5 renamed from RELATIVECALORIMETRIC
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RENDITION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RESETFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RESOURCES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIACOMMAND">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIACONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIACONTENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIADEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAEXECUTE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAINSTANCE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAPARAMS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAPOSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAPRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIASETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RICHMEDIAWINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ROLEMAP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ROOT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ROTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ROWS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RUBY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RUNLENGTHDECODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.RV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.S">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SATURATION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SCHEMA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SCREEN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SCRIPTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SECT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SEPARATION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SETOCGSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SHADING">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SHADINGTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SHIFT_JIS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SIG">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SIGFLAGS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SIGREF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SIMPLEX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SINGLEPAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SIZE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SMASK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SORT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SOUND">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SPAN">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SPEED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SPLIT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SQUARE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SQUIGGLY">
            A name
            @since 2.1.3
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ST">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STAMP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STANDARD">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STDCF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STEMV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STMF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STRF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STRIKEOUT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STRUCTPARENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STRUCTPARENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STRUCTTREEROOT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.STYLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SUBFILTER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SUBJECT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SUBMITFORM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SUBTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SUPPLEMENT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SV">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.SYMBOL">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.T">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TA">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TABLE">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TABS">
            A name
            @since	2.1.5
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TD">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TEXT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TFOOT">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TH">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.THEAD">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.THUMB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.THREADS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TIME">
            A name
            @since	2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TILINGTYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TIMES_ROMAN">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TIMES_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TIMES_ITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TIMES_BOLDITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TITLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TK">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TOC">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TOCI">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TOGGLE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TOOLBAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TOUNICODE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TABLEROW">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRANS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRANSFORMPARAMS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRANSFORMMETHOD">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRANSPARENCY">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRANSPARENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRAPPED">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRIMBOX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TRUETYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TU">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TWOCOLUMNLEFT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TWOCOLUMNRIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TWOPAGELEFT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TWOPAGERIGHT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TX">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TYPE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TYPE0">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TYPE1">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.TYPE3">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.U">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.UF">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.UHC">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.UNDERLINE">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.UR">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.UR3">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.URI">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.URL">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USAGE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USEATTACHMENTS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USENONE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USEOC">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USEOUTLINES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USER">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USERPROPERTIES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USERUNIT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.USETHUMBS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.V">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.V2">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VERISIGN_PPKVS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VERSION">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIDEO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEW">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEWS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEWAREA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEWCLIP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEWERPREFERENCES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VIEWSTATE">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VISIBLEPAGES">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.VOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.W">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.W2">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WARICHU">
            A name
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WC">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIDGET">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIDTH">
            A name of an attribute. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIDTHS">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIN">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIN_ANSI_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WINDOWED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WIPE">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WHITEPOINT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.WS">
            A name of an encoding 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.X">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XFA">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XML">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XOBJECT">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XSTEP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XREF">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XREFSTM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.XYZ">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.YSTEP">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ZADB">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ZAPFDINGBATS">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.ZOOM">
            A name 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.PdfName.staticNames">
            map strings to all known static names
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.#cctor">
            Use reflection to cache all the static public final names so
            future <code>PdfName</code> additions don't have to be "added twice".
            A bit less efficient (around 50ms spent here on a 2.2ghz machine),
             but Much Less error prone.
            @since 2.1.6
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.#ctor(System.String)">
            Constructs a new <CODE>PdfName</CODE>. The name length will be checked.
            @param name the new name
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.#ctor(System.String,System.Boolean)">
            Constructs a new <CODE>PdfName</CODE>.
            @param name the new name
            @param lengthCheck if <CODE>true</CODE> check the lenght validity, if <CODE>false</CODE> the name can
            have any length
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.CompareTo(System.Object)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.Equals(System.Object)">
             Indicates whether some other object is "equal to" this one.
            
             @param   obj   the reference object with which to compare.
             @return  <code>true</code> if this object is the same as the obj
                      argument; <code>false</code> otherwise.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.GetHashCode">
             Returns a hash code value for the object. This method is
             supported for the benefit of hashtables such as those provided by
             <code>java.util.Hashtable</code>.
            
             @return  a hash code value for this object.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.EncodeName(System.String)">
             Encodes a plain name given in the unescaped form "AB CD" into "/AB#20CD".
            
             @param name the name to encode
             @return the encoded name
             @since	2.1.5
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfName.DecodeName(System.String)">
            Decodes an escaped name in the form "/AB#20CD" into "AB CD".
            @param name the name to decode
            @return the decoded name
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.PdfDate" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDate.#ctor(System.DateTime)">
             Constructs a <CODE>PdfDate</CODE>-object.
            
             @param       d           the date that has to be turned into a <CODE>PdfDate</CODE>-object
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDate.#ctor">
            Constructs a <CODE>PdfDate</CODE>-object, representing the current day and time.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDate.SetLength(System.Int32,System.Int32)">
             Adds a number of leading zeros to a given <CODE>string</CODE> in order to get a <CODE>string</CODE>
             of a certain length.
            
             @param       i           a given number
             @param       length      the length of the resulting <CODE>string</CODE>
             @return      the resulting <CODE>string</CODE>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDate.GetW3CDate">
            Gives the W3C format of the PdfDate.
            @return a formatted date
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.PdfDate.GetW3CDate(System.String)">
            Gives the W3C format of the PdfDate.
            @param d the date in the format D:YYYYMMDDHHmmSSOHH'mm'
            @return a formatted date
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamsoft.DotNet.TWAIN.PDF.TIFFField" -->
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_BYTE">
            Flag for 8 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_ASCII">
            Flag for null-terminated ASCII strings. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_SHORT">
            Flag for 16 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_LONG">
            Flag for 32 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_RATIONAL">
            Flag for pairs of 32 bit unsigned integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_SBYTE">
            Flag for 8 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_UNDEFINED">
            Flag for 8 bit uninterpreted bytes. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_SSHORT">
            Flag for 16 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_SLONG">
            Flag for 32 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_SRATIONAL">
            Flag for pairs of 32 bit signed integers. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_FLOAT">
            Flag for 32 bit IEEE floats. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.TIFF_DOUBLE">
            Flag for 64 bit IEEE doubles. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.tag">
            The tag number. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.type">
            The tag type. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.count">
            The number of data items present in the field. 
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.data">
            The field data. 
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.#ctor">
            The default constructor. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.#ctor(System.Int32,System.Int32,System.Int32,System.Object)" -->
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetTag">
            Returns the tag number, between 0 and 65535.
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetType">
             Returns the type of the data stored in the IFD.
             For a TIFF6.0 file, the value will equal one of the
             TIFF_ constants defined in this class.  For future
             revisions of TIFF, higher values are possible.
            
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetCount">
            Returns the number of elements in the IFD.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsBytes" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsChars" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsShorts" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsInts" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsLongs" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsFloats" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsDoubles" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsSRationals" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsRationals" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsInt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsLong(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsFloat(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsDouble(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsString(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsSRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.GetAsRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Dynamsoft.DotNet.TWAIN.PDF.TIFFField.CompareTo(System.Object)" -->
        <member name="T:Dynamsoft.DotNet.TWAIN.Interface.ITwainException">
            <summary>
            DynamicDotNetTWAIN exception interface definition.
            </summary>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.ITwainException.Code">
            <summary>
            Get exception error code.
            </summary>
            <returns>
            Exception error code.
            </returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.ITwainException.Message">
            <summary>
            Get exception error string.
            </summary>
            <returns>
            Exception error string.
            </returns>
        </member>
        <member name="P:Dynamsoft.DotNet.TWAIN.Interface.ITwainException.StackTrace">
            <summary>
            Get exception stack trace as string.
            </summary>
            <returns>
            Exception stack trace.
            </returns>
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.ImageFilter.Grayscale">
            <summary>
            Summary description for Grayscale.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.ImageFilter.Grayscale.ProcessFilter(Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage,Dynamsoft.DotNet.TWAIN.ImageFilter.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="T:Dynamsoft.DotNet.TWAIN.Controls.Rotate">
            <summary>
            Summary description for Rotate.
            </summary>
        </member>
        <member name="F:Dynamsoft.DotNet.TWAIN.Controls.Rotate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.Rotate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dynamsoft.DotNet.TWAIN.Controls.Rotate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Dynamsoft.DotNet.TWAIN.Common.SImageInfo.last_c_index" -->
    </members>
</doc>
